#!/bin/bash

BACI_HOME=`dirname $0`

#default options which may be modified through command line arguments
BUILD_TYPE="RELEASE"
TRILINOS_BUILD_TYPE="release"
GENERATOR="Unix Makefiles"
COVERAGE=0
DEBUG_OPTIMIZED=0
USE_ACML=0
USE_FORCEBUILD=0
SHARED_LIBS=OFF
CCACHE_COMMAND=ccache
MPIEXEC_EXTRA_OPTS_FOR_TESTING=
USE_LLD=0
DOXYGEN_BASE_PATH=
DOXYGEN_USE_MATHJAX=NO
DOXYGEN_USE_LOCAL_MATHJAX=NO
DOXYGEN_LOCAL_MATHJAX_BASEPATH=

# use experimental Trilinos version (e.g. current state of develop)
TRILINOS_EXPERIMENTAL=OFF

# ignore unstable cut test 
IGNORE_UNSTABLE_CUTTEST=OFF

# activate debug version: ./do-configure --debug

# Info about profiling mode: ./do-configure --profiling
# This does not profile the code on its own but merely adds debug info
# to the executable (the code performance is the same as for the release
# version, though). This can then give per-line cost information
# using 'valgrind --tool=callgrind ./baci-relwithdebinfo input output'

# Info about debug builds:
# We support two types of debug build: The actual (non-optimized) debug build is
# enabled via the option '--debug'. An optimized debug build used for nightly
# testing is achieved by setting '--debug-optimized'
# Note: Use only one of them! No checks in place if both are specified.

OPTIONS=`getopt -o hc:daef -l help,config:,debug,debug-optimized,trilinos-debug,generator:,profiling,coverage,useACML,forceBuild,no-ccache,uselld,ide: -- "$@"`

[ $? -ne 0 ] && exit 1

USAGEINFO="usage: do-configure --config=configurationfile [--debug] [--debug-optimized] [--trilinos-debug] [--generator=make/ninja] [--profiling] [--coverage] [--useACML] [--forceBuild] [--ide=clion/eclipse/vscode] [--no-ccache] [--uselld]"

eval set -- $OPTIONS

while true; do
  case "$1" in
    -h|--help)
      echo $USAGEINFO
      exit 1
      ;;
    -c|--config)
      CONFIGURATION_FILE="$2" ;
      shift
      ;;
    -d|--debug)
      BUILD_TYPE="DEBUG"
      ;;
    --debug-optimized)
      BUILD_TYPE="DEBUG"
      DEBUG_OPTIMIZED=1
      ;;
    --profiling)
      BUILD_TYPE="RELWITHDEBINFO"
      ;;
    --coverage)
      COVERAGE=1
      ;;
    --trilinos-debug)
      TRILINOS_BUILD_TYPE="dbg"
      ;;
    --generator)
      case "$2" in
        "make") GENERATOR="Unix Makefiles";;
        "ninja") GENERATOR="Ninja";;
        *) echo "Wrong option for --generator. See possible options via 'do-configure --help'."; exit 1 ;;
      esac
      shift
      ;;
    -a|--useACML)
      USE_ACML=1
      ;;
    -f|--forceBuild)
      USE_FORCEBUILD=1
      ;;
    --no-ccache)
      CCACHE_COMMAND=""
      ;;
    --uselld)
      USE_LLD=1
      ;;
    --ide)
      ADAPT_IDE_CLION=0
      ADAPT_IDE_ECLIPSE=0
      ADAPT_IDE_VSCODE=0
      case "$2" in
        "clion") ADAPT_IDE_CLION=1;;
        "eclipse") ADAPT_IDE_ECLIPSE=1;;
        "vscode") ADAPT_IDE_VSCODE=1;;
        *) echo "Wrong option for --ide. See possible options via 'do-configure --help'."; exit 1 ;;
      esac
      shift
      ;;
    --) shift ;
      break
      ;;
    *) echo "unknown option: $1" ; exit 1 ;;
  esac
  shift
done

if [ $# -ne 0 ]; then
  echo "unknown option(s): $@"
  echo $USAGEINFO
  exit 1
fi

##############################################################
# check for out-of-source build

BUILD_FOLDER=`pwd -P`
BUILD_FOLDER_SAFE=$BUILD_FOLDER
BACI_HOME=`cd $BACI_HOME; pwd -P`

if [[ $USE_FORCEBUILD == 0 ]]; then
  # check whether BUILD_FOLDER is "out-of-source"
  while true; do
    if [[ "x$BUILD_FOLDER" == "x$BACI_HOME" ]]; then

      PROPOSED_BUILDDIR="`dirname $(echo $BACI_HOME | sed -e 's/\/$//')`/build-${BUILD_TYPE,,}"

      echo "********************************************************************************************"
      echo "No in-source build of BACI allowed..."
      echo "Please choose a path for building BACI outside of $BACI_HOME"
      echo "For example: $PROPOSED_BUILDDIR"
      echo ""
      echo "HOWTO:"
      echo "  mkdir -p \"$PROPOSED_BUILDDIR\""
      echo "  cd \"$PROPOSED_BUILDDIR\""
      echo "  $BACI_HOME/do-configure [--debug] [--useACML] [...]"
      echo "  make -j 6 baci"
      echo "********************************************************************************************"

      exit 2
    fi

    BUILD_FOLDER="`dirname $(echo $BUILD_FOLDER | sed -e 's/\/$//')`"

    if [[ "x$BUILD_FOLDER" == "x/" ]]; then
      break;   # no in-source build -> all is fine
    fi
  done
fi

# set valid folder for baci build
BUILD_FOLDER=$BUILD_FOLDER_SAFE


##############################################################
# Check if ccache is installed
if [[ $CCACHE_COMMAND != "" ]]; then
    if ! command -v $CCACHE_COMMAND &> /dev/null
    then
        echo "ccache command: $CCACHE_COMMAND could not be found, ccache will not be used!"
        CCACHE_COMMAND=""
    fi
fi

##############################################################
if [[ $USE_LLD == 1 ]]; then

    # check if lld is installed
    if ! command -v lld &> /dev/null
    then
        echo "lld is not installed and can therefore not be used for linking"
        exit 2
    fi

    LINKER_EXECUTABLE=lld
else
    LINKER_EXECUTABLE=gold
fi





##############################################################
# Print source and build folder locations to screen
echo "Source and build directory:"
echo "-- Path to source code:    " $BACI_HOME
echo "-- Path to build directory:" $BUILD_FOLDER

# remove CMakeCache.txt
rm -f CMakeCache.txt

##############################################################
# read in configuration
if [[ -f $CONFIGURATION_FILE ]]; then
  echo "Configuration file:" $CONFIGURATION_FILE
  . $CONFIGURATION_FILE
else
  echo "No configuration file given! This is fatal!"
  echo ""
  echo "Please provide a suitable configuration file via the command line argument --config="
  echo "A bunch of supported configuration files can be found in <BACI-dir>/buildconfig/."
  exit
fi

if [ $COVERAGE == 1 ]; then
  CXXFLAGSRELEASE="$CXXFLAGSRELEASE -O0 -g -fprofile-arcs -ftest-coverage"
  LINKERFLAGSRELEASE="$LINKERFLAGSRELEASE -g -fprofile-arcs -ftest-coverage"
fi

# Append debug optimization flag for all configurations
if [[ $DEBUG_OPTIMIZED == 1 ]]; then
  CXXFLAGSDEBUG="$CXXFLAGSDEBUG -Og"
elif [[ -z "$CXXFLAGSDEBUG" ]]; then
  CXXFLAGSDEBUG="-g"
elif [[ $CXXFLAGSDEBUG != *"-g"* ]]; then
  CXXFLAGSDEBUG="$CXXFLAGSDEBUG -g"
fi

if [[ "$CXX" ]]; then
  echo "Overriding C++ compiler with $CXX"
  CXXCOMPILER=$CXX
  CCOMPILER=$CC
  FCOMPILER=$F90
else
  echo "No C++ compiler given, using default at $MPIDIR/bin/mpic++"
  CXXCOMPILER=$MPIDIR/bin/mpic++
  CCOMPILER=$MPIDIR/bin/mpicc
  FCOMPILER=$MPIDIR/bin/mpif90
fi

############################################################
# run cmake

# all arguments for cmake as array
# note: it is crucial to escape quotes in here, otherwise we cannot pass them on correctly to the IDE scripts
CMAKE_FULL_ARGS=(--no-warn-unused-cli \
  -G \"$GENERATOR\" \
  -D CMAKE_BUILD_TYPE:STRING=\"$BUILD_TYPE\" \
  -D CMAKE_CXX_COMPILER:FILEPATH=\"$CXXCOMPILER\" \
  -D CMAKE_C_COMPILER:FILEPATH=\"$CCOMPILER\" \
  -D CMAKE_Fortran_COMPILER:FILEPATH=\"$FCOMPILER\" \
  -D CMAKE_CXX_FLAGS:STRING=\"$CXXFLAGS\" \
  -D CMAKE_CXX_FLAGS_RELEASE:STRING=\"$CXXFLAGSRELEASE\" \
  -D CMAKE_CXX_FLAGS_DEBUG:STRING=\"$CXXFLAGSDEBUG\" \
  -D CMAKE_C_FLAGS:STRING=\"$CFLAGS\" \
  -D CMAKE_C_FLAGS_RELEASE:STRING=\"$CXXFLAGSRELEASE\" \
  -D CMAKE_EXE_LINKER_FLAGS:STRING=\"$LINKERFLAGS\" \
  -D CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=\"$LINKERFLAGSRELEASE\" \
  -D CMAKE_Fortran_FLAGS:STRING=\"$FFLAGS\" \
  -D CMAKE_Fortran_FLAGS_RELEASE:STRING=\"$FFLAGSRELEASE\" \
  -D CMAKE_VERBOSE_MAKEFILE:BOOL=OFF \
  -D CMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON \
  -D BUILD_SHARED_LIBS:BOOL=\"$SHARED_LIBS\" \
  -D CMAKE_LIBRARY_OUTPUT_DIRECTORY:FILEPATH=\"./src\" \
  -D TRILINOS_DEVELOP:BOOL=$TRILINOS_EXPERIMENTAL \
  -D TRAP_FE:BOOL=ON \
  -D COLOROUTPUT:BOOL=OFF \
  -D INCLUDE_INSTALL_DIR:PATH=\"$INCLUDE_INSTALL_DIR\" \
  -D LIB_INSTALL_DIR:PATH=\"$LIB_INSTALL_DIR\" \
  -D Trilinos_PREFIX:PATH=\"$Trilinos_PREFIX\" \
  -D SEARCH_CLN_LIBRARY_DIR:PATH=\"$CLN_LIBRARYDIR\" \
  -D SEARCH_CLN_INCLUDE_DIR:PATH=\"$CLN_INCLUDEDIR\" \
  -D USE_NO_SYSTEM_PATHS:BOOL=\"$BOOST_EXCLUDE_SYSTEM_PATHS\" \
  -D BOOST_LIBRARYDIR:PATH=\"$BOOST_LIBRARYDIR\" \
  -D BOOST_INCLUDEDIR:PATH=\"$BOOST_INCLUDEDIR\" \
  -D Boost_NO_BOOST_CMAKE:BOOL=\"$USE_USERSPECIFIED_BOOST\" \
  -D QHULL_LIBRARY_DIR:PATH=\"$QHULL_LIBRARYDIR\" \
  -D QHULL_INCLUDE_DIR:PATH=\"$QHULL_INCLUDEDIR\" \
  -D BACI_WITH_ARBORX:BOOL=\"$BACI_WITH_ARBORX\" \
  -D MPI_DIR:PATH=\"$MPIDIR\" \
  -D MPI_RUN:FILEPATH=\"$MPIRUN\" \
  -D MPIEXEC_EXTRA_OPTS_FOR_TESTING:STRING=\"$MPIEXEC_EXTRA_OPTS_FOR_TESTING\" \
  -D CUBIT_DIR:PATH=\"$CUBIT_PATH\" \
  -D PVPYTHON:FILEPATH=\"$PARAVIEWPYTHON_PATH\" \
  -D BLA_VENDOR:STRING=\"$BLA_VENDORSTRING\" \
  -D BLAS_LIBRARIES:FILEPATH=\"$BLAS_LIBS\" \
  -D LAPACK_LIBRARIES:FILEPATH=\"$LAPACK_LIBS\" \
  -D ACMLDIR:STRING=\"$ACMLDIR_PATH\" \
  -D CMAKE_C_COMPILER_LAUNCHER=\"$CCACHE_COMMAND\" \
  -D CMAKE_CXX_COMPILER_LAUNCHER=\"$CCACHE_COMMAND\" \
  -D AMDLIBMDIR:FILEPATH=\"$AMDLIBMDIR_PATH\" \
  -D IGNORE_UNSTABLE_CUTTEST:BOOL=$IGNORE_UNSTABLE_CUTTEST \
  -D BACI_WITH_GOOGLETEST:BOOL=\"$BACI_WITH_GOOGLETEST\" \
  -D DOXYGEN_BASE_PATH:PATH=\"$DOXYGEN_BASE_PATH\" \
  -D DOXYGEN_USE_MATHJAX:BOOL=\"$DOXYGEN_USE_MATHJAX\" \
  -D DOXYGEN_USE_LOCAL_MATHJAX:BOOL=\"$DOXYGEN_USE_LOCAL_MATHJAX\" \
  -D DOXYGEN_LOCAL_MATHJAX_BASEPATH:BOOL=\"$DOXYGEN_LOCAL_MATHJAX_BASEPATH\"
  \"${BACI_HOME}\")

# expand all arguments into one long string, quotes are retained because they are escaped
CMAKE_FULL_ARGS_STRING="${CMAKE_FULL_ARGS[*]}"

# actually run CMake
# note: because the quotes are escaped, we create the full command line as a string and let bash interpret it
CMAKE_FULL_COMMAND="$CMAKE_COMMAND ${CMAKE_FULL_ARGS_STRING}"
bash -c "$CMAKE_FULL_COMMAND"

cd "$BACI_HOME"

# Create python virtual environment for baci developement
./create-baci-python-venv

# adapt CLion settings
if [[ $ADAPT_IDE_CLION == 1 ]]; then
  if [ -f .idea/workspace.xml ]; then
    ./utilities/ides/adapt_clion_idea.py "$CMAKE_FULL_ARGS_STRING" "$BUILD_TYPE" ".idea/workspace.xml"
  else
    echo "The option --ide=clion is set but no .idea/workspace.xml file could be found!"
  fi
fi

# adapt Eclipse settings
if [[ $ADAPT_IDE_ECLIPSE == 1 ]]; then
  if [ -f .cproject ]; then
    ./utilities/ides/adapt_eclipse_cproject.py "`basename $0`" "$BUILD_FOLDER" "$BUILD_TYPE";
  else
    echo "The option --ide=eclipse is set but no .cproject file could be found!"
  fi
fi

# adapt VSCode settings
if [[ $ADAPT_IDE_VSCODE == 1 ]]; then
  if [ -d .vscode ]; then
    ./utilities/ides/adapt_vscode.py "${BACI_HOME}" "$BUILD_FOLDER" "$CMAKE_FULL_ARGS_STRING"
  else
    echo "The option --ide=vscode is set but no .vscode directory could be found!"
  fi
fi
