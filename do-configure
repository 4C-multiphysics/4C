#!/bin/sh

# ln -s /usr/lib/blitz/include/blitz/gnu /usr/include/blitz

BACI_HOME=`dirname $0`
EXTRA_ARGS=$@

#default options
BUILD_TYPE="RELEASE"
TRILINOS_BUILD_TYPE="release"
COVERAGE=0
USE_ACML=0
USE_DEAL=0
USE_FORCEBUILD=0
TRILINOS_EXPERIMENTAL=0  # use experimental Trilinos version
ADDITIONAL_TESTS_PATH=""
FOUND_NO_SUPERLU=ON
SHARED_LIBS=OFF

# activate debug version: ./do-configure --debug
# or choose do-configure-debug which does the same

# Info about profiling mode: ./do-configure --profiling
# This does not profile the code on its own but merely adds debug info
# to the executable (the code performance is the same as for the release
# version, though). This can then give per-line cost information
# using 'valgrind --tool=callgrind ./baci-relwithdebinfo input output'

OPTIONS=`getopt -o hc:daef -l help,config:,additionaltests:,debug,trilinos-debug,profiling,coverage,useDEAL,useACML,experimental,forceBuild,build-contact-module -- "$@"`

[ $? -ne 0 ] && exit 1

eval set -- $OPTIONS

while true; do
  case "$1" in
    -h|--help)
      echo "usage: do-configure [--debug] [--trilinos-debug] [--profiling] [--coverage] [--experimental] [--useDEAL] [--useACML] [--build-contact-module] [--config=configurationfile] [--additionaltests=testfile]"
      exit 1
      ;;
    -c|--config)
      CONFIGURATION_FILE="$2" ;
      shift
      ;;
    --additionaltests)
      ADDITIONAL_TESTS_PATH="$2" ;
      shift
      ;;
    -d|--debug)
      BUILD_TYPE="DEBUG"
      ;;
    --profiling)
      BUILD_TYPE="RELWITHDEBINFO"
      ;;
    --coverage)
      COVERAGE=1
      ;;
    --trilinos-debug)
      TRILINOS_BUILD_TYPE="dbg"
      ;;
    -e|--experimental)
      TRILINOS_EXPERIMENTAL=1
      ;;
    --useDEAL)
      USE_DEAL=1
      ;;
    -a|--useACML)
      USE_ACML=1
      ;;
    -f|--forceBuild)
      USE_FORCEBUILD=1
      ;;
    --) shift ;
      break
      ;;
    *) echo "unknown option: $1" ; exit 1 ;;
  esac
  shift
done

if [ $# -ne 0 ]; then
  echo "unknown option(s): $@"
  echo "usage: do-configure [--debug] [--trilinos-debug] [--experimental] [--profiling] [--coverage] [--useACML] [--config=configurationfile] [--additionaltests=testfile]"
  exit 1
fi

##############################################################
# check for out-of-source build

BUILD_FOLDER=`pwd -P`
BUILD_FOLDER_SAFE=$BUILD_FOLDER
BACI_HOME=`cd $BACI_HOME; pwd -P`

if [[ $USE_FORCEBUILD == 0 ]]; then
	# check whether BUILD_FOLDER is "out-of-source"
	while true; do
		if [[ "x$BUILD_FOLDER" == "x$BACI_HOME" ]]; then

		    PROPOSED_BUILDDIR="`dirname $(echo $BACI_HOME | sed -e 's/\/$//')`/build-${BUILD_TYPE,,}"

		    echo "********************************************************************************************"
			echo "No in-source build of BACI allowed..."
			echo "Please choose a path for building BACI outside of $BACI_HOME"
			echo "For example: $PROPOSED_BUILDDIR"
			echo ""
			echo "HOWTO:"
			echo "  mkdir -p \"$PROPOSED_BUILDDIR\""
			echo "  cd \"$PROPOSED_BUILDDIR\""
			echo "  $BACI_HOME/do-configure [--debug] [--experimental] [--useACML] [...]"
			echo "  make -j 6 baci"
		    echo "********************************************************************************************"

	    	exit 2
	    fi

	    BUILD_FOLDER="`dirname $(echo $BUILD_FOLDER | sed -e 's/\/$//')`"

	    if [[ "x$BUILD_FOLDER" == "x/" ]]; then
	    	break;   # no in-source build -> all is fine
	    fi
	done
fi

# set valid folder for baci build
BUILD_FOLDER=$BUILD_FOLDER_SAFE


##############################################################
# detect operating system
if [[ ! "$CONFIGURATION_FILE" ]]; then
  if [[ -f /etc/system-release ]]; then
    if [ "`grep 'Fedora release 22' /etc/system-release`" ]; then
      echo "Detected Fedora 22"
      CONFIGURATION_FILE=$BACI_HOME/buildconfig/fc22_Q12015.config
      TRILINOSDEV=ON
      echo $CONFIGURATION_FILE
    elif [ "`grep 'CentOS Linux release 7.2' /etc/system-release`" ]; then
      echo "Detected CentOS 7.2 (bruteforce Haswell cluster)"
      CONFIGURATION_FILE=$BACI_HOME/buildconfig/bruteforce_Q12015_icc.config
      echo $CONFIGURATION_FILE
    elif [ "`grep 'CentOS Linux release 7.1' /etc/system-release`" ]; then
      echo "Detected CentOS 7.1 (deep thought Haswell cluster)"
      CONFIGURATION_FILE=$BACI_HOME/buildconfig/haswell_cluster_Q12015_gcc48.config
      echo $CONFIGURATION_FILE
    elif [ "`grep 'CentOS release 6.2' /etc/system-release`" ]; then
      echo "Detected CentOS 6.2 (kaiser)"
      CONFIGURATION_FILE=$BACI_HOME/buildconfig/kaiser_Q12015_gcc48_ACML_ompi162.config
    fi
  elif [[ -f /etc/SuSE-release ]]; then
    if [ "`grep 'SUSE Linux Enterprise Server' /etc/SuSE-release`" ]; then
      echo "Detected SuSE Linux Enterprise Server (SuperMUC)"
      CONFIGURATION_FILE=$BACI_HOME/buildconfig/supermuc_thin.config
    fi
  else
    echo "unknown or unsupported OS version! This is fatal!"
    exit
  fi
else
  echo "Configuration file:" $CONFIGURATION_FILE
fi

# remove CMakeCache.txt
rm -f CMakeCache.txt

# read in configuration
if [[ -f $CONFIGURATION_FILE ]]; then
  . $CONFIGURATION_FILE
else
  echo "no configuration file found! This is fatal!"
  exit
fi

if [ $COVERAGE == 1 ]; then
  CXXFLAGSRELEASE="$CXXFLAGSRELEASE -O0 -g -fprofile-arcs -ftest-coverage"
  LINKERFLAGSRELEASE="$LINKERFLAGSRELEASE -g -fprofile-arcs -ftest-coverage"
fi

if [[ "$CXX" ]]; then
  echo "Overriding C++ compiler with $CXX"
  CXXCOMPILER=$CXX
  CCOMPILER=$CC
  FCOMPILER=$F90
else
  echo "No C++ compiler given, using default at $MPIDIR/bin/mpic++"
  CXXCOMPILER=$MPIDIR/bin/mpic++
  CCOMPILER=$MPIDIR/bin/mpicc
  FCOMPILER=$MPIDIR/bin/mpif90
fi

Trilinos_DIR="$Trilinos_PREFIX/lib/cmake/Trilinos"
echo $Trilinos_DIR
############################################################
# prepare source for modules

############################################################
# run cmake

$CMAKE_COMMAND \
    --no-warn-unused-cli \
    -D CMAKE_BUILD_TYPE:STRING=$BUILD_TYPE \
    -D CMAKE_CXX_COMPILER:FILEPATH="$CXXCOMPILER" \
    -D CMAKE_C_COMPILER:FILEPATH="$CCOMPILER" \
    -D CMAKE_Fortran_COMPILER:FILEPATH="$FCOMPILER" \
    -D CMAKE_CXX_FLAGS:STRING="$CXXFLAGS" \
    -D CMAKE_CXX_FLAGS_RELEASE:STRING="$CXXFLAGSRELEASE" \
    -D CMAKE_C_FLAGS:STRING="$CFLAGS" \
    -D CMAKE_C_FLAGS_RELEASE:STRING="$CXXFLAGSRELEASE" \
    -D CMAKE_EXE_LINKER_FLAGS:STRING="$LINKERFLAGS" \
    -D CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING="$LINKERFLAGSRELEASE" \
    -D CMAKE_Fortran_FLAGS:STRING="$FFLAGS" \
    -D CMAKE_Fortran_FLAGS_RELEASE:STRING="$FFLAGSRELEASE" \
    -D CMAKE_VERBOSE_MAKEFILE:BOOL=OFF \
    -D BUILD_SHARED_LIBS:BOOL=$SHARED_LIBS \
    -D CMAKE_LIBRARY_OUTPUT_DIRECTORY:FILEPATH="./src" \
    -D HAVENOT_SUPERLU:BOOL=$FOUND_NO_SUPERLU \
    -D HAVENOT_UMFPACK:BOOL=$FOUND_NO_UMFPACK \
    -D HAVE_DEAL_II:BOOL=$BUILD_Deal \
    -D HAVE_TEKO:BOOL=$BUILD_Teko \
    -D HAVE_MueLu:BOOL=$BUILD_MueLu \
    -D HAVE_Trilinos_Q1_2013:BOOL=$BUILD_HAVE_Trilinos_Q1_2013 \
    -D HAVE_Trilinos_Q3_2013:BOOL=$BUILD_HAVE_Trilinos_Q3_2013 \
    -D HAVE_Trilinos_Q1_2014:BOOL=$BUILD_HAVE_Trilinos_Q1_2014 \
    -D HAVE_Stratimikos:BOOL=$BUILD_Stratimikos \
    -D HAVE_OpenMP:BOOL=OFF \
    -D HAVE_Kokkos:BOOL=$BUILD_MueLu \
    -D TRILINOS_DEV:BOOL=$TRILINOSDEV \
    -D DEAL_II_DIR=$DEAL_II_DIR \
    -D D_ARTNET:BOOL=ON \
    -D TRAP_FE:BOOL=ON \
    -D PARMETIS:BOOL=ON \
    -D COLOROUTPUT:BOOL=OFF \
    -D D_ALE:BOOL=ON \
    -D D_FLUID3:BOOL=ON \
    -D D_SHELL8:BOOL=ON \
    -D D_THERMO:BOOL=ON \
    -D INCLUDE_INSTALL_DIR:FILEPATH=$INCLUDE_INSTALL_DIR \
    -D LIB_INSTALL_DIR:FILEPATH=$LIB_INSTALL_DIR \
    -D Trilinos_DIR:FILEPATH=$Trilinos_DIR \
    -D USE_NO_SYSTEM_PATHS=$BOOST_EXCLUDE_SYSTEM_PATHS \
    -D BOOST_INCLUDEDIR:FILEPATH=$BOOST_INCLUDEDIR \
    -D BOOST_LIBRARYDIR:FILEPATH=$BOOST_LIBRARYDIR \
    -D Boost_NO_BOOST_CMAKE:BOOL=$USE_USERSPECIFIED_BOOST \
    -D QHULL_LIBRARY_DIR:FILEPATH=$LIB_INSTALL_DIR \
    -D QHULL_INCLUDE_DIR:FILEPATH=$INCLUDE_INSTALL_DIR \
    -D MPI_DIR:FILEPATH=$MPIDIR \
    -D CUBIT_DIR:FILEPATH=$CUBIT_PATH \
    -D BLA_VENDOR:STRING=$BLA_VENDORSTRING \
    -D BLAS_LIBRARIES:FILEPATH=$BLAS_LIBS \
    -D LAPACK_LIBRARIES:FILEPATH=$LAPACK_LIBS \
    -D ACMLDIR:STRING=$ACMLDIR_PATH \
    -D AMDLIBMDIR:FILEPATH=$AMDLIBMDIR_PATH \
    -D ADDITIONAL_TESTS:FILEPATH="$ADDITIONAL_TESTS_PATH" \
    $EXTRA_ARGS \
    ${BACI_HOME}


cd "$BACI_HOME"

if [ -f .cproject ]; then ./adapt_cproject.py "`basename $0`" "$BUILD_FOLDER" "$BUILD_TYPE"; fi
