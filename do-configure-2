#!/bin/sh

# ln -s /usr/lib/blitz/include/blitz/gnu /usr/include/blitz

BACI_HOME=`dirname $0`
EXTRA_ARGS=$@

#default options
BUILD_TYPE="RELEASE"
TRILINOS_BUILD_TYPE="release"
USE_ACML=0
TRILINOS_EXPERIMENTAL=0  # use experimental Trilinos version
ADDITIONAL_TESTS_PATH=""


# activate debug version: ./do-configure --debug 
# or choose do-configure-debug which does the same

OPTIONS=`getopt -o hc:dae -l help,config:,additionaltests:,debug,useACML,experimental -- "$@"`

[ $? -ne 0 ] && exit 1

eval set -- $OPTIONS

while true; do
  case "$1" in
    -h|--help) 
      echo "usage: do-configure-2 [--debug] [--experimental] [--useACML] [--config=configurationfile] [--additionaltests=testfile]"
      exit 1
      ;;
    -c|--config) 
      CONFIGURATION_FILE="$2" ; 
      shift
      ;;
    -t|--additionaltests)
      ADDITIONAL_TESTS_PATH="$2" ;
      shift
      ;;
    -d|--debug) 
      BUILD_TYPE="DEBUG"
      TRILINOS_BUILD_TYPE="dbg"
      ;;
    -e|--experimental)
      TRILINOS_EXPERIMENTAL=1
      ;;
    -a|--useACML)
      USE_ACML=1
      ;;
    --) shift ;
      break
      ;;
    *) echo "unknown option: $1" ; exit 1 ;;
  esac
  shift
done

if [ $# -ne 0 ]; then
  echo "unknown option(s): $@"
  echo "usage: do-configure [--debug] [--experimental] [--useACML] [--config=configurationfile] [--additionaltests=testfile]"
  exit 1
fi

##############################################################
# detect operating system
if [[ ! "$CONFIGURATION_FILE" ]]; then
  if [[ -f /etc/system-release ]]; then
    if [ "`grep 'Fedora release 17' /etc/system-release`" ]; then
      echo "Detected Fedora 17"
      echo "Fedora 17 is not an officially supported system at LNM."
      CONFIGURATION_FILE=$BACI_HOME/buildconfig/fc17_sysTem.config
      echo $CONFIGURATION_FILE
    elif [ "`grep 'Fedora release 16' /etc/system-release`" ]; then
      echo "Detected Fedora 16"
      if [ $TRILINOS_EXPERIMENTAL == 1 ]; then
	CONFIGURATION_FILE=$BACI_HOME/buildconfig/fc16_Q32012.config
	TRILINOSDEV=ON
      else
	CONFIGURATION_FILE=$BACI_HOME/buildconfig/fc16_Q12012.config
      fi
      echo $CONFIGURATION_FILE
    elif [ "`grep 'Fedora release 12' /etc/system-release`" ]; then
      echo "Detected Fedora 12"
      if [ $TRILINOS_EXPERIMENTAL == 1 ]; then
	echo "no experimental Trilinos version available for FC 12!"
      fi
      CONFIGURATION_FILE=$BACI_HOME/buildconfig/fc12_Q12012.config
      echo $CONFIGURATION_FILE
    elif [ "`grep 'CentOS release 6.2' /etc/system-release`" ]; then
      echo "Detected CentOS 6.2 (kaiser)"
      if [ $TRILINOS_EXPERIMENTAL == 0 ]; then
	    #CONFIGURATION_FILE=$BACI_HOME/buildconfig/kaiser_Q12012_ACML.config
	    CONFIGURATION_FILE=$BACI_HOME/buildconfig/kaiser_Q12012_ACML_ompi162.config
      else 
        #CONFIGURATION_FILE=$BACI_HOME/buildconfig/kaiser_Q32012_ACML.config
        CONFIGURATION_FILE=$BACI_HOME/buildconfig/kaiser_Q32012_ACML_ompi162.config
      fi
    fi
  elif [[ -f /etc/SuSE-release ]]; then
    if [ "`grep 'SUSE Linux Enterprise Server' /etc/SuSE-release`" ]; then
      echo "Detected SuSE Linux Enterprise Server (SuperMUC)"
      CONFIGURATION_FILE=$BACI_HOME/buildconfig/supermuc_thin.config
    fi
  else
    echo "unknown OS version! This is fatal!"
    exit  
  fi
else
  echo "Configuration file:" $CONFIGURATION_FILE
fi

# remove CMakeCache.txt
rm -f CMakeCache.txt

# read in configuration
if [[ -f $CONFIGURATION_FILE ]]; then
  . $CONFIGURATION_FILE
else
  echo "no configuration file found! This is fatal!"
  exit
fi

Trilinos_DIR="$Trilinos_PREFIX/lib/cmake/Trilinos"
echo $Trilinos_DIR
############################################################

$CMAKE_COMMAND \
    --no-warn-unused-cli \
    -D CMAKE_BUILD_TYPE:STRING=$BUILD_TYPE \
    -D CMAKE_CXX_COMPILER:FILEPATH="$MPIDIR/bin/mpic++" \
    -D CMAKE_C_COMPILER:FILEPATH="$MPIDIR/bin/mpicc" \
    -D CMAKE_Fortran_COMPILER:FILEPATH="$MPIDIR/bin/mpif90" \
    -D CMAKE_CXX_FLAGS:STRING="$CXXFLAGS" \
    -D CMAKE_CXX_FLAGS_RELEASE:STRING="$CXXFLAGSRELEASE" \
    -D CMAKE_C_FLAGS:STRING="$CXXFLAGS" \
    -D CMAKE_C_FLAGS_RELEASE:STRING="$CXXFLAGSRELEASE" \
    -D CMAKE_EXE_LINKER_FLAGS:STRING="$LINKERFLAGS" \
    -D CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING="$LINKERFLAGSRELEASE" \
    -D CMAKE_Fortran_FLAGS:STRING="-Wall" \
    -D CMAKE_Fortran_FLAGS_RELEASE:STRING="-O5 -funroll-all-loops -malign-double" \
    -D CMAKE_VERBOSE_MAKEFILE:BOOL=OFF \
    -D HAVENOT_SUPERLU:BOOL=OFF \
    -D HAVE_TEKO:BOOL=$BUILD_Teko \
    -D HAVE_MueLu:BOOL=$BUILD_MueLu \
    -D HAVE_Trilinos_Q1_2013:BOOL=$BUILD_HAVE_Trilinos_Q1_2013 \
    -D HAVE_Stratimikos:BOOL=ON \
    -D TRILINOS_DEV:BOOL=$TRILINOSDEV \
    -D D_ARTNET:BOOL=ON \
    -D D_RED_AIRWAYS:BOOL=ON \
    -D TRAP_FE:BOOL=OFF \
    -D PARMETIS:BOOL=ON \
    -D COLOROUTPUT:BOOL=OFF \
    -D D_ALE:BOOL=ON \
    -D D_FLUID3:BOOL=ON \
    -D D_SHELL8:BOOL=ON \
    -D D_THERMO:BOOL=ON \
    -D INCLUDE_INSTALL_DIR:FILEPATH=$INCLUDE_INSTALL_DIR \
    -D LIB_INSTALL_DIR:FILEPATH=$LIB_INSTALL_DIR \
    -D Trilinos_DIR:FILEPATH=$Trilinos_DIR \
    -D BOOST_INCLUDEDIR:FILEPATH=$BOOST_INCLUDEDIR \
    -D BOOST_LIBRARYDIR:FILEPATH=$BOOST_LIBRARYDIR \
    -D Boost_NO_BOOST_CMAKE:BOOL=$USE_USERSPECIFIED_BOOST \
    -D QHULL_LIBRARY_DIR:FILEPATH=$LIB_INSTALL_DIR \
    -D QHULL_INCLUDE_DIR:FILEPATH=$INCLUDE_INSTALL_DIR \
    -D MPI_DIR:FILEPATH=$MPIDIR \
    -D CUBIT_DIR:FILEPATH=$CUBIT_PATH \
    -D BLA_VENDOR:STRING=$BLA_VENDORSTRING \
    -D BLAS_LIBRARIES:FILEPATH=$BLAS_LIBS \
    -D LAPACK_LIBRARIES:FILEPATH=$LAPACK_LIBS \
    -D ACMLDIR:STRING=$ACMLDIR_PATH \
    -D AMDLIBMDIR:FILEPATH=$AMDLIBMDIR_PATH \
    -D ADDITIONAL_TESTS:FILEPATH="$ADDITIONAL_TESTS_PATH" \
    $EXTRA_ARGS \
    ${BACI_HOME}

BUILD_FOLDER=`pwd`
cd $BACI_HOME

if [ -f .cproject ]; then ./adapt_cproject.py `basename $0` $BUILD_FOLDER $BUILD_TYPE; fi
