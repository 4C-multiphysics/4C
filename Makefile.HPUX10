#
#--------------------------------------------------------------------
#    Makefile CARAT (parallel and sequentiel)
#--------------------------------------------------------------------
#
# ! pfad der unterverzeichnisse in den debugger aufnehmen !
#
#
#
# Ausschalten der Ausgabe von Kommandos durch Make
.SILENT:
#
#--------------------------------------------------------------------
#
# enter path to your source directory here
#--------------------------------------------------------------------
include ./Makefile.personal_path
#
#
#--------------------------------------------------------------------
# list of possible defines:
#--------------------------------------------------------------------
#
# list of possible defines:
#  
#  
# -DD_ALE        defines element ale (2D+3D)
# -DD_AXISHELL   defines axishell element
# -DD_BEAM3      defines element beam3
# -DD_BRICK1     defines element brick1
# -DD_FLUID2     defines element fluid2
# -DD_FLUID2_PRO defines element fluid2 with projection method
# -DD_FLUID3     defines element fluid3
# -DD_SHELL8     defines element shell8
# -DD_SHELL9     defines element shell9
# -DD_WALL1      defines element wall1
#
# -DGEMM         defines Generalized Energy-Momentum Int. Scheme
# -DD_FLUID      defines general fluid problem
# -DD_FSI        defines general FSI problem
# -DD_MAT        defines materials
# -DD_OPTIM      defines optimization
# -DRESULTTEST   defines defines result testing before checking in a new version
# -DS8CONTACT    defines contact algorithms for shell8 contact
# -DWALLCONTACT  defines contact algorithms for wall contact
#
# -DDEBUG        defines debug mode: routine and array tracing 
# -DPARALLEL     defines parallel version of programm
# -DSIXTYFOUR    defines 64bit compilation and linkage
# -DSUSE73       defines for compilation and linkage with gcc and g77 on Suselinux
# -DSUN          defines for compilation and linkage on CUSS Sunfire machine
# -DAZUSA        defines for compilation on azusa.hww.de
# -DHPUX10       defines for compilation on HPUX10
# -DHPUX11       defines for compilation on HPUX11
# -DHPUXITA      defines compilation for Itanium2 running HPUX11i
# 
# -DMLIB_PACKAGE       defines interface to solver library MLIB (HPUX11, sequentiell)
# -DHYPRE_PACKAGE      defines interface to solver library HYPRE (not yet impl.)
# -DAZTEC_PACKAGE      defines interface to solver library AZTEC
# -DPARSUPERLU_PACKAGE defines interface to solver library ParSuperLU
# -DSUPERLU_PACKAGE    defines interface to solver library SuperLU 
# -DMUMPS_PACKAGE      defines interface to solver library Mumps (only in parallel HPUX11)
# -DUMFPACK            defines interface to solver library Umfpack
# -DSPOOLES_PACKAGE    defines interface to solver library Spooles (only in parallel HPUX11)
#
# -DVISUAL2_PACKAGE    defines visualisation tool VISUAL2 (only in seriell)
#                      (add -lVisual2 -lX11 to INCLUDES!!!)
#--------------------------------------------------------------------
# switch between sequentiell and parallel compilation by uncommenting 
# the approbiate compilers:
#--------------------------------------------------------------------
#
# sequentiell part
#--------------------------------------------------------------------
PROGRAM_NAME  = cca_seq_10.20.
FXX   = f77
CCX   = cc
LDX   = cc
PFL  = -DHPUX10 -DD_FSI -DD_FLUID -DD_OPTIM -DS8CONTACT -DD_CONTACT  \
       -DD_FLUID2 -DD_FLUID3 -DD_WALL1 -DD_BRICK1 -DD_BEAM3 -DD_SHELL8 -DD_SHELL9 -DD_ALE \
       -DD_AXISHELL -DD_MAT -DAZTEC_PACKAGE -DUMFPACK
AZTEC = -laztec_seriell21
UMFPACK = -lumfpack40_hpux10_32
SPOOLES = 
##--------------------------------------------------------------------
#
# parallel part
#--------------------------------------------------------------------
#PROGRAM_NAME  = cca_par_10.20.
#FXX   = /opt/mpi/bin/mpif77
#CCX   = /opt/mpi/bin/mpicc
#LDX   = /opt/mpi/bin/mpicc
#PFL   = -DPARALLEL -DHPUX10 -DD_FLUID -DD_FSI -DD_OPTIM -DS8CONTACT -DD_CONTACT  \
#        -DD_FLUID2 -DD_FLUID3 -DD_WALL1 -DD_BEAM3 -DD_SHELL9 -DD_BRICK1 -DD_SHELL8 -DD_ALE \
#        -DD_AXISHELL -DD_MAT -DAZTEC_PACKAGE -DUMFPACK -DSPOOLES_PACKAGE 
#AZTEC   = -laztec_par21
#UMFPACK = -lumfpack40_hpux10_32
#SPOOLES = -lspoolesMPI_10.20  -lspooles_10.20
#--------------------------------------------------------------------
#
CC	 = $(CCX)
LD       = $(CCX)
RM	 = /bin/rm -f

#--------------------------------------------------------------------
# switch between fast and debug compilation by uncommenting 
# the approbiate flags:
#------------------------------------------------ this is debug-32bit
PROGRAMM      =  $(PROGRAM_NAME)debg
CFLAGS        = -D__HP__ +w1 +e -Aa -Ae  -g ${PFL} -DDEBUG
FFLAGS        = -g -I/opt/mpi/include/
#------------------------------------------------- this is fast-32bit
#PROGRAMM      =  $(PROGRAM_NAME)fast
#CFLAGS        = -D__HP__  +w1 +e -Aa -Ae -O +Onolimit  ${PFL}
#FFLAGS        = +O2 +Onolimit -I/opt/mpi/include/
#--------------------------------------------------------------------
LDFLAGS	 = -L/usr/lib -L/opt/fortran/lib -lcl -lc -lM -lm 
INCLUDES = -I/opt/mpi/include/ \
           -I/bau/stat33/users/statik/lib/hypre-1.6.0/src/hypre/include/ \
           -I/bau/stat33/users/statik/lib/SULUDIST0210/SuperLU_DIST/SRC \
           -I/bau/stat33/users/statik/lib/METIS/ \
           -L/bau/stat33/users/statik/lib/METIS/ -lmetis \
           -L/bau/stat33/users/statik/lib/AZTEC21_MPI/ \
           -L/bau/stat33/users/statik/lib/AZTEC21/ $(AZTEC) \
           -L/bau/stat33/users/statik/lib \
           -L/bau/stat33/users/statik/lib/hypre-1.6.0/src/hypre/lib \
           -L/bau/stat33/users/statik/lib/SULUDIST0210/SuperLU_DIST \
           -L/bau/stat33/users/statik/lib/SCALAPACK \
           -L/bau/stat33/users/statik/lib/BLACS/LIB \
           -L/bau/stat33/users/statik/lib/MUMPS4.1.6/lib \
           -L/bau/stat33/users/statik/lib/UMFPACK/lib \
           -L/bau/stat16/users/statik/lib/spooles \
           -llapack_hppa \
           -lHYPRE_DistributedMatrix \
           -lHYPRE_DistributedMatrixPilutSolver \
           -lHYPRE_Euclid \
           -lHYPRE_FEI \
           -lHYPRE_IJ_mv \
           -lHYPRE_LSI \
           -lHYPRE_MatrixMatrix \
           -lHYPRE_ParaSails \
           -lHYPRE_blas \
           -lHYPRE_parcsr_ls \
           -lHYPRE_parcsr_mv \
           -lHYPRE_seq_mv \
           -lHYPRE_sstruct_ls \
           -lHYPRE_sstruct_mv \
           -lHYPRE_struct_ls \
           -lHYPRE_struct_mv \
           -lHYPRE_utilities \
           -lkrylov \
           -lsuperlu_hppa \
           -lblacs_MPI-HPPA-0 \
           -lblacsCinit_MPI-HPPA-0 \
           -lblacsF77init_MPI-HPPA-0 \
           -lscalapack_HPPA \
           -lmumps \
           -lblas \
           -lumfpack40_hpux10_32 \
           $(SPOOLES) \
           -lPEX5 -lVisual2 -lX11
# sparsekit is not used at the moment
#           -lskit 
# libHYPRE_superlu.a convlicts with libsuperlu_hppa.a
#           -lHYPRE_superlu

LDOPTS        = -a archive -v


LIBS          =                 
#
#----------------------- binaries -----------------------------------
include ./Makefile.objects
#--------------------------------------------------------------------
# targets
#
PROGRAM       = $(PROGRAMM)
#
# dependencies
#
$(PROGRAM):     $(OBJS1) $(OBJS2) $(OBJS3) $(OBJS4) $(OBJS5) $(OBJS6) $(OBJS7) $(OBJS8) \
                $(OBJS9) $(OBJS10) $(OBJS11) $(OBJS12) $(OBJS13) $(OBJS14) $(OBJS15) \
                $(OBJS16) $(OBJS17) $(OBJS18) $(OBJS19) $(OBJS20) $(OBJS_OPT) $(OBJS_AXISHELL) $(OBJS_MAT) $(OBJS_F2PRO)
		@echo "Linking $(PROGRAM) ..."
		@$(LD) $(LDFLAGS) $(OBJS1) $(OBJS2) $(OBJS3) $(OBJS4) $(OBJS5) $(OBJS6) \
                $(OBJS7) $(OBJS8) $(OBJS9) $(OBJS10) $(OBJS11) $(OBJS12) $(OBJS13) $(OBJS14) \
                $(OBJS15) $(OBJS16) $(OBJS17) $(OBJS18) $(OBJS19) $(OBJS20) $(OBJS_OPT) $(OBJS_AXISHELL) $(OBJS_MAT) $(OBJS_F2PRO) \
		$(LIBS) $(INCLUDES) -o $(PROGRAM)
		@echo "done"

#
$(OBJS1):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS2):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS3):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS4):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS5):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS6):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS7):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS8):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS9):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS10):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS11):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS12):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS14):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS15):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS16):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS17):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS18):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS19):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS20):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS_OPT):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS_AXISHELL):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS_MAT):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS_F2PRO):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
# fortran
$(OBJS13):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(FXX) $(FFLAGS)  -c  ${<F}
		@echo "MainMake is back."
##
.c.o:
	@ echo "$@ wird kompiliert...."
	$(CC) $(CFLAGS) $(INCLUDES) -c  $<

.f.o:
	@ echo "$@ wird kompiliert...."
	$(FXX) $(FFLAGS) -c  $<
clean:
	rm -rf  $(OBJS1) $(OBJS2) $(OBJS3) $(OBJS4) $(OBJS5) $(OBJS6) \
                $(OBJS7) $(OBJS8) $(OBJS9) $(OBJS10) $(OBJS11) $(OBJS12) \
                $(OBJS13) $(OBJS14) $(OBJS15) $(OBJS16) $(OBJS17) $(OBJS18) \
		$(OBJS19) $(OBJS20) $(OBJS_OPT) $(OBJS_AXISHELL) $(OBJS_MAT) \
		$(OBJS_F2PRO)
$
