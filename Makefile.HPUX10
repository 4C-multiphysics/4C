#
#--------------------------------------------------------------------
#    Makefile CARAT (parallel and sequentiel)
#--------------------------------------------------------------------
#
# ! pfad der unterverzeichnisse in den debugger aufnehmen !
#
#
#
# Ausschalten der Ausgabe von Kommandos durch Make
.SILENT:
#
#--------------------------------------------------------------------
#
# enter path to your source directory here
#--------------------------------------------------------------------
include ./Makefile.personal_path
#
#
#--------------------------------------------------------------------
# list of possible defines:
#--------------------------------------------------------------------
#  
# -DD_BRICK1    defines element brick1
# -DD_FLUID1    defines element fluid1
# -DD_SHELL8    defines element shell8
# -DD_FLUID3    defines element fluid3
# -DD_ALE       defines element ale
# -DD_WALL1     defines element wall1
#
# -DDEBUG     defines debug mode: routine and array tracing 
# -DPARALLEL  defines parallel version of programm
# -DSIXTYFOUR defines 64bit compilation and linkage
# -DSUSE73    defines for compilation and linkage with gcc and g77 on Suselinux
# 
# -DMLIB_PACKAGE       defines interface to solver library MLIB (HPUX11, sequentiell)
# -DHYPRE_PACKAGE      defines interface to solver library HYPRE
# -DAZTEC_PACKAGE      defines interface to solver library AZTEC
# -DPARSUPERLU_PACKAGE defines interface to solver library ParSuperLU
# -DSUPERLU_PACKAGE    defines interface to solver library SuperLU (not impl. yet)
# -DMUMPS_PACKAGE      defines interface to solver library Mumps (only in parallel HPUX11)
#
#--------------------------------------------------------------------
# switch between sequentiell and parallel compilation by uncommenting 
# the approbiate compilers:
#--------------------------------------------------------------------
#
# sequentiell part
#--------------------------------------------------------------------
PROGRAM_NAME  = cca_seq_10.20.exe
FXX   = f77
CCX   = cc
LDX   = cc
PFL   = -DD_SHELL8 -DD_FLUID3 -DD_ALE -DD_BRICK1 -DD_WALL1 -DAZTEC_PACKAGE
AZTEC = -laztec_seriell21
#--------------------------------------------------------------------
#
# parallel part
#--------------------------------------------------------------------
#PROGRAM_NAME  = cca_par_10.20.exe
#FXX   = /opt/mpi/bin/mpif77
#CCX   = /opt/mpi/bin/mpicc
#LDX   = /opt/mpi/bin/mpicc
#PFL   = -DPARALLEL -DD_SHELL8 -DD_FLUID3 -DD_ALE -DD_BRICK1 -DD_WALL1 \
#        -DPARSUPERLU_PACKAGE -DHYPRE_PACKAGE -DAZTEC_PACKAGE 
#AZTEC = -laztec_par21
#
#--------------------------------------------------------------------
#
CC	 = $(CCX)
LD       = $(CCX)
RM	 = /bin/rm -f

#--------------------------------------------------------------------
# switch between fast and debug compilation by uncommenting 
# the approbiate flags:
#------------------------------------------------ this is debug-32bit
CFLAGS        = -D__HP__ +w1 +e -Aa -Ae -v -g ${PFL} -DDEBUG
FFLAGS        = -g -I/opt/mpi/include/
#------------------------------------------------- this is fast-32bit
#CFLAGS       = -D__HP__  +e -Ae +w1 -v -OAa +Onolimit ${PFL}
#FFLAGS        = +O2 +Onolimit -I/opt/mpi/include/
#--------------------------------------------------------------------
LDFLAGS	 = -L/usr/lib -L/opt/fortran/lib -lcl -lc -lM -lm 
INCLUDES = -I/opt/mpi/include/ \
           -I/bau/stat33/users/statik/lib/hypre-1.6.0/src/hypre/include/ \
           -I/bau/stat33/users/statik/lib/SULUDIST0210/SuperLU_DIST/SRC \
           -I/bau/stat33/users/statik/lib/METIS/ \
           -L/bau/stat33/users/statik/lib/METIS/ -lmetis \
           -L/bau/stat33/users/statik/lib/AZTEC21_MPI/ \
           -L/bau/stat33/users/statik/lib/AZTEC21/ $(AZTEC) \
           -L/bau/stat33/users/statik/lib \
           -L/bau/stat33/users/statik/lib/hypre-1.6.0/src/hypre/lib \
           -L/bau/stat33/users/statik/lib/SULUDIST0210/SuperLU_DIST \
           -L/bau/stat33/users/statik/lib/SCALAPACK \
           -L/bau/stat33/users/statik/lib/BLACS/LIB \
           -L/bau/stat33/users/statik/lib/MUMPS4.1.6/lib \
           -llapack_hppa \
           -lHYPRE_DistributedMatrix \
           -lHYPRE_DistributedMatrixPilutSolver \
           -lHYPRE_Euclid \
           -lHYPRE_FEI \
           -lHYPRE_IJ_mv \
           -lHYPRE_LSI \
           -lHYPRE_MatrixMatrix \
           -lHYPRE_ParaSails \
           -lHYPRE_blas \
           -lHYPRE_parcsr_ls \
           -lHYPRE_parcsr_mv \
           -lHYPRE_seq_mv \
           -lHYPRE_sstruct_ls \
           -lHYPRE_sstruct_mv \
           -lHYPRE_struct_ls \
           -lHYPRE_struct_mv \
           -lHYPRE_utilities \
           -lkrylov \
           -lsuperlu_hppa \
           -lblacs_MPI-HPPA-0 \
           -lblacsCinit_MPI-HPPA-0 \
           -lblacsF77init_MPI-HPPA-0 \
           -lscalapack_HPPA \
           -lmumps \
           -lblas

# sparsekit is not used at the moment
#           -lskit 
# libHYPRE_superlu.a convlicts with libsuperlu_hppa.a
#           -lHYPRE_superlu

LDOPTS        = -a archive -v


LIBS	      =  /usr/lib/end.o
#
# binaries
#                main
OBJS1         = ${SRC}/main/main_ccarat.o 
#                global_full
OBJS2	      = ${SRC}/global_full/global_control.o \
                ${SRC}/global_full/global_inp_control.o \
                ${SRC}/global_full/global_cal_control.o \
                ${SRC}/global_full/global_init_control.o \
                ${SRC}/global_full/global_ass_dof.o \
                ${SRC}/global_full/cal_dyn_control.o \
                ${SRC}/global_full/cal_static_control.o \
                ${SRC}/global_full/cal_nlnstatic_control.o \
                ${SRC}/global_full/cal_nlndyn_struct.o \
                ${SRC}/global_full/cal_static_service.o \
                ${SRC}/global_full/dyn_timecurve.o \
                ${SRC}/global_full/dyn_service.o \
                ${SRC}/global_full/map_node_find.o \
                ${SRC}/global_full/global_mask_matrices.o \
                ${SRC}/global_full/global_mask_msr.o \
                ${SRC}/global_full/global_mask_mds.o \
                ${SRC}/global_full/global_dofconnect.o \
                ${SRC}/global_full/global_mask_parcsr.o \
                ${SRC}/global_full/global_mask_ucchb.o \
                ${SRC}/global_full/global_mask_dense.o \
                ${SRC}/global_full/global_mask_rcptr.o \
                ${SRC}/global_full/global_mask_skyline.o \
                ${SRC}/global_full/global_calelm.o \
                ${SRC}/global_full/global_calelm_dyn.o \
                ${SRC}/global_full/global_calrhs.o \
                ${SRC}/global_full/solver_control.o \
                ${SRC}/global_full/solver_service.o \
                ${SRC}/global_full/solver_service2.o \
                ${SRC}/global_full/solver_add_data.o \
                ${SRC}/global_full/solver_add_msr.o \
                ${SRC}/global_full/solver_add_mlib.o \
                ${SRC}/global_full/solver_add_parcsr.o \
                ${SRC}/global_full/solver_add_ucchb.o \
                ${SRC}/global_full/solver_add_dense.o \
                ${SRC}/global_full/solver_add_rcptr.o \
                ${SRC}/global_full/solver_add_skyline.o \
                ${SRC}/global_full/solver_mlib.o \
                ${SRC}/global_full/solver_aztec.o \
                ${SRC}/global_full/solver_hypre.o \
                ${SRC}/global_full/solver_superlu.o \
                ${SRC}/global_full/solver_lapack.o \
                ${SRC}/global_full/solver_mumps.o \
                ${SRC}/global_full/solver_colsol.o \
                ${SRC}/global_full/restart_control.o \
                ${SRC}/global_full/machine_hpux.o 
#                pss_full
OBJS3	      = ${SRC}/pss_full/pss_am.o \
                ${SRC}/pss_full/pss_ds.o \
                ${SRC}/pss_full/pss_fr.o \
                ${SRC}/pss_full/pss_pss.o 
#                input_full
OBJS4	      = ${SRC}/input_full/input_control_global.o \
                ${SRC}/input_full/input_ctr_head.o \
                ${SRC}/input_full/input_sol.o \
                ${SRC}/input_full/input_design.o \
                ${SRC}/input_full/input_design_top.o \
                ${SRC}/input_full/input_mesh.o \
                ${SRC}/input_full/input_topology.o \
                ${SRC}/input_full/input_curves.o \
                ${SRC}/input_full/input_material.o \
                ${SRC}/input_full/inherit_insidedesign.o \
                ${SRC}/input_full/inherit_design_dis.o \
                ${SRC}/input_full/input_conditions.o
#                fluid3
OBJS5	      = ${SRC}/fluid3/f3_inpele.o 
#                shell8
OBJS6	      = ${SRC}/shell8/s8_main.o \
                ${SRC}/shell8/s8_inpele.o \
                ${SRC}/shell8/s8_intg.o \
                ${SRC}/shell8/s8_jaco.o \
                ${SRC}/shell8/s8_a3.o \
                ${SRC}/shell8/s8_loccoordnode.o \
                ${SRC}/shell8/s8_funcderiv.o \
                ${SRC}/shell8/s8_static_ke.o \
                ${SRC}/shell8/s8_static_keug.o \
                ${SRC}/shell8/s8_cal_dyn.o \
                ${SRC}/shell8/s8_stress.o \
                ${SRC}/shell8/s8_tfte.o \
                ${SRC}/shell8/s8_tforce.o \
                ${SRC}/shell8/s8_tvkg.o \
                ${SRC}/shell8/s8_load1.o \
                ${SRC}/shell8/s8_tmtr.o \
                ${SRC}/shell8/s8_mtr.o \
                ${SRC}/shell8/s8_tvmr.o \
                ${SRC}/shell8/s8_tvbo.o \
                ${SRC}/shell8/s8_tvhe_linear.o \
                ${SRC}/shell8/s8_tvhe.o \
                ${SRC}/shell8/s8_tvma.o \
                ${SRC}/shell8/s8_tmat.o \
                ${SRC}/shell8/s8_eps.o \
                ${SRC}/shell8/s8_intforce.o \
                ${SRC}/shell8/s8_mat_linel.o \
                ${SRC}/shell8/s8_btdb.o \
                ${SRC}/shell8/s8_eas.o \
                ${SRC}/shell8/s8_ans.o \
                ${SRC}/shell8/s8_vthv.o \
                ${SRC}/shell8/s8_xint.o \
                ${SRC}/shell8/s8_init.o 
#                ale
OBJS7	      = ${SRC}/ale/ale_inpele.o 
#                parallel
OBJS8	      = ${SRC}/parallel/par_initmetis.o \
                ${SRC}/parallel/par_make_comm.o \
                ${SRC}/parallel/par_assignmesh.o
#                brick1
OBJS9	      = ${SRC}/brick1/b1_inpele.o \
                ${SRC}/brick1/b1_intg.o \
                ${SRC}/brick1/b1_static_ke.o \
                ${SRC}/brick1/b1_funcderiv.o \
                ${SRC}/brick1/b1_bop.o \
                ${SRC}/brick1/b1_jaco.o \
                ${SRC}/brick1/b1_mat_linel.o \
                ${SRC}/brick1/b1_call_stiff.o \
                ${SRC}/brick1/b1_main.o
#                math
OBJS10	      = ${SRC}/math/sort_find.o \
                ${SRC}/math/math1.o
#                output
OBJS11	      = ${SRC}/output/out_global.o \
                ${SRC}/output/out_gid_msh.o \
                ${SRC}/output/out_gid_sol.o
#                wall1
OBJS12	      = ${SRC}/wall1/w1_bop.o \
                ${SRC}/wall1/w1_cal_deriv.o \
                ${SRC}/wall1/w1_cal_eps.o \
                ${SRC}/wall1/w1_cal_stress.o \
                ${SRC}/wall1/w1_call_mat.o \
                ${SRC}/wall1/w1_call_stiff.o \
                ${SRC}/wall1/w1_funcderiv.o \
                ${SRC}/wall1/w1_init.o \
                ${SRC}/wall1/w1_inpele.o \
                ${SRC}/wall1/w1_intg.o \
                ${SRC}/wall1/w1_jaco.o \
                ${SRC}/wall1/w1_main.o \
                ${SRC}/wall1/w1_mat_linel.o \
                ${SRC}/wall1/w1_mat_plast_dp.o \
                ${SRC}/wall1/w1_mat_plast_epc.o \
                ${SRC}/wall1/w1_mat_plast_epc_serv.o \
                ${SRC}/wall1/w1_mat_plast_mises.o \
                ${SRC}/wall1/w1_mat_plast_serv.o \
                ${SRC}/wall1/w1_mat_serv.o \
                ${SRC}/wall1/w1_static_ke.o
#                fortran
OBJS13	      = ${SRC}/fortran/colsol.o
#
#
# targets
#
PROGRAM       = $(PROGRAM_NAME)
#
# dependencies
#
$(PROGRAM):     $(OBJS1) $(OBJS2) $(OBJS3) $(OBJS4) $(OBJS5) $(OBJS6) $(OBJS7) $(OBJS8) \
                $(OBJS9) $(OBJS10) $(OBJS11) $(OBJS12) $(OBJS13)
		@echo "Linking $(PROGRAM) ..."
		@$(LD) $(LDFLAGS) $(OBJS1) $(OBJS2) $(OBJS3) $(OBJS4) $(OBJS5) $(OBJS6) \
                $(OBJS7) $(OBJS8) $(OBJS9) $(OBJS10) $(OBJS11) $(OBJS12) $(OBJS13) $(LIBS) $(INCLUDES) -o $(PROGRAM)
		@echo "done"

#
$(OBJS1):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS2):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS3):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS4):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS5):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS6):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS7):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS8):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS9):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS10):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS11):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS12):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
# fortran
$(OBJS13):     
		@echo "Making $@ ..."
		cd ${@D}; $(FXX) $(FFLAGS)  -c  $<
		@echo "MainMake is back."
##
.c.o:
	@ echo "$@ wird kompiliert...."
	$(CC) $(CFLAGS) $(INCLUDES) -c  $<

.f.o:
	@ echo "$@ wird kompiliert...."
	$(FXX) $(FFLAGS) -c  $<
clean:
	rm -rf  $(OBJS1) $(OBJS2) $(OBJS3) $(OBJS4) $(OBJS5) $(OBJS6) \
                $(OBJS7) $(OBJS8) $(OBJS9) $(OBJS10) $(OBJS11) $(OBJS12) $(OBJS13) 
$
