/*----------------------------------------------------------------------*/
/*!
\file elast_isoexpopow.H
\brief

This file contains the routines required to calculate the isochoric contribution
of an exponential material

<pre>
Maintainer: Sophie Rausch
            rausch@lnm.mw.tum.de
            089/289 15255
</pre>

*----------------------------------------------------------------------*/
#ifndef ELAST_ISOEXPOPOW_H_
#define ELAST_ISOEXPOPOW_H_

// Linalg matrices used instead; included in elast_summand
//#include <Epetra_SerialDenseVector.h>
//#include <Epetra_SerialDenseMatrix.h>
// included in elast_summand
//#include "../drt_inpar/inpar_material.H"
#include "elast_summand.H"
#include "../drt_mat/matpar_parameter.H"

namespace MAT
{
namespace ELASTIC
{

  namespace PAR
  {

    /*----------------------------------------------------------------------*/
    /// material parameters for isochoric contribution of a exponential type material
    ///
    /// <h3>Input line</h3>
    /// MAT 1 ELAST_IsoExpo K1 1. K2 1.
    class IsoExpoPow : public MAT::PAR::Parameter
    {
    public:

      /// standard constructor
      IsoExpoPow(
        Teuchos::RCP<MAT::PAR::Material> matdata
        );

      /// destructor
      virtual ~IsoExpoPow() { ; }

      /// @name material parameters
      //@{

      /// Shear modulus
      double k1_;
      double k2_;
      /// exponent
      int d_;

      //@}

      /// create material instance of matching type with my parameters
      virtual Teuchos::RCP<MAT::Material> CreateMaterial();

      /// @name Write methods
      //@{
      void SetK1(const double k1) { k1_ = k1; }
      void SetK2(const double k2) { k2_ = k2; }
      //@}

    };  // class IsoExpoPow

  }  // namespace PAR

  /*----------------------------------------------------------------------*/
  /// Isochoric exponential material
  ///
  ///
  /// Strain energy function is given by
  ///\f[
  ///   \Psi = \frac{k_1}{2k_2} (e^{k_2 (\overline{I}_{\boldsymbol{C}}-3)^d}-1).
  ///\f]
  ///
  ///
  /// \author rausch
  /// \date 08/09
  class IsoExpoPow : public Summand
  {

  public:

    /// empty constructor
    IsoExpoPow();

    /// constructor with given material parameters
    IsoExpoPow(MAT::ELASTIC::PAR::IsoExpoPow* params);

    /// @name Access material constants
    //@{

    /// material type
    virtual INPAR::MAT::MaterialType MaterialType() const { return INPAR::MAT::mes_isoexpopow; }

    //@}

    /// Add modified coeffiencts.
    virtual void AddCoefficientsModified(
        LINALG::Matrix<3,1>& gamma,  ///< necessary coefficients for first derivative
        LINALG::Matrix<5,1>& delta,  ///< necessary coefficients for second derivative
        const LINALG::Matrix<3,1>& modinv  ///< modified invariants of right Cauchy-Green tensor
    );


    /// @name Access methods
    //@{
    double K1() const { return params_->k1_; }
    double K2() const { return params_->k2_; }

    //@}

    /// Indicator for formulation
    virtual void SpecifyFormulation(
        bool& isoprinc, ///< global indicator for isotropic principal formulation
        bool& isomod, ///< global indicator for isotropic splitted formulation
        bool& anisoprinc, ///< global indicator for anisotropic principal formulation
        bool& anisomod ///< global indicator for anisotropic splitted formulation
        )
    {
      isomod = true;
      return;
    };

  private:

    /// my material parameters
    MAT::ELASTIC::PAR::IsoExpoPow* params_;

  };

}  // namespace ELAST
}  // namespace MAT

#endif
