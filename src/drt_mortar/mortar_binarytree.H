/*!----------------------------------------------------------------------
\file mortar_binarytree.H

<pre>
-------------------------------------------------------------------------
                        BACI Contact library
            Copyright (2008) Technical University of Munich

Under terms of contract T004.008.000 there is a non-exclusive license for use
of this work by or on behalf of Rolls-Royce Ltd & Co KG, Germany.

This library is proprietary software. It must not be published, distributed,
copied or altered in any form or any media without written permission
of the copyright holder. It may be used under terms and conditions of the
above mentioned license by or on behalf of Rolls-Royce Ltd & Co KG, Germany.

This library contains and makes use of software copyrighted by Sandia Corporation
and distributed under LGPL licence. Licensing does not apply to this or any
other third party software used here.

Questions? Contact Dr. Michael W. Gee (gee@lnm.mw.tum.de)
                   or
                   Prof. Dr. Wolfgang A. Wall (wall@lnm.mw.tum.de)

http://www.lnm.mw.tum.de

-------------------------------------------------------------------------
</pre>

<pre>
Maintainer: Alexander Popp
            popp@lnm.mw.tum.de
            http://www.lnm.mw.tum.de
            089 - 289-15264
</pre>

*----------------------------------------------------------------------*/
#ifdef CCADISCRET
#ifndef MORTAR_BINARYTREE_H
#define MORTAR_BINARYTREE_H

#include "Teuchos_RCP.hpp"
#include "Epetra_Comm.h"
#include "Epetra_Map.h"
#include "Epetra_SerialDenseMatrix.h"

using namespace std;
using namespace Teuchos;

// forward declarations
namespace DRT
{
  class Discretization;
}

/*!
\brief MORTAR: namespace of the BACI mortar coupling algorithms

*/
namespace MORTAR
{

// forward declarations

//! @name Enums and Friends
enum BinaryTreeNodeType
{
  SLAVE_INNER,        ///< indicates a slave inner node (has children)
  SLAVE_LEAF,         ///< indicates a slave leaf node (no further children)
  MASTER_INNER,       ///< indicates a master inner node (has children)
  MASTER_LEAF,        ///< indicates a master leaf node (no further children)
  NOSLAVE_ELEMENTS,   ///< indicates that there are no slave elements on this (root) treenode
  NOMASTER_ELEMENTS,  ///< indicates that there are no master elements on this (root) treenode
  UNDEFINED           ///< indicates an undefined tree node
};

//@}
  
/*!
\brief A class representing one tree node of the binary search tree

Refer also to the Semesterarbeit of Thomas Eberl, 2009

\author popp (popp@lnm.mw.tum.de)
*/
class BinaryTreeNode
{
public:
  
  /*!
  \brief constructor of a tree node

  \param type        type of BinaryTreeNode
  \param discret     interface discretization
  \param parent      points to parent tree node
  \param elelist     list of all elements in BinaryTreeNode
  \param dopnormals  reference to DOP normals
  \param kdop        refernece to no. of vertices
  \param dim         dimension of problem
  \param layer       current layer of treenode
  \param ...map      references to maps

  */
  BinaryTreeNode(BinaryTreeNodeType type, DRT::Discretization& discret,
                 RCP<BinaryTreeNode> parent, vector<int> elelist,
                 const Epetra_SerialDenseMatrix& dopnormals, const int& kdop,
                 const int& dim, const int layer,
                 vector<vector<RCP<BinaryTreeNode> > > & streenodesmap,
                 vector<vector<RCP<BinaryTreeNode> > > & mtreenodesmap,
                 vector<vector<RCP<BinaryTreeNode> > > & sleafsmap,
                 vector<vector<RCP<BinaryTreeNode> > > & mleafsmap);

  /*!
  \brief Destructor

  */
  virtual ~BinaryTreeNode() {};

  //! @name Evaluation methods

  /*!
  \brief Calculate slabs of dop in initialization

  */
  void CalculateSlabsDop(bool isinit);

  /*!
  \brief Update slabs of current treenode in bottom up way

  */
  void UpdateSlabsBottomUp(double & eps);

  /*!
  \brief Initialize Tree

  */
  void InitializeTree(double& eps);

  /*!
  \brief Enlarge geometry of a Treenode by an offset, dependent on size

  */
  void EnlargeGeometry(double& eps);

  /*!
  \brief Divide a TreeNode into two child nodes

  */
  void DivideTreeNode();

  /*!
  \brief Print type of TreeNode to std::cout

  */
  void PrintType();

  /*!
  \brief Print slabs to std::cout

  */
  void PrintSlabs();

  /*!
  \brief Set slabs of current treenode

  */
  void SetSlabs(Epetra_SerialDenseMatrix& newslabs);

  //@}

  //! @name Access and modification methods

  /*!
  \brief Get communicator

  */
  virtual const Epetra_Comm& Comm() const;

  /*!
  \brief Get discretization of the interface

  */
  virtual DRT::Discretization& Discret() const { return idiscret_; }

  /*!
  \brief Return type of treenode

  */
  virtual BinaryTreeNodeType Type() const { return type_; }
  
  /*!
  \brief Set type of treenode

  */
  virtual void SetType(MORTAR::BinaryTreeNodeType type) { type_ = type; }

  /*!
  \brief Return pointer to right child

  */
  virtual RCP<BinaryTreeNode> Rightchild() const { return rightchild_; }

  /*!
  \brief Return pointer to left child

  */
  virtual RCP<BinaryTreeNode> Leftchild() const { return leftchild_; }

  /*!
  \brief Return pointer to parent

  */
  virtual RCP<BinaryTreeNode> Parent() const { return parent_; }

  /*!
  \brief Set children of a treenode

  */
  void SetChildren(RCP<BinaryTreeNode> leftchild,RCP<BinaryTreeNode> rightchild);
  
  /*!
  \brief Set parent of treenode

  */
  virtual void SetParent(RCP<BinaryTreeNode> parent) { parent_=parent; }
    
  /*!
  \brief Return slabs of DOP

  */
  virtual Epetra_SerialDenseMatrix& Slabs() { return slabs_; }

  /*!
  \brief Return number of k-DOP vertices

  */
  virtual int Kdop() const { return kdop_; }
      
  /*!
  \brief Return layer of current TreeNode

  */
  virtual int Layer() const { return layer_; }
  
  /*!
  \brief Set layer of current TreeNode
  
  */
  virtual void SetLayer(int layer) { layer_ = layer; }

  /*!
  \brief Return reference to element list of TreeNode

  */
  virtual vector<int>& Elelist() { return elelist_; }
  
  /*!
  \brief Return dim of Problem

  */
  virtual const int& Dim() { return dim_; }
  
  /*!
  \brief Return different maps of tree nodes

  */
  virtual vector<vector<RCP<BinaryTreeNode> > >& Streenodesmap() { return streenodesmap_; }
  virtual vector<vector<RCP<BinaryTreeNode> > >& Mtreenodesmap() { return mtreenodesmap_; }
  virtual vector<vector<RCP<BinaryTreeNode> > >& Sleafsmap() { return sleafsmap_; }
  virtual vector<vector<RCP<BinaryTreeNode> > >& Mleafsmap() { return mleafsmap_; }

  //@}

  //! @name Visualization methods (GMSH)

  /*!
  \brief Print slabs of DOP to file for GMSH output
  \param filename     filename to which treenodes are plotted

  */
  void PrintDopsForGmsh(std::string filename);

  /*!
  \brief Plot a point in GMSH to given file

  */
  void PlotGmshPoint(std::string filename, double* position0, int nr);

  /*!
  \brief Plot a quadrangle in GMSH to given file

  */
  void PlotGmshQuadrangle(std::string filename, double* position0, double* position1,
                                                double* position2, double* position3);

  /*!
  \brief Plot a triangle in GMSH to given file

  */
  void PlotGmshTriangle(std::string filename, double* position0, double* position1,
                                                                 double* position2);

  //@}
    
private:

  // don't want = operator and cctor
  BinaryTreeNode operator = (const BinaryTreeNode& old);
  BinaryTreeNode(const BinaryTreeNode& old);

  //! type of BinaryTreeNode
  MORTAR::BinaryTreeNodeType type_;

  //! interface discretization
  DRT::Discretization& idiscret_;

  //! pointer to the parent BinaryTreeNode
  RCP<BinaryTreeNode> parent_;

  //! pointer to the left child TreeNode
  RCP<BinaryTreeNode> leftchild_;

  //! pointer to the right child TreeNode
  RCP<BinaryTreeNode> rightchild_;

  //! geometry slabs of TreeNode, saved as Min|Max
  Epetra_SerialDenseMatrix slabs_;

  //! list with all elements of BinaryTreeNode
  vector<int> elelist_;

  //! reference to DOP normals
  const Epetra_SerialDenseMatrix& dopnormals_;

  //! reference to no. of vertices
  const int& kdop_;

  //! reference to dim. of problem
  const int& dim_;

  //! layer of TreeNode in Tree (0=rootnode!)
  int layer_;

  //! reference to map of all slave treenodes, sorted by layer
  vector<vector<RCP<BinaryTreeNode> > > & streenodesmap_; 

  //! reference to map of all master treenodes, sorted by layer
  vector<vector<RCP<BinaryTreeNode> > > &  mtreenodesmap_;

  //! reference to map of all slave leaf treenodes
  vector<vector<RCP<BinaryTreeNode> > > & sleafsmap_; 

  //! reference to map of all master leaf treenodes
  vector<vector<RCP<BinaryTreeNode> > > &  mleafsmap_;
  
}; // class BinaryTreeNode


/*!
\brief A class for performing search in 2D/3D based on binary trees

Refer also to the Semesterarbeit of Thomas Eberl, 2009

\author popp (popp@lnm.mw.tum.de)
*/
class BinaryTree
{
public:
  
  /*!
  \brief Standard constructor

  Constructs an instance of this class.<br>

  \param discret (in): 		The interface discretization
  \param selements (in): 	All slave elements (column map)
  \param melements (in): 	All master elements (fully overlapping map)
  \param dim (in): 				The problem dimension

  */
  BinaryTree(DRT::Discretization& discret,
             RCP<Epetra_Map> selements,
             RCP<Epetra_Map> melements,
             int dim,
             double eps);

  /*!
  \brief Destructor

  */
  virtual ~BinaryTree() {};

  //! @name Query methods

  /*!
  \brief Print full tree

	*/
	void PrintTree(RCP<BinaryTreeNode> treenode);
	
	/*!
	\brief Print full tree out of map of treenodes
	
	*/
	void PrintTreeOfMap(vector<vector<RCP<BinaryTreeNode> > > & treenodesmap);

  //@}
	
  //! @name Access methods

  /*!
  \brief Get communicator

  */
  virtual const Epetra_Comm& Comm() const;

  /*!
  \brief Get discretization of the interface

  */
  virtual DRT::Discretization& Discret() const { return idiscret_; }

  /*!
  \brief Get matrix of DOP normals

  */
  virtual const Epetra_SerialDenseMatrix& DopNormals() { return dopnormals_; }

  /*!
  \brief Get number of vertices of DOP

  */
  virtual const int& Kdop() { return kdop_; }

  /*!
  \brief Return dim of Problem

  */
  virtual const int& Dim() { return dim_; }

  /*!
  \brief Return reference to slave treenodesmap

  */
  virtual vector<vector<RCP<BinaryTreeNode> > >& Streenodesmap() { return streenodesmap_; }

  /*!
  \brief Return reference to master treenodesmap

  */
  virtual vector<vector<RCP<BinaryTreeNode> > >& Mtreenodesmap() { return mtreenodesmap_; }

  /*!
  \brief Return reference to coupling treenodesmap

  */
  virtual vector<vector<RCP<BinaryTreeNode> > >& CouplingMap() { return couplingmap_; }

  /*!
  \brief Return pointer to sroot-treenode

  */
  virtual RCP<BinaryTreeNode>& Sroot() { return sroot_; }

  /*!
  \brief Return pointer to mroot-treenode

  */
  virtual RCP<BinaryTreeNode>& Mroot() { return mroot_; }

  /*!
  \brief Return minimal element length

  */
  virtual double& MinLengthEle() { return minlengthele_; }

  /*!
  \brief Return factor "eps" to enlarge dops

  */
  virtual double& Eps() { return eps_; }

  /*!
  \brief Return factor "enlarge" to enlarge dops

  */
  virtual double& Enlarge() { return enlarge_; }

  //@}

  //! @name Evaluation methods
    
  /*!
  \brief Calculate minimal element length / inflation factor "enlarge"

  */
  void SetEnlarge(bool isinit);

  /*!
  \brief Update master and slave tree in a topdown way

  */
  void UpdateTreeTopDown(){EvaluateUpdateTreeTopDown(sroot_);
                           EvaluateUpdateTreeTopDown(mroot_);
                           return;}

  /*!
  \brief Evaluate update of master and slave tree in a topdown way

  */
  void EvaluateUpdateTreeTopDown(RCP<BinaryTreeNode> treenode);

  /*!
  \brief Updates master and slave tree in a bottom up way

  */
  void UpdateTreeBottomUp(){EvaluateUpdateTreeBottomUp(streenodesmap_);
                            EvaluateUpdateTreeBottomUp(mtreenodesmap_);
                            return;}

  /*!
  \brief Evaluate update of master and slave tree in a bottom up way

  */
  void EvaluateUpdateTreeBottomUp(vector<vector<RCP<BinaryTreeNode> > >& treenodesmap);

  /*!
  \brief Evaluate Binary search tree for separate update and search

  */
  void SearchSeparate(){EvaluateSearchSeparate(sroot_, mroot_);
                        return;}

  /*!
  \brief Evaluate Binary search tree for separate update and search

  */
  void EvaluateSearchSeparate(RCP<BinaryTreeNode> streenode,
                              RCP<BinaryTreeNode> mtreenode);

  /*!
  \brief Evaluate Binary search tree for combined search and update

  */
  void SearchCombined(){// if proc has no slave elements --> return;
                        if (sroot_->Type()==4) return;
                        sroot_->CalculateSlabsDop(false);
                        sroot_->EnlargeGeometry(enlarge_);
                        mroot_->CalculateSlabsDop(false);
                        mroot_->EnlargeGeometry(enlarge_);
                        EvaluateSearchCombined(sroot_, mroot_);
                        return;}

  /*!
  \brief Evaluate Binary search tree for combined search and update

  */
  void EvaluateSearchCombined(RCP<BinaryTreeNode> streenode,
                              RCP<BinaryTreeNode> mtreenode);

  //@}


protected:

  // don't want = operator and cctor
  BinaryTree operator = (const BinaryTree& old);
  BinaryTree(const BinaryTree& old);

  DRT::Discretization&     						   idiscret_;       // mortar interface discretization
  RCP<Epetra_Map>           					   selements_;      // all slave elements on surface (column map)
  RCP<Epetra_Map>           					   melements_;      // all master elements on surface (full map)
  vector<vector<RCP<BinaryTreeNode> > >  streenodesmap_;	// map of all slave treenodes, sorted by layers
  vector<vector<RCP<BinaryTreeNode> > >  mtreenodesmap_;	// map of all master treenodes, sorted by layers
  vector<vector<RCP<BinaryTreeNode> > >  couplingmap_;		// map of all treenodes, that possibly couple, st/mt
  vector<vector<RCP<BinaryTreeNode> > >  sleafsmap_;			// map of all slave leaf treenodes, [0]=leftchild,[1]=rightchild
  vector<vector<RCP<BinaryTreeNode> > >  mleafsmap_;			// map of all master leaf treenodes, [0]=leftchild,[1]=rightlchild
  RCP<BinaryTreeNode>       					   sroot_;          // slave root treenode
  RCP<BinaryTreeNode>       					   mroot_;          // master root treenode
  double															   minlengthele_;		// minimum of length of fe-elements
  const int                 					   dim_;            // problem dimension (2D or 3D)
  double 															   eps_;						// epsilon for enlarging dops (of user)
  double															   enlarge_;				// to enlarge dops
  Epetra_SerialDenseMatrix  					   dopnormals_;     // defining vertices of DOP
  int                       					   kdop_;           // sets k for DOP (8 for 2D, 18 for 3D)

}; // class BinaryTree
}  // namespace MORTAR

#endif  // #ifndef MORTAR_BINARYTREE_H
#endif  // #ifdef CCADISCRET
