/*!-----------------------------------------------------------------------
\file
\brief contains the routines 'if_ke' which calculates the usual
stiffness matrix for an interface element and 'if_fint' which calculates
the internal forces for an interface element

*-----------------------------------------------------------------------*/
#ifdef D_INTERF
#include "../headers/standardtypes.h"
#include "interf.h"
#include "interf_prototypes.h"

/*! 
\addtogroup INTERF
*//*! @{ (documentation module open)*/

/*!----------------------------------------------------------------------
\brief calculates usual stiffness matrix for small strains 

<pre>                                                              mn 05/03
This routine calculates usual stiffness matrix for small strains

</pre>
\param **s       DOUBLE    (o) blabla 

\warning There is nothing special to this routine
\return void                                               
\sa calling:  ---; 
    caled by: ifstatic_ke();

*----------------------------------------------------------------------*/
void if_ke(DOUBLE  **stiff, 
           DOUBLE  **bop, 
           DOUBLE   *B, 
           DOUBLE  **Q,
           DOUBLE    fac,
           DOUBLE    breite,
           DOUBLE  **deltaK)
{
INT            i,j,k,l,m;
DOUBLE         dum,du2;
DOUBLE         CB[2];
DOUBLE         Cxixi = 100;

/*----------------------------------------------------------------------*/
#ifdef DEBUG 
dstrc_enter("if_ke");
#endif
/*----------------------------------------------------------------------*/
   for (j=0; j<8; j++)
   {
     for (k=0; k<2; k++)
     {
      CB[k] = 0.0 ;                                                              
       for (l=0; l<2; l++)
       {
       CB[k] = CB[k] + Q[k][l]*bop[l][j]*fac ;
       }
     }
     for (i=0; i<8; i++)
     {
/*---------------------------------- dum = BT C B * fac of this GP ---*/
       dum = 0.0 ;                                                                
       for (m=0; m<2; m++)
       {
        dum = dum + bop[m][i]*CB[m] ;
       }
/*---------------------------------------- sum over gaussian points ---*/
        stiff[i][j] = stiff[i][j] + dum ;
     }
   }

/*----------------------------------------------------------------------*/
   for (j=0; j<8; j++)
   {
     for (i=0; i<8; i++)
     {
/*---------------------------------- du2 = BT C B * fac of this GP ---*/
       du2 = B[i]*B[j] * fac*breite*Cxixi ;                                                                
/*---------------------------------------- sum over gaussian points ---*/
       deltaK[i][j] = deltaK[i][j] + du2 ;
     }
   }

/*----------------------------------------------------------------------*/
#ifdef DEBUG 
dstrc_exit();
#endif
return;
} /* end of if_ke */

/*!----------------------------------------------------------------------
\brief calculates internal forces 

<pre>                                                              mn 05/03
This routine calculates the interfal forces

</pre>
\param **s       DOUBLE    (o) blabla 

\warning There is nothing special to this routine
\return void                                               
\sa calling:  ---; 
    caled by: ifstatic_ke();

*----------------------------------------------------------------------*/
void if_fint(DOUBLE  *T,
             DOUBLE   fac,
             DOUBLE **bop,
             DOUBLE  *fint)
{
/*----------------------------------------------------------------------*/
INT i;
/*----------------------------------------------------------------------*/
#ifdef DEBUG 
dstrc_enter("if_fint");
#endif
/*----------------------------- updated lagrange or geometric linear ---*/
  for (i=1; i<8; i++)
  {  
    fint[i] += bop[0][i]*T[0]*fac + bop[1][i]*T[1]*fac;
  }

/*----------------------------------------------------------------------*/
#ifdef DEBUG 
dstrc_exit();
#endif
return;
} /* end of if_fint */



/*----------------------------------------------------------------------*/
#endif /*D_INTERF*/
/*! @} (documentation module close)*/
