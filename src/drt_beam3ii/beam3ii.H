/*!----------------------------------------------------------------------
\file beam3ii.H

\brief 3D nonlinear Reissner beam element oy type II (according to "The
 interpolation of rotations and its application to finite element models
  of geometrically exact rods", Romero 2004)

<pre>
Maintainer: Christian Cyron
            cyron@lnm.mw.tum.de
            http://www.lnm.mw.tum.de
            089 - 289-15264
</pre>
*----------------------------------------------------------------------*/

// administrative line in order to make a difference between BACI and Ccarat files
#ifdef CCADISCRET

//header file only included if not yet included!
#ifndef BEAM3II_H
#define BEAM3II_H


#include "Teuchos_RefCountPtr.hpp"
#include "Epetra_SerialDenseMatrix.h"
#include "Epetra_SerialDenseVector.h"
#include "Epetra_Vector.h"
using namespace std;
using namespace Teuchos;
#include "../drt_lib/drt_element.H"
#include "../drt_lib/drt_elementtype.H"
#include "../drt_lib/drt_parobjectfactory.H"
#include "../drt_lib/drt_condition.H"
#include "../linalg/linalg_serialdensematrix.H"
#include "../linalg/linalg_serialdensevector.H"
#include "../drt_lib/drt_node.H"
#include "../drt_fem_general/drt_utils_integration.H"
#include "../drt_statmech/statmech_manager.H"
#include "../drt_statmech/statmech_time.H"
#include <Teuchos_StandardParameterEntryValidators.hpp>
#include "../linalg/linalg_fixedsizematrix.H"
#include "../drt_inpar/inpar_statmech.H"
#include "../drt_fem_general/largerotations.H"

//namespace with utility functions for operations with large rotations used
using namespace LARGEROTATIONS;

namespace DRT
{
  namespace ELEMENTS
  {
    class Beam3;
  }
}



//! \brief DRT: namespace of the ccarat discretization module
namespace DRT
{

namespace ELEMENTS
{

class Beam3iiType : public DRT::ElementType
{
public:

  std::string Name() const { return "Beam3iiType"; }

  static Beam3iiType & Instance() { return instance_; };

  virtual DRT::ParObject* Create( const vector<char> & data );

  virtual Teuchos::RCP<DRT::Element> Create( const string eletype,
                                             const string eledistype,
                                             const int id,
                                             const int owner );

  virtual Teuchos::RCP<DRT::Element> Create( const int id, const int owner );

  virtual int Initialize(DRT::Discretization& dis);

  virtual void NodalBlockInformation( DRT::Element * dwele, int & numdf, int & dimns, int & nv, int & np );

  virtual void ComputeNullSpace( DRT::Discretization & dis, std::vector<double> & ns, const double * x0, int numdf, int dimns );

  virtual void SetupElementDefinition( std::map<std::string,std::map<std::string,DRT::INPUT::LineDefinition> > & definitions );

private:

  static Beam3iiType instance_;
};

/*!
\brief 3D nonlinear Reissner beam element implemented according to the following sources:
Jelenic, Crisfield, 1999, "Geometrically exact 3D beam theory: implementations of a strain-invariant finite element for statics and dynamics",
Crisfield, Jelenic, 1998, "Objectivity of strain measures in the geometrically exact three dimensional beam theory and its finite element implementation",
Romero, 2004, "The interpolation of rotations and its application to finite element models of geometrically exact rods",
Crisfield, 2003, "Non-linear Finite Element Analysis of Solids and Structures", Volume 2

The element has been implemented with linear basis functions only so far.

author cyron (cyron @lnm.mw.tum.de)
*/
class Beam3ii : public DRT::Element
{
public:

  //! @name Friends
  friend class Beam3iiType;
  friend class StatMechManager;
  friend void StatMechManager::GetBindingSpotTriads(Epetra_MultiVector* nodaltriadscol);
  friend void StatMechManager::AddNewCrosslinkerElement(const int& crossgid, int* globalnodeids, const std::vector<double>& xrefe, const std::vector<double>& rotrefe, DRT::Discretization& mydiscret);
  friend void StatMechManager::PeriodicBoundaryBeam3iiInit(DRT::Element* element);
  friend void StatMechManager::GmshOutput(const Epetra_Vector& disrow, const std::ostringstream& filename, const int& step,RCP<CONTACT::Beam3cmanager> beamcmanager);
  friend void StatMechManager::GmshOutputPeriodicBoundary(const LINALG::SerialDenseMatrix& coord, const double& color, std::stringstream& gmshfilecontent, int eleid, bool ignoreeleid);
  friend void StatMechTime::Integrate();
  friend StatMechTime::StatMechTime(ParameterList& params,DRT::Discretization& dis,LINALG::Solver& solver,IO::DiscretizationWriter& output);
#ifdef D_BEAM3
#ifdef D_BEAM3II
  friend bool StatMechManager::CheckOrientation(const LINALG::Matrix<3,1> direction, const Epetra_MultiVector& nodaltriadscol, const LINALG::Matrix<2,1>& LID, RCP<double> phifil);
  friend void StatMechManager::OrientationCorrelation(const Epetra_Vector& disrow, const int &istep);
#endif
#endif

  //! @name Constructors and destructors and related methods

  /*!
  \brief Standard Constructor

  \param id    (in): A globally unique element id
  \param etype (in): Type of element
  \param owner (in): owner processor of the element
  */
  Beam3ii(int id, int owner);

  /*!
  \brief Copy Constructor

  Makes a deep copy of a Element
  */
  Beam3ii(const Beam3ii& old);

  /*!
  \brief Destructor
  */
  virtual ~Beam3ii();

  /*!
  \brief Deep copy this instance of Beam3ii and return pointer to the copy

  The Clone() method is used by the virtual base class Element in cases
  where the type of the derived class is unknown and a copy-ctor is needed
.
  */
  virtual DRT::Element* Clone() const;

   /*!
  \brief Get shape type of element
  */
  virtual DiscretizationType Shape() const;


  /*!
  \brief Return unique ParObject id

  Every class implementing ParObject needs a unique id defined at the
  top of drt_parobject.H
  */
  virtual int UniqueParObjectId() const { return Beam3iiType::Instance().UniqueParObjectId(); }

  /*!
  \brief Pack this class so it can be communicated

  \ref Pack and \ref Unpack are used to communicate this element

  */
  virtual void Pack(DRT::PackBuffer& data) const;

  /*!
  \brief Unpack data from a char vector into this class

  \ref Pack and \ref Unpack are used to communicate this element

  */
  virtual void Unpack(const vector<char>& data);

  virtual DRT::ElementType & ElementType() const
  { return Beam3iiType::Instance(); }

  //@}

  /*!
  \brief Return number of lines to this element
  */
  virtual int NumLine() const {return 1;}


  /*!
  \brief Get vector of RefCountPtrs to the lines of this element
  */
  virtual vector<RCP<DRT::Element> > Lines();


  /*!
  \brief Get number of degrees of freedom of a single node
  */
  virtual int NumDofPerNode(const DRT::Node& node) const
  {
    /*note: this is not necessarily the number of DOF assigned to this node by the discretization finally, but only
    *the number of DOF requested for this node by this element; the discretization will finally assign the maximal
    *number of DOF to this node requested by any element connected to this node*/
    return 6;
  }

  /*!
  \brief Get number of degrees of freedom per element not including nodal degrees of freedom
  */
  virtual int NumDofPerElement() const { return 0;}

  /*!
  \brief Print this element
  */
  virtual void Print(ostream& os) const;

  /*!
  \brief Get current nodal triads as quaternions
  */
  vector<LINALG::Matrix<4,1> > Quaternion() { return Qnew_;};

  /*!
  \brief Get moment of inertia of area Iyy_ of this element
  */
  const double& Iyy() const { return Iyy_;};

  /*!
  \brief Get moment of inertia of area Izz_ of this element
  */
  const double& Izz() const { return Izz_;}

  /*!
  \brief Get polar moment of inertia of area Irr_ of this element
  */
  const double& Irr() const { return Irr_;}


  //@}

  //! @name Construction


  /*!
  \brief Read input for this element

  This class implements a dummy of this method that prints a warning and
  returns false. A derived class would read one line from the input file and
  store all necessary information.

  */
  //virtual bool ReadElement();

  /*!
  \brief Read input for this element
  */
  bool ReadElement(const std::string& eletype,
                   const std::string& distype,
                   DRT::INPUT::LineDefinition* linedef);

  //@}


  //! @name Evaluation methods


  /*!
  \brief Evaluate an element

  An element derived from this class uses the Evaluate method to receive commands
  and parameters from some control routine in params and evaluates element matrices and
  vectors accoring to the command in params.

  \note This class implements a dummy of this method that prints a warning and
        returns false.

  \param params (in/out)    : ParameterList for communication between control routine
                              and elements
  \param discretization (in): A reference to the underlying discretization
  \param lm (in)            : location vector of this element
  \param elemat1 (out)      : matrix to be filled by element depending on commands
                              given in params
  \param elemat2 (out)      : matrix to be filled by element depending on commands
                              given in params
  \param elevec1 (out)      : vector to be filled by element depending on commands
                              given in params
  \param elevec2 (out)      : vector to be filled by element depending on commands
                              given in params
  \param elevec3 (out)      : vector to be filled by element depending on commands
                              given in params
  \return 0 if successful, negative otherwise
  */
  virtual int Evaluate(ParameterList&            params,
                       DRT::Discretization&      discretization,
                       vector<int>&              lm,
                       Epetra_SerialDenseMatrix& elemat1,
                       Epetra_SerialDenseMatrix& elemat2,
                       Epetra_SerialDenseVector& elevec1,
                       Epetra_SerialDenseVector& elevec2,
                       Epetra_SerialDenseVector& elevec3);

  /*!
  \brief Evaluate a Neumann boundary condition

  An element derived from this class uses the EvaluateNeumann method to receive commands
  and parameters from some control routine in params and evaluates a Neumann boundary condition
  given in condition

  \note This class implements a dummy of this method that prints a warning and
        returns false.

  \param params (in/out)    : ParameterList for communication between control routine
                              and elements
  \param discretization (in): A reference to the underlying discretization
  \param condition (in)     : The condition to be evaluated
  \param lm (in)            : location vector of this element
  \param elevec1 (out)      : Force vector to be filled by element

  \return 0 if successful, negative otherwise
  */
  virtual int EvaluateNeumann(ParameterList& params,
                              DRT::Discretization&      discretization,
                              DRT::Condition&           condition,
                              vector<int>&              lm,
                              Epetra_SerialDenseVector& elevec1,
                              Epetra_SerialDenseMatrix* elemat1 = NULL);


  /*!
  \brief Evaluate PTC addition to stiffness for free Brownian motion

  An element derived from this class uses the Evaluate method to receive commands
  and parameters from some control routine in params and evaluates a  statistical Neumann boundary condition
  as used in the problem type STATISTICAL MECHANICS

  \param params (in/out)       : ParameterList for communication between control routine and elements
  \param vector<double> mydisp : current nodal displacement
  \param elemat1 (out)         : artificial damping matrix to be filled by element

  \return 0 if successful, negative otherwise
  */
  template<int nnode>
  void EvaluatePTC(ParameterList& params,
                          Epetra_SerialDenseMatrix& elemat1);

  //@}


private:

  //! action parameters recognized by Beam3ii
  enum ActionType
  {
    calc_none,
    calc_struct_linstiff,
    calc_struct_nlnstiff,
    calc_struct_internalforce,
    calc_struct_linstiffmass,
    calc_struct_nlnstiffmass,
    calc_struct_nlnstifflmass,  //!< internal force, its stiffness and lumped mass matrix
    calc_struct_stress,
    calc_struct_eleload,
    calc_struct_fsiload,
    calc_struct_update_istep,
    calc_struct_update_imrlike,
    calc_struct_reset_istep, //!< reset elementwise internal variables during iteration to last converged state
    calc_struct_ptcstiff, //calculate artificial stiffness due to PTC solution strategy
    calc_struct_energy //calculate current elastic energy of element
  };

  //! kind of integration to be performed
  enum IntegrationType
  {
    gaussexactintegration,
    gaussunderintegration,
    lobattointegration
  };

  //! variable saving whether element has already been initialized (then isinit_ == true)
  bool isinit_;

  //! nodal triads in quaternion form at the end of the preceeding time step
  vector<LINALG::Matrix<4,1> > Qconv_;
  //! nodal triads in quaternion form at the end of the preceeding iteration step
  vector<LINALG::Matrix<4,1> > Qold_;
  //! nodal triads in quaternion during the current iteration step
  vector<LINALG::Matrix<4,1> > Qnew_;
  //! triads at Gauss points for exact integration in quaternion at the end of the preceeding time step (required for computation of angular velocity)
  vector<LINALG::Matrix<4,1> > Qconvmass_;
  //! current triads at Gauss points for exact integration in quaternion (required for computation of angular velocity)
  vector<LINALG::Matrix<4,1> > Qnewmass_;

  //!rotation angle displacement at nodes; relates to the end of the preceeding time step
  vector<LINALG::Matrix<3,1> > dispthetaconv_;
  //!rotation angle displacement at nodes; relates to the end of the preceeding iteration step
  vector<LINALG::Matrix<3,1> > dispthetaold_;
  //!rotation angle displacement at nodes; relates to current configuration
  vector<LINALG::Matrix<3,1> > dispthetanew_;

  //!initial curvature at Gauss points for elasticity (corresponding to \Lambda_0^t \Labmda'_0 in eq. (3.5), Crisfield 1999
  vector<LINALG::Matrix<3,1> > kapparef_;

  //!node I for determination of reference triad, eq. (3.9), (3.10), Jelenic 1999
  int nodeI_;

  //!node J for determination of reference triad, eq. (3.9), (3.10), Jelenic 1999
  int nodeJ_;


  //! cross section area
  double crosssec_;

   //! cross section area including shear corretion factor
  double crosssecshear_;

  //!moment of inertia of area around y-axis(orthognoal to beam axis in yz-plane)
  double Iyy_;

  //!moment of inertia of area around z-axis(forming cartesian system with beam- and y-axis)
  double Izz_;

  //!polar moment of inertia of area
  double Irr_;

  //! Vector holding value of Jacobi determinant jacobi for each Gauss point for underintegration
  vector<double> jacobi_;

  //! Vector holding value of Jacobi determinant jacobi for complete integration of massmatrix
  vector<double> jacobimass_;

  //! Vector holding value of Jacobi determinant jacobi at nodes
  vector<double> jacobinode_;

  //! @name methods for initilization of the element

  //!evaluates basis functions for a given type of Gauss rule  and triads at all Gauss points
  /*----------------------------------------------------------------------------------------------------------------------*
   |evaluates basis functions and their derivatives at Gauss points for elasticity and basis functions only at Gauss points|
   |for mass matrix; furthermore triads are evaluated at all Gauss points; note that derivatives of basis functions are    |
   |required for elasticity only, but not for mass (or damping) matrix                                          cyron 05/10|
   *----------------------------------------------------------------------------------------------------------------------*/
  template<int nnode>
  void evaluatebasisfunctionsandtriads(const DRT::UTILS::IntegrationPoints1D& gausspoints,
                                       vector<LINALG::Matrix<1,nnode> >& I,
                                       vector<LINALG::Matrix<1,nnode> >& Iprime,
                                       vector<vector<LINALG::Matrix<3,3> > >& Itilde,
                                       vector<vector<LINALG::Matrix<3,3> > >& Itildeprime,
                                       vector<LINALG::Matrix<3,3> >& Lambda,
                                       const DRT::UTILS::IntegrationPoints1D& gausspointsmass,
                                       vector<LINALG::Matrix<1,nnode> >& Imass,
                                       vector<vector<LINALG::Matrix<3,3> > >& Itildemass)
  {
    //declaration of variables

    //quaternion of relative rotation between node I and J according to (3.10), Jelenic 1999
    LINALG::Matrix<4,1> QIJ;
    //angle of relative rotation between node I and J according to (3.10), Jelenic 1999
    LINALG::Matrix<3,1> phiIJ;
    //quaternion of half relative rotation between node I and J according to (3.9), Jelenic 1999
    LINALG::Matrix<4,1> QIJhalf;
    //quaternion of reference triad \Lambda_r according to (3.9), Jelenic 1999
    LINALG::Matrix<4,1> Qr;
    //rotation quaternion between i-th nodal triadsand refenrece triad according to (3.8), Jelenic 1999
    LINALG::Matrix<4,1>  Qli;
    //rotation angles between nodal triads and refenrece triad according to (3.8), Jelenic 1999
    vector<LINALG::Matrix<3,1> > Psili(nnode);
    //interpolated local relative rotation \Psi^l at a certain Gauss point according to (3.11), Jelenic 1999
    LINALG::Matrix<3,1> Psil;
    /*derivative of interpolated local relative rotation \Psi^l at a certain Gauss point according to
     *(3.11), Jelenic 1999, but not with respect to reference length parameter, but with respect to space of integration
     *parameter. Hence, the difference between the variable used in this code and the one used in the
     *equations of Jelenic 1999 is the Jacobi determinant*/
    LINALG::Matrix<3,1> Psilprime;
    //rotation quaternion between triad at Gauss point and reference triad Qr
    LINALG::Matrix<4,1>  Ql;
    //rotation quaternion at Gauss point
    LINALG::Matrix<4,1>  Qgauss;
    //matrix of reference triad \Lambda_r according to (3.9), Jelenic 1999
    LINALG::Matrix<3,3> Lambdar;



    //computation of element reference triad and rotations relative to this triad at nodes and Gauss points

    //compute reference rotation quaternion Qr corresponding to triad \Lambda_r according to eq. (3.10) and (3.9), Jelenic 1999
    quaternionproduct(Qnew_[nodeJ_],inversequaternion(Qnew_[nodeI_]),QIJ);
    quaterniontoangle(QIJ,phiIJ);
    phiIJ.Scale(0.5);
    angletoquaternion(phiIJ,QIJhalf);
    phiIJ.Scale(2.0);
    quaternionproduct(QIJhalf,Qnew_[nodeI_],Qr);

    //compute triad Lambdar corresponding to reference rotation quaternion Qr
    quaterniontotriad(Qr,Lambdar);

    //Compute relative rotations \Psi^l_i at all nodes i according to (3.8), Jelenic 1999
    for (int node=0; node<nnode; ++node)
    {
      quaternionproduct(Qnew_[node],inversequaternion(Qr),Qli);
      quaterniontoangle(Qli,Psili[node]);
    }


    //evaluation of basis functions and triads at all Gauss points for elasticity
    for(int numgp=0; numgp < gausspoints.nquad; numgp++)
    {

      //Get location and weight of GP in parameter space
      const double xi = gausspoints.qxg[numgp][0];

      //evaluate Lagrange polynomial basis functions and its derivatives at xi
      DRT::UTILS::shape_function_1D(I[numgp],xi,this->Shape());
      DRT::UTILS::shape_function_1D_deriv1(Iprime[numgp],xi,this->Shape());

      //compute local relative rotation \Psi^l and its derivative at current Gauss point according to (3.11), Jelenic 1999
      Psil.PutScalar(0);
      Psilprime.PutScalar(0);
      for (int node=0; node<nnode; ++node)
        for(int i=0; i<3; i++)
        {
          Psil(i)      += I[numgp](node)*Psili[node](i);
          Psilprime(i) += Iprime[numgp](node)*Psili[node](i);
        }

      //compute relative rotation between triad at Gauss point and reference triad Qr
      angletoquaternion(Psil,Ql);

      //compute rotation at Gauss point, i.e. the quaternion equivalent to \Lambda(s) in Crisfield 1999, eq. (4.7)
      quaternionproduct(Ql,Qr,Qgauss);

      //compute rotation matrix at Gauss point, i.e. \Lambda(s) in Crisfield 1999, eq. (4.7)
      quaterniontotriad(Qgauss,Lambda[numgp]);

      //compute at this Gauss point basis functions \tilde{I}^i and \tilde{I}^{i'} in (3.19), page 152, Jelenic 1999, for all nodes
      computeItilde<nnode>(Psil,Itilde[numgp],phiIJ,Lambdar,Psili,I[numgp]);
      computeItildeprime<nnode>(Psil,Psilprime,Itildeprime[numgp],phiIJ,Lambdar,Psili,I[numgp],Iprime[numgp]);

    }

    //evaluation of basis functions and triads at all Gauss points for mass matrix
    for(int numgp=0; numgp < gausspointsmass.nquad; numgp++)
    {
      //Get location and weight of GP in parameter space
      const double xi = gausspointsmass.qxg[numgp][0];

      //evaluate Lagrange polynomial basis functions and its derivatives at xi
      DRT::UTILS::shape_function_1D(Imass[numgp],xi,this->Shape());

      //compute local relative rotation \Psi^l at current Gauss point according to (3.11), Jelenic 1999
      Psil.PutScalar(0);
      for (int node=0; node<nnode; ++node)
        for(int i=0; i<3; i++)
          Psil(i)      += Imass[numgp](node)*Psili[node](i);

      //compute relative rotation between triad at Gauss point and reference triad Qr
      angletoquaternion(Psil,Ql);

      //compute rotation at Gauss point, i.e. the quaternion equivalent to \Lambda(s) in Crisfield 1999, eq. (4.7)
      quaternionproduct(Ql,Qr,Qnewmass_[numgp]);

      //compute at this Gauss point basis functions \tilde{I}^i in (3.19), page 152, Jelenic 1999, for all nodes
      computeItilde<nnode>(Psil,Itildemass[numgp],phiIJ,Lambdar,Psili,Imass[numgp]);

    }

     return;
  } // DRT::ELEMENTS::Beam3ii::evaluatebasisfunctionsandtriads



  //!sets up from current nodal position all geometric parameters (considering current position as reference configuration)
  template<int nnode>
  void SetUpReferenceGeometry(const vector<double>& xrefe,
                              const vector<double>& rotrefe,
                              const bool secondinit = false)
  {
    /*this method initializes geometric variables of the element; the initilization can usually be applied to elements only once;
     *therefore after the first initilization the flag isinit is set to true and from then on this method does not take any action
     *when called again unless it is called on purpose with the additional parameter secondinit. If this parameter is passed into
     *the method and is true the element is initialized another time with respective xrefe and rotrefe;
     *note: the isinit_ flag is important for avoiding reinitialization upon restart. However, it should be possible to conduct a
     *second initilization in principle (e.g. for periodic boundary conditions*/

    if(!isinit_ || secondinit)
    {
      isinit_ = true;

      /*first the nodes for the reference triad \Lambda_r of the element are chosen according to eq. (6.2), Crisfield 1999;
       *note that the first node of the element in BACI is node 0 so that we need -1 in the end to convert from the notation
       *in Crisfield 1999 to the BACI convention*/
      nodeI_ = (int)floor(0.5*(NumNode()+1)) - 1;
      nodeJ_ = (int)floor(0.5*(NumNode()+2)) - 1;


      //resize and initialized STL vectors for rotational displacements so that they can store one value at each node
      dispthetaconv_.resize(nnode);
      dispthetaold_.resize(nnode);
      dispthetanew_.resize(nnode);
      for(int i=0; i<nnode; i++)
        for(int j=0; j<3; j++)
        {
          dispthetaconv_[i](j) = 0;
          dispthetaold_[i](j) = 0;
          dispthetanew_[i](j) = 0;
        }


      //resize STL vectors for Jacobi determinants so that they can store one value at each Gauss point
      jacobi_.resize(nnode-1);
      kapparef_.resize(nnode-1);
      jacobimass_.resize(nnode);
      jacobinode_.resize(nnode);

      //create Matrix for the derivates of the shapefunctions at the GP
      LINALG::Matrix<1,nnode> shapefuncderiv;

      //create Matrix for the shapefunctions at the GP
      LINALG::Matrix<1,nnode> funct;

      //derivative of curve in physical space with respect to curve parameter xi \in [-1;1] on element level
      LINALG::Matrix<3,1> drdxi;

      //Get DiscretizationType
      DRT::Element::DiscretizationType distype = Shape();

      //Get the applied integrationpoints for underintegration
      DRT::UTILS::IntegrationPoints1D gausspoints(MyGaussRule(nnode,gaussunderintegration));

      //Loop through all GPs for underintegration and calculate jacobi determinants and initial curvature at the GPs
      for(int numgp=0; numgp < gausspoints.nquad; numgp++)
      {
        //Get position xi of GP
        const double xi = gausspoints.qxg[numgp][0];

        //Get derivatives of shapefunctions at GP
        DRT::UTILS::shape_function_1D_deriv1(shapefuncderiv,xi,distype);

        //Get shapefunctions at GP
        DRT::UTILS::shape_function_1D(funct,xi,distype);

        drdxi.Clear();

        //calculate vector dxdxi
        for(int node=0; node<nnode; node++)
          for(int dof=0; dof<3 ; dof++)
            drdxi(dof) += shapefuncderiv(node) * xrefe[3*node+dof];

        //Store Jacobi determinant with respect to reference configuration
        jacobi_[numgp]= drdxi.Norm2();


        /*the below curvature computation is possible for 2-noded elements only; for higher order elements one might replace it by
         *a computation according to eq. (2.12), Jelenic 1999*/
        if(NumNode()>2)
          dserror("computation of curvature in beam3ii element implemented only for 2 nodes!");

        //compute local rotational vectors phi according to Crisfield 1999,(4.6) in quaterion form
        LINALG::Matrix<4,1> phi12;
        quaternionproduct(Qnew_[1],inversequaternion(Qnew_[0]),phi12);

        //according o Crisfield 1999, eq. (4.9), kappa equals the vector corresponding to phi12 divided by the element reference length
        quaterniontoangle(phi12,kapparef_[0]);
        kapparef_[0].Scale(0.5/jacobi_[0]);


      }//for(int numgp=0; numgp < gausspoints.nquad; numgp++)



      //Get the applied integrationpoints for exact integration of mass matrix
      DRT::UTILS::IntegrationPoints1D gausspointsmass(MyGaussRule(nnode,lobattointegration));

      //vector whose numgp-th element is a 1xnnode-matrix with all Lagrange polynomial basis functions evaluated at the numgp-th Gauss point
      vector<LINALG::Matrix<1,nnode> > I(nnode-1);

      //vector whose numgp-th element is a 1xnnode-matrix with the derivatives of all Lagrange polynomial basis functions evaluated at nnode-1 Gauss points for elasticity
      vector<LINALG::Matrix<1,nnode> > Iprime(nnode-1);

      //vector whose numgp-th element is a vector with nnode elements, who represent the 3x3-matrix-shaped interpolation function \tilde{I}^nnode at nnode-1 Gauss points for elasticity according to according to (3.18), Jelenic 1999
      vector<vector<LINALG::Matrix<3,3> > > Itilde(nnode-1);

      //vector whose numgp-th element is a vector with nnode elements, who represent the 3x3-matrix-shaped interpolation function \tilde{I'}^nnode at nnode-1 Gauss points for elasticity according to according to (3.19), Jelenic 1999
      vector<vector<LINALG::Matrix<3,3> > > Itildeprime(nnode-1);

      //vector with rotation matrices at nnode-1 Gauss points for elasticity
      vector<LINALG::Matrix<3,3> > Lambda(nnode-1);

      //vector whose numgp-th element is a 1xnnode-matrix with all Lagrange polynomial basis functions evaluated at the nnode Gauss points for mass matrix
      vector<LINALG::Matrix<1,nnode> > Imass(nnode);

      //vector whose numgp-th element is a vector with nnode elements, who represent the 3x3-matrix-shaped interpolation function \tilde{I}^nnode at the nnode Gauss points for mass matrix according to according to (3.18), Jelenic 1999
      vector<vector<LINALG::Matrix<3,3> > > Itildemass(nnode);

      //exact Gauss integration requires as many integration points as nodes
      Qconvmass_.resize(nnode);
      Qnewmass_.resize(nnode);

      //evaluate basis functions
      evaluatebasisfunctionsandtriads<nnode>(gausspoints,I,Iprime,Itilde,Itildeprime,Lambda,gausspointsmass,Imass,Itildemass);


      //Loop through all GPs for exact integration and compute initial jacobi determinant
      for(int numgp=0; numgp < gausspointsmass.nquad; numgp++)
      {

        //Get position xi of GP
        const double xi = gausspointsmass.qxg[numgp][0];

        //Get derivatives of shapefunctions at GP
        DRT::UTILS::shape_function_1D_deriv1(shapefuncderiv,xi,distype);

        drdxi.Clear();
        //calculate dx/dxi and dz/dxi
        for(int node=0; node<nnode; node++)
          for(int dof=0; dof<3; dof++)
            drdxi(dof)+=shapefuncderiv(node)*xrefe[3*node+dof];

        //Store Jacobi determinant with respect to reference configuration
        jacobimass_[numgp]= drdxi.Norm2();

        //in evaluatebasisfunctionsandtriads Qnewmass_ was initialized; copy that to Qconvmass_
        Qconvmass_[numgp].PutScalar(0);
        Qconvmass_[numgp] += Qnewmass_[numgp];


      }//for(int numgp=0; numgp < gausspointsmass.nquad; numgp++)


      //compute Jacobi determinant at gauss points for Lobatto quadrature (i.e. at nodes)
      for(int numgp=0; numgp< nnode; numgp++)
      {
        //Get position xi of nodes
        const double xi = -1.0 + 2*numgp / (nnode - 1);

        //Get derivatives of shapefunctions at GP
        DRT::UTILS::shape_function_1D_deriv1(shapefuncderiv,xi,distype);

        drdxi.Clear();
        //calculate dx/dxi and dz/dxi
        for(int node=0; node<nnode; node++)
          for(int dof=0; dof<3; dof++)
            drdxi(dof)+=shapefuncderiv(node)*xrefe[3*node+dof];

        //Store Jacobi determinant for each node (Jacobi determinant refers by definition always to the reference configuration)
        jacobinode_[numgp]= drdxi.Norm2();

      }//for(int numgp=0; numgp< nnode; numgp++)

    }//if(!isinit_)

    return;

  }//DRT::ELEMENTS::Beam3ii::SetUpReferenceGeometry()

  //@}

  //! @name Internal calculation methods

  //!compute convected strain at a certain Gauss point with triad rotmat according to Crisfield 1999, eq. (3.4) and eq. (4.9)
  void computestrain(const LINALG::Matrix<3,1>& rprime, const LINALG::Matrix<3,3>& Lambda,
                     LINALG::Matrix<3,1>& gamma, LINALG::Matrix<3,1>& kappa);

  //!computing convected stresses from convected strains vector and returing also convected constitutive matrix between both
  void strainstress(const LINALG::Matrix<3,1>& gamma, const LINALG::Matrix<3,1>& kappa,
                    LINALG::Matrix<3,1>& stressN, LINALG::Matrix<3,3>& CN,
                    LINALG::Matrix<3,1>& stressM, LINALG::Matrix<3,3>& CM);

  //!push forward strains, stresses and constitutive matrices to their spatial counterparts by rotation matrix Lambda according to Romero 2004, eq. (3.10)
  void pushforward(const LINALG::Matrix<3,3>& Lambda,
                  const LINALG::Matrix<3,1>& stressN , const LINALG::Matrix<3,3>& CN,
                  const LINALG::Matrix<3,1>& stressM , const LINALG::Matrix<3,3>& CM,
                  LINALG::Matrix<3,1>& stressn, LINALG::Matrix<3,3>& cn,
                  LINALG::Matrix<3,1>& stressm, LINALG::Matrix<3,3>& cm);

  //!compute convected strain at certain Gauss point with triad rotmat according to Crisfield 1999, eq. (3.4) and eq. (4.9)
  void computestrain(const LINALG::Matrix<3,1> Psil, const LINALG::Matrix<3,1> Psilprime,
                     const double& xi, const LINALG::Matrix<3,1>& rprime, const LINALG::Matrix<3,3>& rotmat,
                     LINALG::Matrix<3,1>& gamma, LINALG::Matrix<3,1>& kappa);

  //!compute \tilde{I}^i in (3.18), page 152, Jelenic 1999, for all nodes i at a certaom Gauss point
  /*----------------------------------------------------------------------------------------------------------------------*
   |compute \tilde{I}^i in (3.18), page 152, Jelenic 1999, for all nodes i at a certaom Gauss point            cyron 04/10|
   *----------------------------------------------------------------------------------------------------------------------*/
  template<int nnode>
  void computeItilde(const LINALG::Matrix<3,1>& Psil, vector<LINALG::Matrix<3,3> >& Itilde,
                     const LINALG::Matrix<3,1>& phiIJ, const LINALG::Matrix<3,3>& Lambdar,
                     const vector<LINALG::Matrix<3,1> >& Psili, const LINALG::Matrix<1,nnode>& funct)
  {
    //auxiliary matrices for storing intermediate results
    LINALG::Matrix<3,3> auxmatrix;
    auxmatrix.PutScalar(0);

    //make sure that Itildeprime has proper dimensions
    Itilde.resize(nnode);

    //compute squared brackets term in (3.18), Jelenic 1999v
    LINALG::Matrix<3,3> squaredbrackets;
    squaredbrackets.PutScalar(0);
    for(int node=0; node<nnode; ++node)
    {
      auxmatrix = Tmatrix(Psili[node]);
      auxmatrix.Scale(funct(node));
      squaredbrackets -= auxmatrix;
    }
    for(int i=0; i<3; i++)
      squaredbrackets(i,i) += 1;

    //loop through all nodes i
    for (int node=0; node<nnode; ++node)
    {

      //compute rightmost term in curley brackets in (3.18), Jelenic 1999
      Itilde[node].PutScalar(0);
      Itilde[node].Multiply(Tinvmatrix(Psil),Tmatrix(Psili[node]));
      Itilde[node].Scale(funct(node));

      //if node i is node I then add squared bracktets term times v_I
      if(node == nodeI_)
      {
        auxmatrix.Multiply(squaredbrackets,vI(phiIJ));
        Itilde[node] += auxmatrix;
      }

      //if node i is node J then add squared bracktets term times v_J
      if(node == nodeJ_)
      {
        auxmatrix.Multiply(squaredbrackets,vJ(phiIJ));
        Itilde[node] += auxmatrix;
      }

      //now the term in the curley bracktets has been computed and has to be rotated by \Lambda_r and \Lambda_r^t
      auxmatrix.MultiplyNT(Itilde[node],Lambdar);
      Itilde[node].MultiplyNN(Lambdar,auxmatrix);

    }



     return;
  } // DRT::ELEMENTS::Beam3ii::computeItilde

  //!compute \tilde{I}^{i'} in (3.19), page 152, Jelenic 1999, for all nodes i at a certaom Gauss point
  /*----------------------------------------------------------------------------------------------------------------------*
   |compute \tilde{I}^{i'} in (3.19), page 152, Jelenic 1999 for all nodes i at a certaom Gauss point          cyron 04/10|
   *----------------------------------------------------------------------------------------------------------------------*/
  template<int nnode>
  void computeItildeprime(const LINALG::Matrix<3,1>& Psil, const LINALG::Matrix<3,1>& Psilprime, vector<LINALG::Matrix<3,3> >& Itildeprime,
                          const LINALG::Matrix<3,1>& phiIJ, const LINALG::Matrix<3,3>& Lambdar,
                          const vector<LINALG::Matrix<3,1> >& Psili, const LINALG::Matrix<1,nnode>& funct, const LINALG::Matrix<1,nnode>& deriv)
  {
    //auxiliary matrices for storing intermediate results
    LINALG::Matrix<3,3> auxmatrix;

    //make sure that Itildeprime has proper dimensions
    Itildeprime.resize(nnode);

    //matrix d(T^{-1})/dx
    LINALG::Matrix<3,3> dTinvdx;
    computedTinvdx(Psil,Psilprime,dTinvdx);

    //compute T^{~} according to remark subsequent to (3.19), Jelenic 1999
    LINALG::Matrix<3,3> Ttilde;
    Ttilde.PutScalar(0);
    for(int node=0; node<nnode; ++node)
    {
      auxmatrix = Tmatrix(Psili[node]);
      auxmatrix.Scale(funct(node));
      Ttilde += auxmatrix;
    }

    //compute T^{~'} according to remark subsequent to (3.19), Jelenic 1999
    LINALG::Matrix<3,3> Ttildeprime;
    Ttildeprime.PutScalar(0);
    for(int node=0; node<nnode; ++node)
    {
      auxmatrix = Tmatrix(Psili[node]);
      auxmatrix.Scale(deriv(node));
      Ttildeprime += auxmatrix;
    }

    //compute first squared brackets term in (3.18), Jelenic 1999v
    LINALG::Matrix<3,3> squaredbrackets;
    squaredbrackets.PutScalar(0);
    squaredbrackets.Multiply(dTinvdx,Ttilde);
    auxmatrix.Multiply(Tinvmatrix(Psil),Ttildeprime);
    squaredbrackets += auxmatrix;

    //loop through all nodes i
    for (int node=0; node<nnode; ++node)
    {

      //compute first term in second squared brackets
      Itildeprime[node] = dTinvdx;
      Itildeprime[node].Scale(funct(node));

      //compute second term in second squared brackets
      auxmatrix.PutScalar(0);
      auxmatrix += Tinvmatrix(Psil);
      auxmatrix.Scale(deriv(node));

      //compute second squared brackets
      auxmatrix += Itildeprime[node];

      //compute second squared bracketds time T(\Psi^l_j)
      Itildeprime[node].Multiply(auxmatrix,Tmatrix(Psili[node]));

      //if node i is node I then add first squared bracktets term times v_I
      if(node == nodeI_)
      {
        auxmatrix.Multiply(squaredbrackets,vI(phiIJ));
        Itildeprime[node] -= auxmatrix;
      }

      //if node i is node J then add first squared bracktets term times v_J
      if(node == nodeJ_)
      {
        auxmatrix.Multiply(squaredbrackets,vJ(phiIJ));
        Itildeprime[node] -= auxmatrix;
      }

      //now the term in the curley bracktets has been computed and has to be rotated by \Lambda_r and \Lambda_r^t
      auxmatrix.MultiplyNT(Itildeprime[node],Lambdar);
      Itildeprime[node].MultiplyNN(Lambdar,auxmatrix);
    }

     return;
  } // DRT::ELEMENTS::Beam3ii::computeItildeprime




  //!compute matrix v_I as outlined in the equations above (3.15) on page 152 of Jelenic 1999
  /*----------------------------------------------------------------------------------------------------------------------*
   |compute matrix v_I as outlined in the equations above (3.15) on page 152 of Jelenic 1999                   cyron 04/10|
   *----------------------------------------------------------------------------------------------------------------------*/
  LINALG::Matrix<3,3> vI(const LINALG::Matrix<3,1>& phiIJ)
  {
    //matrix v_I
    LINALG::Matrix<3,3> result;

    computespin(result,phiIJ);
    if(phiIJ.Norm2() == 0)
      result.Scale(0.25);
    else
      result.Scale(tan(phiIJ.Norm2()/4.0)/phiIJ.Norm2());

    for(int i=0; i<3; i++)
      result(i,i) +=1;

    result.Scale(0.5);

    return result;
  } // DRT::ELEMENTS::Beam3ii::vI



  //!compute matrix v_J as outlined in the equations above (3.15) on page 152 of Jelenic 1999
  /*----------------------------------------------------------------------------------------------------------------------*
   |compute matrix v_J as outlined in the equations above (3.15) on page 152 of Jelenic 1999                   cyron 04/10|
   *----------------------------------------------------------------------------------------------------------------------*/
  LINALG::Matrix<3,3> vJ(const LINALG::Matrix<3,1>& phiIJ)
  {
    //matrix v_J
    LINALG::Matrix<3,3> result;

    computespin(result,phiIJ);
    if(phiIJ.Norm2() == 0)
      result.Scale(-0.25);
    else
      result.Scale(-tan(phiIJ.Norm2()/4.0)/phiIJ.Norm2());

    for(int i=0; i<3; i++)
      result(i,i) +=1;

    result.Scale(0.5);

    return result;
  } // DRT::ELEMENTS::Beam3ii::vJ


  //!compute derivative r' (rprime) of line of centroids at Gauss point x with respect to Jelenic 1999 , eq. (2.12)
  /*----------------------------------------------------------------------------------------------------------------------*
   |compute derivative r' (rprime) of line of centroids at Gauss point x with respect to Jelenic 1999, eq. (2.12)        |
   |                                                                                                           cyron 04/10|
   *----------------------------------------------------------------------------------------------------------------------*/
  template<int nnode, int dof>
  void curvederivative(const vector<double>& disp, const LINALG::Matrix<1,nnode> deriv, LINALG::Matrix<3,1>& rprime, const double& jacobi)
  {
    //initialize rprime
    rprime.PutScalar(0);

    for (int i=0; i<dof; ++i)
      for (int node=0; node<nnode; ++node)
        rprime(i) += (Nodes()[node]->X()[i]+disp[6*node+i])*deriv(node);

    /*so far we have computed the derivative of the curve with respect to the element parameter \xi \in [-1;1];
     *as r' in (2.12) is the derivative with respect to the reference length, we have to divided it by the Jacobi
     *determinant at the respective point*/
    rprime.Scale(1.0/jacobi);

     return;
  } // DRT::ELEMENTS::Beam3ii::curvederivative

  //!calculation of nonlinear stiffness and mass matrix
  template<int nnode>
  void b3_nlnstiffmass( ParameterList& params,
                        vector<double>&           vel,
                        vector<double>&           disp,
                        Epetra_SerialDenseMatrix* stiffmatrix,
                        Epetra_SerialDenseMatrix* massmatrix,
                        Epetra_SerialDenseVector* force);

  //!calculation of elastic energy
  template<int nnode>
  void b3_energy( ParameterList& params,
                  vector<double>&           disp,
                  Epetra_SerialDenseVector* intenergy);

  //! lump mass matrix
  template<int nnode>
  void lumpmass(Epetra_SerialDenseMatrix* emass);

  //!determine Gauss rule from required type of integration
  DRT::UTILS::GaussRule1D MyGaussRule(int nnode, IntegrationType integrationtype);

  //@}

  //! @name Methods for Brownian dynamics simulations

   //!compute damping matrix and statistical forces according to fluctuation dissipation theorem
   template<int nnode, int ndim, int dof, int randompergauss> //number of nodes, number of dimensions of embedding space, number of degrees of freedom per node, number of random numbers required per Gauss point
   void CalcBrownian(ParameterList& params,  //!<parameter list
                     const vector<double>&           vel,  //!< element velocity vector
                     const vector<double>&           disp, //!<element disp vector
                     Epetra_SerialDenseMatrix* stiffmatrix,  //!< element stiffness matrix
                     Epetra_SerialDenseVector* force,
                     vector<LINALG::Matrix<1,nnode> >& Imass,
                     vector<vector<LINALG::Matrix<3,3> > >& Itildemass);//!< element internal force vector

   //!computes damping coefficients for employed friction model
   void MyDampingConstants(ParameterList& params,LINALG::Matrix<3,1>& gamma, const INPAR::STATMECH::FrictionModel& frictionmodel);

   //!computes the number of different random numbers required in each time step for generation of stochastic forces
   int HowManyRandomNumbersINeed();

   //!computes rotational damping forces and stiffness
   template<int nnode> //number of nodes
   void MyRotationalDamping(ParameterList& params,  //!<parameter list
                           const vector<double>&           vel,  //!< element velocity vector
                           const vector<double>&           disp, //!<element disp vector
                           Epetra_SerialDenseMatrix* stiffmatrix,//!< element stiffness matrix
                           Epetra_SerialDenseVector* force,      //!< element internal force vector
                           const DRT::UTILS::IntegrationPoints1D& gausspointsdamping,
                           const vector<LINALG::Matrix<1,nnode> >& Idamping,
                           const vector<vector<LINALG::Matrix<3,3> > >& Itildedamping,
                           const vector<LINALG::Matrix<4,1> >& Qconvdamping,
                           const vector<LINALG::Matrix<4,1> >& Qnewdamping);

   //!computes translational damping forces and stiffness
   template<int nnode, int ndim, int dof> //number of nodes, number of dimensions of embedding space, number of degrees of freedom per node
   void MyTranslationalDamping(ParameterList& params,  //!<parameter list
                             const vector<double>&           vel,  //!< element velocity vector
                             const vector<double>&           disp, //!<element disp vector
                             Epetra_SerialDenseMatrix* stiffmatrix,  //!< element stiffness matrix
                             Epetra_SerialDenseVector* force);//!< element internal force vector

   //!computes stochastic translational forces and resulting stiffness
   template<int nnode, int ndim, int dof, int randompergauss> //number of nodes, number of dimensions of embedding space, number of degrees of freedom per node, number of random numbers required per Gauss point
   void MyStochasticForces(ParameterList& params,  //!<parameter list
                         const vector<double>&           vel,  //!< element velocity vector
                         const vector<double>&           disp, //!<element disp vector
                         Epetra_SerialDenseMatrix* stiffmatrix,  //!< element stiffness matrix
                         Epetra_SerialDenseVector* force);//!< element internal force vector

   //!computes stochastic rotational moments and resulting stiffness
   template<int nnode, int randompergauss> //number of nodes, number of random numbers required per Gauss point
   void MyStochasticMoments(ParameterList& params,  //!<parameter list
                         const vector<double>&           vel,  //!< element velocity vector
                         const vector<double>&           disp, //!<element disp vector
                         Epetra_SerialDenseMatrix* stiffmatrix,//!< element stiffness matrix
                         Epetra_SerialDenseVector* force,      //!< element internal force vector
                         const DRT::UTILS::IntegrationPoints1D& gausspointsdamping,
                         const vector<LINALG::Matrix<1,nnode> >& Idamping,
                         const vector<vector<LINALG::Matrix<3,3> > >& Itildedamping,
                         const vector<LINALG::Matrix<4,1> >& Qconvdamping,
                         const vector<LINALG::Matrix<4,1> >& Qnewdamping);

   //!computes velocity of background fluid and gradient of that velocity at a certain evaluation point in the physical space and adds respective terms to internal forces and damping matrix
   template<int ndim> //number of dimensions of embedding space
   void MyBackgroundVelocity(ParameterList& params,  //!<parameter list
                             const LINALG::Matrix<ndim,1>& evaluationpoint,  //!<point at which background velocity and its gradient has to be computed
                             LINALG::Matrix<ndim,1>& velbackground,  //!< velocity of background fluid
                             LINALG::Matrix<ndim,ndim>& velbackgroundgrad); //!<gradient of velocity of background fluid

   //!shifts nodes so that proper evaluation is possible even in case of periodic boundary conditions
   template<int nnode, int ndim> //number of nodes, number of dimensions
   void NodeShift(ParameterList& params,  //!<parameter list
                 vector<double>&           disp); //!<element disp vector

   //@}


  // don't want = operator
  Beam3ii& operator = (const Beam3ii& old);


}; // class Beam3ii



// << operator
ostream& operator << (ostream& os, const DRT::Element& ele);


} // namespace Elements
} // namespace DRT


#endif  // #ifndef BEAM_H
#endif  // #ifdef CCADISCRET
