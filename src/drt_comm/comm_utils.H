/*----------------------------------------------------------------------*/
/*!
\file comm_utils.H

\brief Helper class for everything that deals with communication, e.g.
       MPI, Epetra_Comm and further communicators

<pre>
Maintainer: Georg Hammerl
            hammerl@lnm.mw.tum.de
            http://www.lnm.mw.tum.de
            089 - 289-152537
</pre>
*/


/*----------------------------------------------------------------------*
 | definitions                                              ghamm 01/12 |
 *----------------------------------------------------------------------*/
#ifdef CCADISCRET

#ifndef COMM_UTILS_H
#define COMM_UTILS_H


/*----------------------------------------------------------------------*
 | headers                                                  ghamm 01/12 |
 *----------------------------------------------------------------------*/
#include <Teuchos_DefaultMpiComm.hpp>
#include <Epetra_MpiComm.h>
#include <mpi.h>

#include "../drt_lib/drt_dserror.H"
#include "../drt_lib/drt_globalproblem_enums.H"

namespace DRT
{
  class Discretization;
}

/*----------------------------------------------------------------------*
 |                                                          ghamm 01/12 |
 *----------------------------------------------------------------------*/
/// COMM_UTILS
namespace COMM_UTILS
{
  class NestedParGroup;
  
  //! create a local and a global communicator for the problem
  void CreateComm(int argc, char** argv);
  
  //! distribute discretizations from one group to the others
  void BroadcastDiscretizations(const int bgroup);
  //! distribute a discretization from one group to one other
  void NPDuplicateDiscretization(const int sgroup, 
                                 const int rgroup,
                                 Teuchos::RCP<NestedParGroup> group,
                                 Teuchos::RCP<DRT::Discretization> dis,
                                 Teuchos::RCP<Epetra_MpiComm> icomm);

  //! transform Epetra_Comm to Teuchos::Comm, RCP version
  template<class datatype>
  Teuchos::RCP<const Teuchos::Comm<datatype> > toTeuchosComm(const Epetra_Comm & comm)
  {
    try {
      const Epetra_MpiComm& mpiComm = dynamic_cast<const Epetra_MpiComm&>(comm);
      Teuchos::RCP<Teuchos::MpiComm<datatype> > mpicomm =  Teuchos::rcp(new Teuchos::MpiComm<datatype>(Teuchos::opaqueWrapper(mpiComm.Comm())));
      return Teuchos::rcp_dynamic_cast<const Teuchos::Comm<datatype> >(mpicomm);
    }
    catch (std::bad_cast & b)
    {
      dserror("Cannot convert an Epetra_Comm to a Teuchos::Comm: The exact type of the Epetra_Comm object is unknown");
    }
    dserror("Something went wrong with converting an Epetra_Comm to a Teuchos communicator! You should not be here!");
    return Teuchos::null;
  }


  class NestedParGroup
  {
  public:
    NestedParGroup(
      int groupId,
      int ngroup,
      std::map<int, int> lpidgpid,
      Teuchos::RCP<Epetra_Comm> lcomm,
      Teuchos::RCP<Epetra_Comm> gcomm,
      NP_TYPE npType
      );

    virtual ~NestedParGroup(){};

    /// return group id
    int GroupId(){ return groupId_; }

    /// return number of groups
    int NumGroups(){ return ngroup_; }

    /// return group size
    int GroupSize(){ return lcomm_->NumProc(); }

    /// return global processor id of local processor id
    int GPID(int LPID){ return lpidgpid_[LPID]; }

    /// return local processor id of global processor id if GPID is in this group
    int LPID(int GPID);

    /// return local communicator
    Teuchos::RCP<Epetra_Comm> LocalComm(){ return lcomm_; }

    /// return local communicator
    Teuchos::RCP<Epetra_Comm> GlobalComm(){ return gcomm_; }

    /// return nested parallelism type
    NP_TYPE NpType(){ return npType_; }

  private:
    /// group id
    int groupId_;

    /// number of groups
    int ngroup_;

    /// map from local processor ids to global processor ids
    std::map<int, int> lpidgpid_;

    /// local communicator
    Teuchos::RCP<Epetra_Comm> lcomm_;

    /// global communicator
    Teuchos::RCP<Epetra_Comm> gcomm_;

    /// nested parallelism type
    NP_TYPE npType_;

  };


} // namespace COMM_UTILS



/*----------------------------------------------------------------------*/
#endif  // COMM_UTILS_H
#endif  // CCADISCRET
