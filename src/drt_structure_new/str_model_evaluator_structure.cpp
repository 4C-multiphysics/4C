/*-----------------------------------------------------------*/
/*!
\file str_model_evaluator_structure.cpp

\brief Evaluation and assembly of all structure terms

\maintainer Michael Hiermeier

\date Aug 11, 2015

\level 3

*/
/*-----------------------------------------------------------*/

#include "str_model_evaluator_structure.H"
#include "str_model_evaluator_data.H"
#include "str_timint_base.H"
#include "str_utils.H"
#include "str_integrator.H"
#include "str_dbc.H"
#include "str_timint_basedataio_runtime_vtk_output.H"

#include <Epetra_Vector.h>
#include <Epetra_Time.h>
#include <Teuchos_ParameterList.hpp>

#include "../linalg/linalg_sparseoperator.H"
#include "../linalg/linalg_sparsematrix.H"
#include "../linalg/linalg_utils.H"

#include "../drt_lib/drt_dserror.H"
#include "../drt_lib/drt_discret.H"

#include "../drt_io/io.H"
#include "../drt_io/discretization_runtime_vtu_writer.H"

#include "../drt_beam3/beam_discretization_runtime_vtu_writer.H"
#include "../drt_beam3/beam_discretization_runtime_vtu_output_params.H"

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
STR::MODELEVALUATOR::Structure::Structure()
    : dt_ele_ptr_(NULL),
      masslin_type_(INPAR::STR::ml_none),
      stiff_ptr_(NULL),
      dis_incr_ptr_(Teuchos::null),
      vtu_writer_ptr_(Teuchos::null),
      beam_vtu_writer_ptr_(Teuchos::null)
{
  // empty
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::Setup()
{
  if (not IsInit())
    dserror("Init() has not been called, yet!");

  // get the global state content
  {
    // structural element evaluation time
    dt_ele_ptr_ =
        &(GState().GetMutableElementEvaluationTime());
  }

  // displ-displ block
  stiff_ptr_ = dynamic_cast<LINALG::SparseMatrix*>(
      GState().CreateStructuralStiffnessMatrixBlock() );

  if ( stiff_ptr_ == NULL )
    dserror( "Dynmaic cast to LINALG::SparseMatrix failed!" );

  // get the structural dynamic content
  {
    // setup important evaluation booleans
    masslin_type_ = TimInt().GetDataSDyn().GetMassLinType();
  }
  // setup new variables
  {
    dis_incr_ptr_ = Teuchos::rcp(new Epetra_Vector(DisNp().Map(),true));
  }

  if ( GInOutput().GetRuntimeVtkOutputParams() != Teuchos::null )
  {
    vtu_writer_ptr_ = Teuchos::rcp( new DiscretizationRuntimeVtuWriter() );

    if ( GInOutput().GetRuntimeVtkOutputParams()->SpecialOutputBeams() )
      beam_vtu_writer_ptr_ = Teuchos::rcp( new BeamDiscretizationRuntimeVtuWriter() );
  }

  // set flag
  issetup_ = true;
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::Reset(const Epetra_Vector& x)
{
  CheckInitSetup();

  /* --- reset external forces
   * Please note, that PutScalar is safer (but maybe slower) than
   * Scale(0.0), because of possible NaN and inf values! */
  FextNp().PutScalar(0.0);

  /* --- reset internal forces
   * Please note, that PutScalar is safer (but maybe slower) than
   * Scale(0.0), because of possible NaN and inf values! */
  FintNp().PutScalar(0.0);

  // reset stiffness matrix
  Stiff().Zero();

  // set evaluation time back to zero
  *dt_ele_ptr_ = 0.0;
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
bool STR::MODELEVALUATOR::Structure::EvaluateForce()
{
  CheckInitSetup();
  bool ok = true;
  // ---------------------------------------
  // (1) EXTERNAL FORCES
  // ---------------------------------------
  ok = ApplyForceExternal();

  // ---------------------------------------
  // (2) INTERNAL FORCES
  // ---------------------------------------
  // ordinary internal force
  ok = (ok ? ApplyForceInternal() : false);

  return ok;
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
bool STR::MODELEVALUATOR::Structure::EvaluateStiff()
{
  CheckInitSetup();
  bool ok = true;

  /* We use the same routines as for the ApplyForceStiff case, but we
   * do not update the global force vector, which is used for the
   * solution process in the NOX library.
   * This is meaningful, since the computational overhead, which is
   * generated by evaluating the right hand side is negligible */
  // *********** time measurement ***********
  double dtcpu = GState().GetTimer()->WallTime();
  // *********** time measurement ***********
  // ---------------------------------------------------------------------
  // (1) EXTRERNAL FORCES and STIFFNESS ENTRIES
  // ---------------------------------------------------------------------
  ok = ApplyForceStiffExternal();

  // ---------------------------------------------------------------------
  // (2) INTERNAL FORCES and STIFFNESS ENTRIES
  // ---------------------------------------------------------------------
  // ordinary internal force
  ok = (ok ? ApplyForceStiffInternal() : false);

  // *********** time measurement ***********
  *dt_ele_ptr_ +=
      GState().GetTimer()->WallTime() - dtcpu;
  // *********** time measurement ***********

  return ok;
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
bool STR::MODELEVALUATOR::Structure::EvaluateForceStiff()
{
  CheckInitSetup();
  bool ok = true;

  // *********** time measurement ***********
  double dtcpu = GState().GetTimer()->WallTime();
  // *********** time measurement ***********
  // ---------------------------------------------------------------------
  // (1) EXTRERNAL FORCES and STIFFNESS ENTRIES
  // ---------------------------------------------------------------------
  ok = ApplyForceStiffExternal();

  // ---------------------------------------------------------------------
  // (2) INTERNAL FORCES and STIFFNESS ENTRIES
  // ---------------------------------------------------------------------
  // ordinary internal force
  ok = (ok ? ApplyForceStiffInternal() : false);

  // *********** time measurement ***********
  *dt_ele_ptr_ +=
      GState().GetTimer()->WallTime() - dtcpu;
  // *********** time measurement ***********

  // that's it
  return ok;
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
bool STR::MODELEVALUATOR::Structure::AssembleForce(Epetra_Vector& f,
    const double & timefac_np) const
{
  LINALG::AssembleMyVector(1.0,f,-timefac_np,FextNp());
  LINALG::AssembleMyVector(1.0,f,timefac_np,FintNp());

  // add the scaled force contributions of the old time step
  // structural dofs of the right-hand-side vector at t_{n+timefac_n} (read-only)
  Teuchos::RCP<const Epetra_Vector> fstructold_ptr =
      GState().GetFstructureOld();
  LINALG::AssembleMyVector(1.0,f,1.0,*fstructold_ptr);

  return true;
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
bool STR::MODELEVALUATOR::Structure::AssembleJacobian(
    LINALG::SparseOperator& jac,
    const double & timefac_np) const
{
  int err = Stiff().Scale(timefac_np);
  GState().AssignModelBlock(jac,Stiff(),Type(),DRT::UTILS::block_displ_displ);
  return (err==0);
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
bool STR::MODELEVALUATOR::Structure::InitializeInertiaAndDamping()
{
  CheckInitSetup();

  // currently a fixed number of matrix and vector pointers are supported
  Teuchos::RCP<Epetra_Vector> eval_vec [3] =
      {Teuchos::null,Teuchos::null,Teuchos::null};
  Teuchos::RCP<LINALG::SparseOperator> eval_mat[2] =
      {Teuchos::null,Teuchos::null};

  // create vector with zero entries
  Teuchos::RCP<const Epetra_Vector> zeros = Int().GetDbc().GetZerosPtr();

  // set vector values needed by elements
  // --> initially zero !!!
  Discret().ClearState();
  Discret().SetState(0,"residual displacement", zeros);
  Discret().SetState(0,"displacement", zeros);

  // set action type and evaluation matrix and vector pointers
  StaticContributions(&eval_mat[0],&eval_vec[0]);
  MaterialDampingContributions(&eval_mat[0]);
  InertialContributions(&eval_mat[0],&eval_vec[0]);

  // evaluate
  EvaluateInternal(&eval_mat[0],&eval_vec[0]);

  // complete stiffness and mass matrix
  FillComplete();

  // assemble the rayleigh damping matrix
  RayleighDampingMatrix();

  return EvalErrorCheck();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
bool STR::MODELEVALUATOR::Structure::ApplyForceInternal()
{
  CheckInitSetup();

  // currently a fixed number of matrix and vector pointers are supported
  Teuchos::RCP<Epetra_Vector> eval_vec [3] =
      {Teuchos::null,Teuchos::null,Teuchos::null};
  Teuchos::RCP<LINALG::SparseOperator> eval_mat[2] =
      {Teuchos::null,Teuchos::null};

  // set vector values needed by elements
  Discret().ClearState();
  Discret().SetState(0,"residual displacement", dis_incr_ptr_);
  Discret().SetState(0,"displacement", GState().GetDisNp());
  Discret().SetState(0,"velocity", GState().GetVelNp());

  // set action type and evaluation matrix and vector pointers
  StaticContributions(&eval_vec[0]);
  MaterialDampingContributions(&eval_mat[0]);
  InertialContributions(&eval_vec[0]);

  // evaluate ...
  EvaluateInternal(&eval_mat[0],&eval_vec[0]);

  // evaluate inertia and visco forces
  InertialAndViscousForces();

  return EvalErrorCheck();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
bool STR::MODELEVALUATOR::Structure::ApplyForceExternal()
{
  CheckInitSetup();

  // Set to default value, because it is unnecessary for the
  // EvaluateNeumann routine.
  EvalData().SetActionType(DRT::ELEMENTS::none);
  // set vector values needed by elements
  Discret().ClearState();
  Discret().SetState(0, "displacement", GState().GetDisN());
  if (EvalData().GetDampingType() == INPAR::STR::damp_material)
    Discret().SetState(0,"velocity", GState().GetVelN());
  Discret().SetState(0, "displacement new", GState().GetDisNp());
  EvaluateNeumann(GState().GetMutableFextNp(), Teuchos::null);

  return EvalErrorCheck();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
bool STR::MODELEVALUATOR::Structure::ApplyForceStiffExternal()
{
  CheckInitSetup();

  // set vector values needed by elements
  Discret().ClearState();
  Discret().SetState(0,"displacement",GState().GetDisN());

  if (EvalData().GetDampingType() == INPAR::STR::damp_material)
    Discret().SetState(0,"velocity", GState().GetVelN());

  // get load vector
  if (!TimInt().GetDataSDyn().GetLoadLin())
    EvaluateNeumann(GState().GetMutableFextNp(),Teuchos::null);
  else
  {
    Discret().SetState(0,"displacement new", GState().GetDisNp());
    /* Add the linearization of the external force to the stiffness
     * matrix. */
    EvaluateNeumann(GState().GetMutableFextNp(),Teuchos::rcpFromRef(*stiff_ptr_));
  }

  return EvalErrorCheck();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
bool STR::MODELEVALUATOR::Structure::ApplyForceStiffInternal()
{
  CheckInitSetup();
  // currently a fixed number of matrix and vector pointers are supported
  Teuchos::RCP<Epetra_Vector> eval_vec [3] =
      {Teuchos::null,Teuchos::null,Teuchos::null};
  Teuchos::RCP<LINALG::SparseOperator> eval_mat[2] =
       {Teuchos::null,Teuchos::null};

  // set vector values needed by elements
  Discret().ClearState();
  Discret().SetState(0,"residual displacement", dis_incr_ptr_);
  Discret().SetState(0,"displacement", GState().GetDisNp());
  Discret().SetState(0,"velocity", GState().GetVelNp());

  // set action types and evaluate matrices/vectors
  StaticContributions(&eval_mat[0],&eval_vec[0]);
  MaterialDampingContributions(&eval_mat[0]);
  if (masslin_type_!=INPAR::STR::ml_none )
    InertialContributions(&eval_mat[0],&eval_vec[0]);

  // evaluate
  EvaluateInternal(&eval_mat[0],&eval_vec[0]);

  // complete stiffness and mass matrix
  FillComplete();

  // evaluate inertial and viscous forces
  InertialAndViscousForces();

  return EvalErrorCheck();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::StaticContributions(
    Teuchos::RCP<LINALG::SparseOperator>* eval_mat,
    Teuchos::RCP<Epetra_Vector>* eval_vec)
{
  // action for elements
  EvalData().SetActionType(DRT::ELEMENTS::struct_calc_nlnstiff);
  // set default matrix
  eval_mat[0] = Teuchos::rcpFromRef(*stiff_ptr_);
  // set default force vector
  eval_vec[0] = GState().GetMutableFintNp();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::StaticContributions(
    Teuchos::RCP<Epetra_Vector>* eval_vec)
{
  // action for elements
  EvalData().SetActionType(DRT::ELEMENTS::struct_calc_internalforce);
  // set default force vector
  eval_vec[0] = GState().GetMutableFintNp();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::MaterialDampingContributions(
    Teuchos::RCP<LINALG::SparseOperator>* eval_mat)
{
  if (EvalData().GetDampingType()!=INPAR::STR::damp_material)
    return;

  // action for elements
  // (reset the action type to be independent of the calling order)
  EvalData().SetActionType(DRT::ELEMENTS::struct_calc_nlnstiff);
  // set the discretization state
  Discret().SetState(0,"velocity", GState().GetVelNp());
  // reset damping matrix
  Damp().Zero();
  // add the stiffness matrix as well (also for the ApplyForce case!)
  eval_mat[0] = Teuchos::rcpFromRef(*stiff_ptr_);
  // set damping matrix
  eval_mat[1] = GState().GetMutableDampMatrix();

  return;
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::InertialContributions(
    Teuchos::RCP<LINALG::SparseOperator>* eval_mat,
    Teuchos::RCP<Epetra_Vector>* eval_vec)
{
  CheckInitSetup();

  if ( TimInt().GetDataSDynPtr()->NeglectInertia() )
    return;

  // overwrite element action
  if (TimInt().GetDataSDyn().IsMassLumping())
    EvalData().SetActionType(DRT::ELEMENTS::struct_calc_nlnstifflmass);
  else
    EvalData().SetActionType(DRT::ELEMENTS::struct_calc_nlnstiffmass);

  // set the discretization state
  Discret().SetState(0,"velocity", GState().GetVelNp());
  Discret().SetState(0,"acceleration", GState().GetAccNp());
  // reset the mass matrix
  Mass().Zero();
  // set mass matrix
  eval_mat[1] = GState().GetMutableMassMatrix();
  // set inertial vector if necessary
  eval_vec[1] = GetInertialForce();

  return;
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::InertialContributions(
    Teuchos::RCP<Epetra_Vector>* eval_vec)
{
  CheckInitSetup();

  if ( masslin_type_ == INPAR::STR::ml_none or TimInt().GetDataSDynPtr()->NeglectInertia() )
    return;

  // overwrite element action
  EvalData().SetActionType(DRT::ELEMENTS::struct_calc_internalinertiaforce);
  // set the discretization state
  Discret().SetState(0,"velocity", GState().GetVelNp());
  Discret().SetState(0,"acceleration", GState().GetAccNp());

  // set inertial vector if necessary
  eval_vec[1] = GetInertialForce();

  return;
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::InertialAndViscousForces()
{
  CheckInitSetup();

  if (masslin_type_==INPAR::STR::ml_none)
  {
    // calculate the inertial force at t_{n+1}
    Mass().Multiply(false,
        *GState().GetAccNp(),FinertialNp());
  }

  // calculate the viscous/damping force at t_{n+1}
  if (EvalData().GetDampingType()!=INPAR::STR::damp_none)
  {
    if (not Damp().Filled())
      Damp().Complete();
    Damp().Multiply(false,
        *GState().GetVelNp(),FviscoNp());
  }
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::FillComplete()
{
  if (not stiff_ptr_->Filled())
    stiff_ptr_->Complete();

  if (not Mass().Filled())
    Mass().Complete();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::RayleighDampingMatrix()
{
  if (EvalData().GetDampingType()!=INPAR::STR::damp_rayleigh)
    return;

  const double& dampk =
      TimInt().GetDataSDyn().GetDampingStiffnessFactor();
  const double& dampm =
      TimInt().GetDataSDyn().GetDampingMassFactor();

  // damping matrix with initial stiffness
  Damp().Add(Stiff(),false,dampk,0.0);
  Damp().Add(Mass(),false,dampm,1.0);
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
Teuchos::RCP<Epetra_Vector> STR::MODELEVALUATOR::Structure::GetInertialForce()
{
  switch (masslin_type_)
  {
    case INPAR::STR::ml_rotations:
    case INPAR::STR::ml_standard:
    {
      FinertialNp().PutScalar(0.0);
      // set inertial force
      return GState().GetMutableFinertialNp();
      break;
    }
    case INPAR::STR::ml_none:
      // do nothing
      break;
    default:
      dserror("Unknown mass linearization type!");
      exit(EXIT_FAILURE);
  }

  return Teuchos::null;
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::WriteOutputRuntimeVtk() const
{
  if ( vtu_writer_ptr_ != Teuchos::null )
    WriteOutputRuntimeVtkStructure();


  // write special output for beams if desired
  if ( beam_vtu_writer_ptr_ != Teuchos::null )
    WriteOutputRuntimeVtkBeams();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::WriteOutputRuntimeVtkStructure() const
{
  // get the parameter container object
  const STR::TIMINT::ParamsRuntimeVtkOutput & vtu_output_params =
      * GInOutput().GetRuntimeVtkOutputParams();


  // export displacement state to column format
  const DRT::Discretization& discret = dynamic_cast<const DRT::Discretization&>( Discret() );
  Teuchos::RCP<Epetra_Vector> disn_col = Teuchos::rcp( new Epetra_Vector(
      *discret.DofColMap(), true ) );
  LINALG::Export( *GState().GetDisN(), *disn_col );

  // Todo: we need a better upper bound for total number of time steps here
  // however, this 'only' affects the number of leading zeros in the vtk file names
  const unsigned int num_timesteps_in_simulation_upper_bound = 1000000;

  // initialize the writer object with current displacement state
  vtu_writer_ptr_->Initialize(
      Teuchos::rcp_dynamic_cast<DRT::Discretization>(
        const_cast<STR::MODELEVALUATOR::Structure*>(this)->DiscretPtr(), true ),
        num_timesteps_in_simulation_upper_bound,
        vtu_output_params.WriteBinaryOutput() );

  // reset time and time step of the writer object
  vtu_writer_ptr_->ResetTimeAndTimeStep( GState().GetTimeN(), GState().GetStepN() );


  // append all desired output data to the writer object's storage

  // append displacement if desired
  if ( vtu_output_params.OutputDisplacementState() )
    vtu_writer_ptr_->AppendDofBasedResultDataVector( disn_col, 3, 0, "displacement" );


  // finalize everything and write all required VTU files to filesystem
  vtu_writer_ptr_->WriteFiles();


  // Todo: this will not work as expected yet in case you terminate your
  // simulation by strg + c or in case of a restart
  vtu_writer_ptr_->WriteCollectionFileOfAllWrittenFiles();

}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::WriteOutputRuntimeVtkBeams() const
{
  // get the parameter container object
  const DRT::ELEMENTS::BeamRuntimeVtuOutputParams & beam_vtu_output_params =
      * GInOutput().GetRuntimeVtkOutputParams()->GetBeamParams();


  // export displacement state to column format
  const DRT::Discretization& discret = dynamic_cast<const DRT::Discretization&>( Discret() );
  Teuchos::RCP<Epetra_Vector> disn_col = Teuchos::rcp( new Epetra_Vector(
      *discret.DofColMap(), true ) );
  LINALG::Export( *GState().GetDisN(), *disn_col );

  // Todo: we need a better upper bound for total number of time steps here
  // however, this 'only' affects the number of leading zeros in the vtk file names
  const unsigned int num_timesteps_in_simulation_upper_bound = 1000000;


  // get bounding box object only if periodic boundaries are active
  Teuchos::RCP<GEO::MESHFREE::BoundingBox> bounding_box_ptr = Teuchos::null;

  bounding_box_ptr = TimInt().GetDataSDynPtr()->GetPeriodicBoundingBox();


  // initialize the writer object with current displacement state
  beam_vtu_writer_ptr_->Initialize(
      Teuchos::rcp_dynamic_cast<DRT::Discretization>(
        const_cast<STR::MODELEVALUATOR::Structure*>(this)->DiscretPtr(), true ),
        disn_col,
        beam_vtu_output_params.UseAbsolutePositions(),
        bounding_box_ptr,
        num_timesteps_in_simulation_upper_bound,
        GInOutput().GetRuntimeVtkOutputParams()->WriteBinaryOutput() );

  // reset time and time step of the writer object
  beam_vtu_writer_ptr_->ResetTimeAndTimeStep( GState().GetTimeN(), GState().GetStepN() );


  // append all desired output data to the writer object's storage
  beam_vtu_writer_ptr_->AppendElementOwningProcessor();

  // append beam radius
  beam_vtu_writer_ptr_->AppendElementCircularCrossSectionRadius();

  // append displacement if desired
  if ( GInOutput().GetRuntimeVtkOutputParams()->OutputDisplacementState() )
    beam_vtu_writer_ptr_->AppendDisplacementField( disn_col );

  // append triads if desired
  if ( beam_vtu_output_params.IsWriteTriadVisualizationPoints() )
    beam_vtu_writer_ptr_->AppendTriadField( disn_col );

  // append material cross-section strains if desired
  if ( beam_vtu_output_params.IsWriteMaterialStrainsGaussPoints() )
    beam_vtu_writer_ptr_->AppendGaussPointMaterialCrossSectionStrains();

  // append material cross-section stresses if desired
  if ( beam_vtu_output_params.IsWriteMaterialStressesGaussPoints() )
    beam_vtu_writer_ptr_->AppendGaussPointMaterialCrossSectionStresses();


  // finalize everything and write all required VTU files to filesystem
  beam_vtu_writer_ptr_->WriteFiles();


  // Todo: this will not work as expected yet in case you terminate your
  // simulation by strg + c or in case of a restart
  beam_vtu_writer_ptr_->WriteCollectionFileOfAllWrittenFiles();

}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::EvaluateInternal(
    Teuchos::RCP<LINALG::SparseOperator>* eval_mat,
    Teuchos::RCP<Epetra_Vector>* eval_vec)
{
  PreEvaluateInternal();

  Teuchos::ParameterList p;
  p.set<Teuchos::RCP<DRT::ELEMENTS::ParamsInterface> >("interface",
      EvalDataPtr());

  EvaluateInternal(p,eval_mat,eval_vec);
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::EvaluateInternal(
    Teuchos::ParameterList& p,
    Teuchos::RCP<LINALG::SparseOperator>* eval_mat,
    Teuchos::RCP<Epetra_Vector>* eval_vec)
{
  if (p.numParams()>1)
    dserror("Please use the STR::ELEMENTS::Interface and its derived "
        "classes to set and get parameters.");
  if (not p.INVALID_TEMPLATE_QUALIFIER
        isType< Teuchos::RCP<DRT::ELEMENTS::ParamsInterface> > ("interface"))
    dserror("The given parameter has the wrong type!");

  // write data to the parameter list.
  // this is about to go, once the old time integration is deleted
  ParamsInterface2ParameterList(EvalDataPtr(),p);

  Discret().Evaluate(p, eval_mat[0], eval_mat[1],
      eval_vec[0], eval_vec[1], eval_vec[2]);
  Discret().ClearState();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::EvaluateNeumann(
    const Teuchos::RCP<Epetra_Vector> & eval_vec,
    const Teuchos::RCP<LINALG::SparseOperator> & eval_mat)
{
  Teuchos::ParameterList p;
  p.set<Teuchos::RCP<DRT::ELEMENTS::ParamsInterface> >("interface",
      EvalDataPtr());
  EvaluateNeumann(p,eval_vec,eval_mat);
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::EvaluateNeumann(
    Teuchos::ParameterList& p,
    const Teuchos::RCP<Epetra_Vector> & eval_vec,
    const Teuchos::RCP<LINALG::SparseOperator> & eval_mat)
{
  if (p.numParams()>1)
    dserror("Please use the STR::ELEMENTS::Interface and its derived "
        "classes to set and get parameters.");
  if (not p.INVALID_TEMPLATE_QUALIFIER
        isType< Teuchos::RCP<DRT::ELEMENTS::ParamsInterface> > ("interface"))
    dserror("The given parameter has the wrong type!");
  Discret().EvaluateNeumann(p,eval_vec,eval_mat);
  Discret().ClearState();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::WriteRestart(
    IO::DiscretizationWriter& iowriter,
    const bool& forced_writerestart) const
{
  // write forces
  iowriter.WriteVector("fstructure_old",GState().GetFstructureOld());

  if (forced_writerestart)
    return;

  iowriter.WriteVector("displacement",GState().GetDisN());
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::ReadRestart(
    IO::DiscretizationReader& ioreader)
{
  CheckInitSetup();
  // read structural force vector
  ioreader.ReadVector(GState().GetMutableFstructureOld(),"fstructure_old");
  // read displacement field
  Teuchos::RCP<Epetra_Vector>& disnp = GState().GetMutableDisNp();
  ioreader.ReadVector(disnp,"displacement");
  GState().GetMutableMultiDis()->UpdateSteps(*disnp);
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::Predict(const INPAR::STR::PredEnum& pred_type)
{
  // set the element action
  EvalData().SetActionType(DRT::ELEMENTS::struct_calc_predict);
  EvalData().SetPredictorType(pred_type);

  // set the matrix and vector pointers to Teuchos::null
  Teuchos::RCP<Epetra_Vector> eval_vec [3] =
      {Teuchos::null,Teuchos::null,Teuchos::null};
  Teuchos::RCP<LINALG::SparseOperator> eval_mat[2] =
      {Teuchos::null,Teuchos::null};

  EvaluateInternal(eval_mat,eval_vec);

}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::RecoverState(
    const Epetra_Vector& xold,
    const Epetra_Vector& dir,
    const Epetra_Vector& xnew)
{
  CheckInitSetup();
  Reset(xnew);
  /* set the class internal displacement increment vector. Check if it is
   * meaningful/necessary in some cases, like incremental strains etc. */
  dis_incr_ptr_ = GState().ExtractDisplEntries(dir);
  // set vector values needed by elements
  Discret().ClearState();
  Discret().SetState(0,"residual displacement",dis_incr_ptr_);
  Discret().SetState(0,"displacement",GState().GetMutableDisNp());
  // set the element action
  EvalData().SetActionType(DRT::ELEMENTS::struct_calc_recover);
  // set the matrix and vector pointers to Teuchos::null
  Teuchos::RCP<Epetra_Vector> eval_vec [3] =
      {Teuchos::null,Teuchos::null,Teuchos::null};
  Teuchos::RCP<LINALG::SparseOperator> eval_mat[2] =
      {Teuchos::null,Teuchos::null};

  EvaluateInternal(eval_mat,eval_vec);
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::UpdateStepState(
    const double& timefac_n)
{
  CheckInitSetup();
  // update state
  // new displacements at t_{n+1} -> t_n
  //    D_{n} := D_{n+1}
  GState().GetMutableMultiDis()->UpdateSteps(DisNp());

  // new velocities at t_{n+1} -> t_{n}
  //    V_{n} := V_{n+1}
  GState().GetMutableMultiVel()->UpdateSteps(*GState().GetVelNp());

  // new at t_{n+1} -> t_n
  //    A_{n} := A_{n+1}
  GState().GetMutableMultiAcc()->UpdateSteps(*GState().GetAccNp());

  // new at t_{n+1} -> t_{n+timefac_n}
  //    F^{struct}_{n+timefac_n} := timefac_n * F^{struct}_{n+1}
  Teuchos::RCP<Epetra_Vector>& fstructold_ptr =
      GState().GetMutableFstructureOld();
  fstructold_ptr->Update(timefac_n,FintNp(),1.0);
  fstructold_ptr->Update(-timefac_n,FextNp(),1.0);

  // set the displacement increment back to zero
  dis_incr_ptr_->Scale(0.0);
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::UpdateStepElement()
{
  CheckInitSetup();
  // other parameters that might be needed by the elements
  EvalData().SetTotalTime(GState().GetTimeNp());
  EvalData().SetDeltaTime((*GState().GetDeltaTime())[0]);
  // action for elements
  EvalData().SetActionType(DRT::ELEMENTS::struct_calc_update_istep);
  // go to elements
  Discret().ClearState();
  Discret().SetState("displacement",GState().GetDisN());

  // set dummy evaluation vectors and matrices
  Teuchos::RCP<Epetra_Vector> eval_vec [3] =
      {Teuchos::null,Teuchos::null,Teuchos::null};
  Teuchos::RCP<LINALG::SparseOperator> eval_mat[2] =
      {Teuchos::null,Teuchos::null};
  EvaluateInternal(eval_mat,eval_vec);
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::DetermineStressStrain()
{
  CheckInitSetup();

  if (GInOutput().GetStressOutputType() == INPAR::STR::stress_none and
      GInOutput().GetCouplingStressOutputType() == INPAR::STR::stress_none and
      GInOutput().GetStrainOutputType() == INPAR::STR::strain_none and
      GInOutput().GetPlasticStrainOutputType() == INPAR::STR::strain_none)
    return;

  // set all parameters in the evaluation data container
  EvalData().SetActionType(DRT::ELEMENTS::struct_calc_stress);
  EvalData().SetTotalTime(GState().GetTimeNp());
  EvalData().SetDeltaTime((*GState().GetDeltaTime())[0]);
  EvalData().SetStressData(Teuchos::rcp(new std::vector<char>()));
  EvalData().SetCouplingStressData(Teuchos::rcp(new std::vector<char>()));
  EvalData().SetStrainData(Teuchos::rcp(new std::vector<char>()));
  EvalData().SetPlasticStrainData(Teuchos::rcp(new std::vector<char>()));

  // set vector values needed by elements
  Discret().ClearState();
  Discret().SetState(0,"displacement",GState().GetDisNp());
  Discret().SetState(0,"residual displacement", dis_incr_ptr_);

  // set dummy evaluation vectors and matrices
  Teuchos::RCP<Epetra_Vector> eval_vec [3] =
      {Teuchos::null,Teuchos::null,Teuchos::null};
  Teuchos::RCP<LINALG::SparseOperator> eval_mat[2] =
      {Teuchos::null,Teuchos::null};

  EvaluateInternal(eval_mat,eval_vec);
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::DetermineEnergy()
{
  CheckInitSetup();
  dserror("Not yet implemented!");
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::OutputStepState(
    IO::DiscretizationWriter& iowriter) const
{
  CheckInitSetup();

  // write output every iteration for debug purposes
  if (GInOutput().IsOutputEveryIter())
  {
    iowriter.WriteVector("displacement",GState().GetDisNp());
    /* for visualization of vel and acc do not forget to comment in
     * corresponding lines in StructureEnsightWriter */
    if (GInOutput().IsWriteVelAcc())
    {
      iowriter.WriteVector("velocity", GState().GetVelNp());
      iowriter.WriteVector("acceleration", GState().GetAccNp());
    }
    return;
  }
  else
  {
    // write default output...
    iowriter.WriteVector("displacement", GState().GetDisN());

    /* for visualization of vel and acc do not forget to comment in
     * corresponding lines in StructureEnsightWriter */
    if (GInOutput().IsWriteVelAcc())
    {
      iowriter.WriteVector("velocity", GState().GetVelN());
      iowriter.WriteVector("acceleration", GState().GetAccN());
    }
  }


  // write output of VTK visualization data at runtime if desired
  if ( GInOutput().GetRuntimeVtkOutputParams() != Teuchos::null and
      GState().GetStepN() %
          GInOutput().GetRuntimeVtkOutputParams()->OutputIntervalInSteps() == 0 )
  {
    WriteOutputRuntimeVtk();
  }

}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::ResetStepState()
{
  CheckInitSetup();

  // reset disp, vel, acc state vector
  GStatePtr()->GetMutableDisNp()->Update(1.0, (*GStatePtr()->GetDisN()), 0.0);
  GStatePtr()->GetMutableVelNp()->Update(1.0, (*GStatePtr()->GetVelN()), 0.0);
  GStatePtr()->GetMutableAccNp()->Update(1.0, (*GStatePtr()->GetAccN()), 0.0);

  // other parameters that might be needed by the elements
  EvalData().SetTotalTime(GState().GetTimeNp());
  EvalData().SetDeltaTime((*GState().GetDeltaTime())[0]);
  // action for elements
  EvalData().SetActionType(DRT::ELEMENTS::struct_calc_reset_istep);

  // set dummy evaluation vectors and matrices
  Teuchos::RCP<Epetra_Vector> eval_vec [3] =
      {Teuchos::null,Teuchos::null,Teuchos::null};
  Teuchos::RCP<LINALG::SparseOperator> eval_mat[2] =
      {Teuchos::null,Teuchos::null};
  EvaluateInternal(eval_mat,eval_vec);

  DiscretPtr()->ClearState();

  return;
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
Teuchos::RCP<const Epetra_Map> STR::MODELEVALUATOR::Structure::
    GetBlockDofRowMapPtr() const
{
  CheckInitSetup();
  return GState().DofRowMap();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
Teuchos::RCP<const Epetra_Vector> STR::MODELEVALUATOR::Structure::
    GetCurrentSolutionPtr() const
{
  CheckInit();
  return GState().GetDisNp();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
Teuchos::RCP<const Epetra_Vector> STR::MODELEVALUATOR::Structure::
    GetLastTimeStepSolutionPtr() const
{
  CheckInit();
  return GState().GetDisN();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::PostOutput()
{
  CheckInitSetup();
 // empty

  return;
} // PostOutput()

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
Epetra_Vector & STR::MODELEVALUATOR::Structure::FintNp()
{
  CheckInit();
  if ( GState().GetMutableFintNp().is_null() )
    dserror( "NULL pointer!" );

  return *GState().GetMutableFintNp();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
const Epetra_Vector & STR::MODELEVALUATOR::Structure::FintNp() const
{
  CheckInit();
  if ( GState().GetFintNp().is_null() )
    dserror( "NULL pointer!" );

  return *GState().GetFintNp();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
Epetra_Vector & STR::MODELEVALUATOR::Structure::FextNp()
{
  CheckInit();
  if ( GState().GetMutableFextNp().is_null() )
    dserror( "NULL pointer!" );

  return *GState().GetMutableFextNp();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
const Epetra_Vector & STR::MODELEVALUATOR::Structure::FextNp() const
{
  CheckInit();
  if ( GState().GetFextNp().is_null() )
    dserror( "NULL pointer!" );

  return *GState().GetFextNp();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
Epetra_Vector & STR::MODELEVALUATOR::Structure::FinertialNp()
{
  CheckInit();
  if ( GState().GetMutableFinertialNp().is_null() )
    dserror( "NULL pointer!" );

  return *GState().GetMutableFinertialNp();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
const Epetra_Vector & STR::MODELEVALUATOR::Structure::FinertialNp() const
{
  CheckInit();
  if ( GState().GetFinertialNp().is_null() )
    dserror( "NULL pointer!" );

  return *GState().GetFinertialNp();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
Epetra_Vector & STR::MODELEVALUATOR::Structure::FviscoNp()
{
  CheckInit();
  if ( GState().GetMutableFviscoNp().is_null() )
    dserror( "NULL pointer!" );

  return *GState().GetMutableFviscoNp();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
const Epetra_Vector & STR::MODELEVALUATOR::Structure::FviscoNp() const
{
  CheckInit();
  if ( GState().GetFviscoNp().is_null() )
    dserror( "NULL pointer!" );

  return *GState().GetFviscoNp();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
Epetra_Vector & STR::MODELEVALUATOR::Structure::DisNp()
{
  CheckInit();
  if ( GState().GetMutableDisNp().is_null() )
    dserror( "NULL pointer!" );

  return *GState().GetMutableDisNp();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
const Epetra_Vector & STR::MODELEVALUATOR::Structure::DisNp() const
{
  CheckInit();
  if ( GState().GetDisNp().is_null() )
    dserror( "NULL pointer!" );

  return *GState().GetDisNp();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
LINALG::SparseMatrix & STR::MODELEVALUATOR::Structure::Stiff() const
{
  CheckInit();
  if ( not stiff_ptr_ )
    dserror( "NULL pointer!" );

  return *stiff_ptr_;
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
LINALG::SparseOperator & STR::MODELEVALUATOR::Structure::Mass()
{
  CheckInit();
  if ( GState().GetMutableMassMatrix().is_null() )
    dserror( "NULL pointer!" );

  return *GState().GetMutableMassMatrix();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
const LINALG::SparseOperator & STR::MODELEVALUATOR::Structure::Mass() const
{
  CheckInit();
  if ( GState().GetMassMatrix().is_null() )
    dserror( "NULL pointer!" );

  return *GState().GetMassMatrix();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
LINALG::SparseOperator & STR::MODELEVALUATOR::Structure::Damp()
{
  CheckInit();
  if ( GState().GetMutableDampMatrix().is_null() )
    dserror( "NULL pointer!" );

  return *GState().GetMutableDampMatrix();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
const LINALG::SparseOperator & STR::MODELEVALUATOR::Structure::Damp() const
{
  CheckInit();
  if ( GState().GetDampMatrix().is_null() )
    dserror( "NULL pointer!" );

  return *GState().GetDampMatrix();
}

/*----------------------------------------------------------------------------*
 *----------------------------------------------------------------------------*/
void STR::MODELEVALUATOR::Structure::ParamsInterface2ParameterList(
    Teuchos::RCP<STR::MODELEVALUATOR::Data> interface_ptr,
    Teuchos::ParameterList& params)
{
  if (interface_ptr==Teuchos::null)
    dserror("ParamsInterface pointer not set");

  params.set<double>("delta time",interface_ptr->GetDeltaTime());
  params.set<double>("total time",interface_ptr->GetTotalTime());
  params.set<double>("timintfac_dis",interface_ptr->GetTimIntFactorDisp());
  params.set<double>("timintfac_vel",interface_ptr->GetTimIntFactorVel());

  DRT::ELEMENTS::ActionType act = interface_ptr->GetActionType();
  std::string action;
  switch(act)
  {
  case  DRT::ELEMENTS::struct_calc_linstiff                  :   action="calc_struct_linstiff"                 ;   break;
  case  DRT::ELEMENTS::struct_calc_nlnstiff                  :   action="calc_struct_nlnstiff"                 ;   break;
  case  DRT::ELEMENTS::struct_calc_internalforce             :   action="calc_struct_internalforce"            ;   break;
  case  DRT::ELEMENTS::struct_calc_linstiffmass              :   action="calc_struct_linstiffmass"             ;   break;
  case  DRT::ELEMENTS::struct_calc_nlnstiffmass              :   action="calc_struct_nlnstiffmass"             ;   break;
  case  DRT::ELEMENTS::struct_calc_nlnstifflmass             :   action="calc_struct_nlnstifflmass"            ;   break;
  case  DRT::ELEMENTS::struct_calc_nlnstiff_gemm             :   action="calc_struct_nlnstiff_gemm"            ;   break;
  case  DRT::ELEMENTS::struct_calc_stress                    :   action="calc_struct_stress"                   ;   break;
  case  DRT::ELEMENTS::struct_calc_eleload                   :   action="calc_struct_eleload"                  ;   break;
  case  DRT::ELEMENTS::struct_calc_fsiload                   :   action="calc_struct_fsiload"                  ;   break;
  case  DRT::ELEMENTS::struct_calc_update_istep              :   action="calc_struct_update_istep"             ;   break;
  case  DRT::ELEMENTS::struct_calc_reset_istep               :   action="calc_struct_reset_istep"              ;   break;
  case  DRT::ELEMENTS::struct_calc_store_istep               :   action="calc_struct_store_istep"              ;   break;
  case  DRT::ELEMENTS::struct_calc_recover_istep             :   action="calc_struct_recover_istep"            ;   break;
  case  DRT::ELEMENTS::struct_calc_reset_all                 :   action="calc_struct_reset_all"                ;   break;
  case  DRT::ELEMENTS::struct_calc_energy                    :   action="calc_struct_energy"                   ;   break;
  case  DRT::ELEMENTS::struct_calc_errornorms                :   action="calc_struct_errornorms"               ;   break;
  case  DRT::ELEMENTS::multi_init_eas                        :   action="multi_eas_init"                       ;   break;
  case  DRT::ELEMENTS::multi_set_eas                         :   action="multi_eas_set"                        ;   break;
  case  DRT::ELEMENTS::multi_readrestart                     :   action="multi_readrestart"                    ;   break;
  case  DRT::ELEMENTS::multi_calc_dens                       :   action="multi_calc_dens"                      ;   break;
  case  DRT::ELEMENTS::struct_postprocess_stress             :   action="postprocess_stress"                   ;   break;
  case  DRT::ELEMENTS::struct_update_prestress               :   action="calc_struct_prestress_update"         ;   break;
  case  DRT::ELEMENTS::inversedesign_update                  :   action="calc_struct_inversedesign_update"     ;   break;
  case  DRT::ELEMENTS::inversedesign_switch                  :   action="calc_struct_inversedesign_switch"     ;   break;
  case  DRT::ELEMENTS::struct_calc_global_gpstresses_map     :   action="calc_global_gpstresses_map"           ;   break;
  case  DRT::ELEMENTS::struct_interpolate_velocity_to_point  :   action="interpolate_velocity_to_given_point"  ;   break;
  case  DRT::ELEMENTS::struct_calc_mass_volume               :   action="calc_struct_mass_volume"              ;   break;
  case  DRT::ELEMENTS::struct_calc_recover                   :   action="calc_struct_recover"                  ;   break;
  case  DRT::ELEMENTS::struct_calc_predict                   :   action="calc_struct_predict"                  ;   break;
  default                                                    :   action="unknown"                              ; break;
  }
  params.set<std::string>("action",action);

  params.set<Teuchos::RCP<std::vector<char> > >("stress",interface_ptr->MutableStressDataPtr());
  params.set<Teuchos::RCP<std::vector<char> > >("strain",interface_ptr->MutableStrainDataPtr());
  params.set<Teuchos::RCP<std::vector<char> > >("plstrain",interface_ptr->MutablePlasticStrainDataPtr());
  params.set<int>("iostress",   (int)interface_ptr->GetStressOutputType());
  params.set<int>("iostrain",   (int)interface_ptr->GetStrainOutputType());
  params.set<int>("ioplstrain", (int)interface_ptr->GetPlasticStrainOutputType());
}
