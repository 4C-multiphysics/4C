/*!----------------------------------------------------------------------
\file fs3i_partitioned.H
\brief H-file associated with general algorithmic routines for
       partitioned solution approaches to fluid-structure-scalar-scalar
       interaction (FS3I), that is, algorithmic routines not specifically
       related to partitioned solution approaches to one -or
       two-way-coupled problem configurations, respectively

<pre>
Maintainers: Lena Yoshihara & Volker Gravemeier
             {yoshihara,vgravem}@lnm.mw.tum.de
             089/289-15303,-15245
</pre>

*----------------------------------------------------------------------*/


#ifndef PARTFS3I_H
#define PARTFS3I_H

#include <Teuchos_RCP.hpp>
#include <Epetra_Vector.h>
#include "../drt_inpar/drt_validparameters.H"


#include "fs3i.H"

// forward declarations

namespace ADAPTER
{
  class Coupling;
  class ScaTraBaseAlgorithm;
}

namespace FSI
{
  class Monolithic;

  namespace UTILS
  {
    class MatrixRowTransform;
    class MatrixColTransform;
    class MatrixRowColTransform;
  }
}

namespace LINALG
{
  class MultiMapExtractor;
  class BlockSparseMatrixBase;
  class SparseMatrix;
  class Solver;
}


namespace FS3I
{
  class PartFS3I : public FS3I_Base
  {

  public:

    //! constructor of base class for partitioned FS3I
    PartFS3I(const Epetra_Comm& comm);

    //! destructor of base class for partitioned FS3I
    virtual ~PartFS3I(){};

    //! @name overall FS3I system
    //@{

    //! time loop to be defined in inherited classes (structure depends on
    //! considered coupling, i.e. one-way or two-way)
    virtual void Timeloop() = 0;

    //! flag whether time loop should be finished
    bool NotFinished() { return step_ < numstep_ and time_ <= timemax_; };

    //! read and set fields needed for restart
    virtual void ReadRestart();

    /// redistribute the  FPSI interface, if running on parallel. Just needed in the case of FPS3I
    void RedistributeInterface() {;} ;

    //! set-up of FSI and ScaTra systems
    virtual void SetupSystem();

    //! test results for individual fields
    virtual void TestResults(const Epetra_Comm& comm);

    //! information transfer FSI -> ScaTra
    void SetFSISolution();

    /// set scatra solution on structure field
    void SetStructScatraSolution() ;

    //! check convergence of monolithic ScaTra problem (depends on which
    //coupling is considered)
    virtual bool ScatraConvergenceCheck(int itnum) = 0;

    //! return communicator
    const Epetra_Comm& Comm() const { return comm_; }

    /// extract fluid convective and structure convective velocities
    void ExtractVel(std::vector<Teuchos::RCP<const Epetra_Vector> >& vel,
                    std::vector<Teuchos::RCP<const Epetra_Vector> >& convel);

    void SetVelocityFields();

    //! routine for preparing time step to be defined in inherited classes
    //! (structure depends on coupling, that is, either one- or two-way)
    virtual void PrepareTimeStep() = 0;

    void SetMeshDisp();

    ///provide wall shear stresses from FPSI subproblem for scatra subproblem
    void SetWallShearStresses();

    /// extract Wall Shear Stresses at the interface
    void ExtractWSS(std::vector<Teuchos::RCP<const Epetra_Vector> >& wss);

    Teuchos::ParameterList& ManipulateFsiTimeParams(const Teuchos::ParameterList& fs3idyn);

    //@}

  protected:

    /// fsi algorithm
    Teuchos::RCP<FSI::Monolithic> fsi_;

  private:

    /// communication (mainly for screen output)
    const Epetra_Comm& comm_;

  };
}

#endif
