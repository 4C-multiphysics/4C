/*----------------------------------------------------------------------*/
/*! \file

\brief MueLu iteration factory class
\level 2
\maintainer Matthias Mayr

*----------------------------------------------------------------------*/

#ifndef MUELU_ITERATIONAFACTORY_DECL_HPP_
#define MUELU_ITERATIONAFACTORY_DECL_HPP_

#include <Trilinos_version.h>
#if !(TRILINOS_MAJOR_MINOR_VERSION >= 121400) || defined(HAVE_MueLuContact)

#include <Xpetra_Map_fwd.hpp>
#include <Xpetra_Vector_fwd.hpp>
#include <Xpetra_Matrix_fwd.hpp>
#include <Xpetra_CrsMatrixWrap_fwd.hpp>

#include "MueLu_ConfigDefs.hpp"
#include "MueLu_SingleLevelFactoryBase.hpp"

namespace MueLu
{
  /*!
    @class IterationAFactory class.
    @brief builds a filtered matrix object "A" using the input matrix "A" where
           the rows of a given map (mapName generated by mapFact_) are changed to an identity block.

           This factory builds a filtered matrix "A" using the input matrix "A" where
           the rows of a user-given map a filtered to be an identity block (zero rows with
           one on the diagonal). This filtered matrix is used as iteration matrix within
           smoothing methods (like Jacobi and GaussSeidel). This way, problematic rows
           (non diagonal-dominant rows or rows with zeros on the diagonal) can be marked
           for being ignored by the iterative smoothing methods, by putting artificial
           "Dirichlet" boundaries in the matrix.

           \note The user only provides a name for the row map, to be filtered and a
           generating factory. The MapTransferFactory can be used to transfer the map
           information to the next coarser levels.

  */

  template <class Scalar, class LocalOrdinal, class GlobalOrdinal, class Node>
  class IterationAFactory : public SingleLevelFactoryBase
  {
#undef MUELU_ITERATIONAFACTORY_SHORT
#include "MueLu_UseShortNames.hpp"

   public:
    //! @name Constructors/Destructors.
    //@{

    //! Constructor.
    IterationAFactory();

    //! Destructor.
    virtual ~IterationAFactory();
    //@}

    //! Input
    //@{
    RCP<const ParameterList> GetValidParameterList() const;

    void DeclareInput(Level &currentLevel) const;

    //@}

    //@{
    //! @name Build methods.

    //! Build an object with this factory.
    void Build(Level &currentLevel) const;

    //@}

   private:
  };  // class IterationAFactory

}  // namespace MueLu

#define MUELU_ITERATIONAFACTORY_SHORT
#endif  // HAVE_MueLuContact

#endif /* MUELU_ITERATIONAFACTORY_DECL_HPP_ */
