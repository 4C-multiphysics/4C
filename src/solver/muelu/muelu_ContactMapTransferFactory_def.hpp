/*
 * MueLu_ContactMapTransferFactory_def.hpp
 *
 *  Created on: Aug 2, 2012
 *      Author: wiesner
 */

#ifndef MUELU_CONTACTMAPTRANSFERFACTORY_DEF_HPP_
#define MUELU_CONTACTMAPTRANSFERFACTORY_DEF_HPP_

#ifdef HAVE_MueLu

#include "muelu_ContactMapTransferFactory_decl.hpp"

#include <Xpetra_Matrix.hpp>
#include <Xpetra_CrsMatrixWrap.hpp>
#include <Xpetra_MapFactory.hpp>
#include <Xpetra_VectorFactory.hpp>

#include "MueLu_Level.hpp"
#include "MueLu_Monitor.hpp"

namespace MueLu {

  template <class Scalar, class LocalOrdinal, class GlobalOrdinal, class Node, class LocalMatOps>
  ContactMapTransferFactory<Scalar, LocalOrdinal, GlobalOrdinal, Node, LocalMatOps>::ContactMapTransferFactory(std::string mapName, Teuchos::RCP<const FactoryBase> PtentFact, Teuchos::RCP<const FactoryBase> mapFact)
  : mapName_(mapName), PtentFact_(PtentFact), mapFact_(mapFact)
    {

    }

  template <class Scalar, class LocalOrdinal, class GlobalOrdinal, class Node, class LocalMatOps>
  ContactMapTransferFactory<Scalar, LocalOrdinal, GlobalOrdinal, Node, LocalMatOps>::~ContactMapTransferFactory() {}

  template <class Scalar, class LocalOrdinal, class GlobalOrdinal, class Node, class LocalMatOps>
  void ContactMapTransferFactory<Scalar, LocalOrdinal, GlobalOrdinal, Node, LocalMatOps>::DeclareInput(Level &fineLevel, Level &coarseLevel) const {
    fineLevel.DeclareInput(mapName_,mapFact_.get(),this);
    coarseLevel.DeclareInput("P", PtentFact_.get(),this);
  }

  template <class Scalar, class LocalOrdinal, class GlobalOrdinal, class Node, class LocalMatOps>
  void ContactMapTransferFactory<Scalar, LocalOrdinal, GlobalOrdinal, Node, LocalMatOps>::Build(Level & fineLevel, Level & coarseLevel) const {
    typedef Xpetra::Matrix<Scalar, LocalOrdinal, GlobalOrdinal, Node, LocalMatOps> OperatorClass; //TODO
    typedef Xpetra::CrsMatrixWrap<Scalar, LocalOrdinal, GlobalOrdinal, Node, LocalMatOps> CrsOOperator; //TODO
    typedef Xpetra::Map<LocalOrdinal, GlobalOrdinal, Node> MapClass;
    typedef Xpetra::MapFactory<LocalOrdinal, GlobalOrdinal, Node> MapFactoryClass;
    typedef Xpetra::Vector<Scalar, LocalOrdinal, GlobalOrdinal, Node> VectorClass;
    typedef Xpetra::VectorFactory<Scalar, LocalOrdinal, GlobalOrdinal, Node> VectorFactoryClass;

    Monitor m(*this, "Contact Map transfer factory");

    if (fineLevel.IsAvailable(mapName_, mapFact_.get())==false) {
        GetOStream(Runtime0, 0) << "ContactMapTransferFactory::Build: User provided map " << mapName_ << " not found in Level class." << std::endl;
        //fineLevel.Set("SegAMapExtractor", mapextractor_, MueLu::NoFactory::get());
    }
    TEUCHOS_TEST_FOR_EXCEPTION(!coarseLevel.IsAvailable("P",PtentFact_.get()),Exceptions::RuntimeError, "MueLu::ContactMapTransferFactory::Build(): P (generated by TentativePFactory) not available.");

    // fetch map extractor from level
    RCP<const MapClass> transferMap = fineLevel.Get< RCP<const MapClass> >(mapName_,mapFact_.get());

    //GetOStream(Runtime1, 0) << *transferMap << std::endl;

    RCP<OperatorClass> Ptent = coarseLevel.Get<RCP<OperatorClass> >("P",PtentFact_.get());


    std::vector<GlobalOrdinal > coarseMapGids;

    // loop over local rows of Ptent
    for(size_t row=0; row<Ptent->getNodeNumRows(); row++) {

      GlobalOrdinal grid = Ptent->getRowMap()->getGlobalElement(row);
      if(transferMap->isNodeGlobalElement(grid)) {

        Teuchos::ArrayView<const LocalOrdinal> indices;
        Teuchos::ArrayView<const Scalar> vals;
        Ptent->getLocalRowView(row, indices, vals);

        for(size_t i=0; i<(size_t)indices.size(); i++) {
          // mark all columns in Ptent(grid,*) to be coarse Dofs of next level transferMap
          GlobalOrdinal gcid = Ptent->getColMap()->getGlobalElement(indices[i]);
          coarseMapGids.push_back(gcid);
        }
      } // end if isNodeGlobalElement(grid)
    }

    // build column maps
    std::sort(coarseMapGids.begin(), coarseMapGids.end());
    coarseMapGids.erase(std::unique(coarseMapGids.begin(), coarseMapGids.end()), coarseMapGids.end());
    Teuchos::ArrayView<GlobalOrdinal> coarseMapGidsView (&coarseMapGids[0],coarseMapGids.size());
    RCP<const Map> coarseTransferMap = MapFactoryClass::Build(Ptent->getColMap()->lib(), coarseMapGidsView.size(), coarseMapGidsView, Ptent->getColMap()->getIndexBase(), Ptent->getColMap()->getComm());

    //std::cout << "length of coarse transfer map = " << coarseTransferMap->getGlobalNumElements() << std::endl;

    // store map extractor in coarse level
    coarseLevel.Set(mapName_, coarseTransferMap, mapFact_.get());


  }


} // namespace MueLu

#endif // HAVE_MueLu


#endif /* MUELU_CONTACTMAPTRANSFERFACTORY_DEF_HPP_ */
