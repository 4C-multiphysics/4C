/*----------------------------------------------------------------------*/
/*!
\file stru_aux.H

\brief structure-specific utils and auxiliary functions

<pre>
Maintainer: Thomas Kl√∂ppel
            kloeppel@lnm.mw.tum.de
            http://www.lnm.mw.tum.de
            089 - 289-15257
</pre>
*/
/*----------------------------------------------------------------------*/


#ifndef STRUCTURE_UTILS_MAPEXTRACTOR_H
#define STRUCTURE_UTILS_MAPEXTRACTOR_H

#include "../linalg/linalg_mapextractor.H"
#include "../drt_inpar/inpar_structure.H"

// forward declarations
namespace DRT
{
  class Discretization;
}

namespace STR
{
namespace AUX
{

  /// Determine norm of force residual
  double CalculateVectorNorm
  (
    const enum INPAR::STR::VectorNorm norm,  ///< norm to use
    const Teuchos::RCP<Epetra_Vector> vect  ///< the vector of interest
  );

  /// specific MultiMapExtractor to handle the fluid field
  class MapExtractor : public LINALG::MultiMapExtractor
  {
  public:

    enum {
      cond_other     = 0,
      cond_fsi       = 1,
      cond_lung_asi  = 2
    };

    /// setup the whole thing
    void Setup(const DRT::Discretization& dis,  const Epetra_Map& fullmap);

    /// get all element gids those nodes are touched by any condition
    Teuchos::RCP<std::set<int> > ConditionedElementMap(const DRT::Discretization& dis) const;

    MAP_EXTRACTOR_VECTOR_METHODS(Other, cond_other)
    MAP_EXTRACTOR_VECTOR_METHODS(FSICond,cond_fsi)
    MAP_EXTRACTOR_VECTOR_METHODS(LungASICond,cond_lung_asi)
  };
}
}

#endif
