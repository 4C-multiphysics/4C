/*----------------------------------------------------------------------*/
/*!
\file adapter_fluid_xfem.H

\brief

<pre>
Maintainer: Axel Gerstenberger
            gerstenberger@lnm.mw.tum.de
            http://www.lnm.mw.tum.de
            089 - 289-15236
</pre>
*/
/*----------------------------------------------------------------------*/
#ifdef CCADISCRET

#ifndef ADAPTER_FLUID_XFEM_H
#define ADAPTER_FLUID_XFEM_H

#include "adapter_fluid_moving_boundary.H"
#include "adapter_fluid_base_algorithm.H"
#include "adapter_xfluid_impl.H"
#include "adapter_coupling.H"

namespace ADAPTER
{

  /// fluid with moving interfaces implemented by the XFEM
  class FluidXFEM : public FluidMovingBoundary
  {
  public:

    explicit FluidXFEM(const Teuchos::ParameterList& prbdyn,
                    std::string condname);

    /// fluid field
    Fluid& FluidField() { return fluid_.FluidField(); }
    const Fluid& FluidField() const { return fluid_.FluidField(); }

    XFluidImpl& XFluidField() { return Teuchos::dyn_cast<XFluidImpl>(fluid_.FluidField()); }
    const XFluidImpl& XFluidField() const { return Teuchos::dyn_cast<const XFluidImpl>(fluid_.FluidField()); }

    virtual Teuchos::RCP<DRT::Discretization> Discretization();
    virtual const FLD::UTILS::MapExtractor& Interface() const;

    virtual void PrepareTimeStep();
    void Evaluate(Teuchos::RCP<Epetra_Vector> idispstepinc, Teuchos::RCP<const Epetra_Vector> fluidstepinc);
    Teuchos::RCP<const Epetra_Vector> InitialGuess();
    Teuchos::RCP<const Epetra_Vector> RHS();
    Teuchos::RCP<LINALG::SparseMatrix> SystemMatrix();
    virtual Teuchos::RCP<const LINALG::MapExtractor> GetDBCMapExtractor();
    std::map<std::string,Teuchos::RCP<LINALG::SparseMatrix> > CouplingMatrices();
    std::map<std::string,Teuchos::RCP<Epetra_Vector> > CouplingVectors();
    virtual void Update();
    virtual void Output();
    virtual double ReadRestart(int step);

    virtual void NonlinearSolve(Teuchos::RCP<Epetra_Vector> idisp,Teuchos::RCP<Epetra_Vector> ivel);
    virtual Teuchos::RCP<Epetra_Vector> RelaxationSolve(Teuchos::RCP<Epetra_Vector> idisp,
                                                        double dt);

    virtual void RobinNonlinearSolve(Teuchos::RCP<Epetra_Vector> idisp,
						   Teuchos::RCP<Epetra_Vector> ivel,
						   Teuchos::RCP<Epetra_Vector> iforce);

    virtual Teuchos::RCP<Epetra_Vector> ExtractInterfaceForces();
    virtual Teuchos::RCP<Epetra_Vector> ExtractInterfaceForcesRobin();
    virtual Teuchos::RCP<Epetra_Vector> ExtractInterfaceFluidVelocity();
    virtual Teuchos::RCP<Epetra_Vector> ExtractInterfaceVeln();

    Teuchos::RCP<const Epetra_Map> DofRowMap();

    void DisplacementToVelocity(Teuchos::RCP<Epetra_Vector> fcx);
    void VelocityToDisplacement(Teuchos::RCP<Epetra_Vector> fcx);

    double ResidualScaling() { return FluidField().ResidualScaling(); }
    double TimeScaling() { return FluidField().TimeScaling(); }

    virtual int Itemax() const { return FluidField().Itemax(); }
    virtual void SetItemax(int itemax) { FluidField().SetItemax(itemax); }

    virtual Teuchos::RCP<Epetra_Vector> IntegrateInterfaceShape();

    virtual Teuchos::RCP<DRT::ResultTest> CreateFieldTest();

  protected:

    //Coupling& FluidAleFieldCoupling()             { return coupfa_; }
    //const Coupling& FluidAleFieldCoupling() const { return coupfa_; }

  private:

    FluidBaseAlgorithm fluid_;

    /// coupling of interface in to parallel distributions
    Coupling               icoupsf_;


  };

}

#endif
#endif
