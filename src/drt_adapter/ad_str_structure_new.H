/*
 * ad_str_structure_new.H
 *
 *  Created on: Sep 2, 2015
 *      Author: hiermeier
 */

#ifndef AD_STR_STRUCTURE_NEW_H_
#define AD_STR_STRUCTURE_NEW_H_

namespace ADAPTER {

  class StructureNew : public Field
  {
  public:
    /// virtual to get polymorph destruction
    virtual ~StructureNew();
  };  // class Structure

  /// structure field solver
  class StructureBaseAlgorithmNew
  {
  public:

    /// constructor
    explicit StructureBaseAlgorithmNew();

    /// virtual destructor to support polymorph destruction
    virtual ~StructureBaseAlgorithmNew();

    /// initialize all class internal variables
    virtual void Init(const Teuchos::ParameterList& prbdyn, Teuchos::ParameterList& sdyn, Teuchos::RCP<DRT::Discretization> actdis);

    /// setup
    virtual void Setup();

    /// structural field solver
    Teuchos::RCP<StructureNew> StructureField() { return structure_; }

  protected:

    const bool& IsInit() const { return isinit_; };

    const bool& IsSetup() const { return issetup_; };

  private:
    /// setup structure algorithm of STR::TimInt::Implicit or STR::TimInt::Explicit type
    void SetupTimInt();

    /// Set all found model types. This is e.g. necessary for the model evaluator.
    void SetModelTypes(
        std::vector<const enum INPAR::STR::ModelType>& modeltypes) const;

    /// Set different time integrator specific parameters in the different parameter lists
    void SetParams(
        Teuchos::ParameterList& ioflags,
        Teuchos::ParameterList& xparams,
        Teuchos::ParameterList& timeadaptivity
        );

    /// set the final structure time integrator object
    void SetStructure(
        const Teuchos::ParameterList& ioflags,
        const Teuchos::ParameterList& sdyn,
        const Teuchos::ParameterList& xparams,
        const Teuchos::ParameterList& timeadaptivity,
        Teuchos::RCP<STR::TimInt> timint);

    // create the adaptive time integrator wrapper
    void CreateAdaptiveWrapper(
        const Teuchos::ParameterList& ioflags,
        const Teuchos::ParameterList& sdyn,
        const Teuchos::ParameterList& xparams,
        const Teuchos::ParameterList& taflags,
        Teuchos::RCP<STR::TimInt> timint);

    // create the time integrator wrapper
    void CreateWrapper(Teuchos::RCP<STR::TimInt> timint);

    /// create linear solver for contact/meshtying problems
    /** \param Teuchos::RCP<DRT::Discretization> the discretization class with the corresponding structural elements
     *
     * returns a contact solver object.
     *
     * Per default the CONTACT SOLVER block from the dat file is used for generating the solver object.
     * The idea is, that this linear solver object is used whenever there is contact between (two) structures.
     * Otherwise the standard structural solver block is used (generated by <tt>CreateLinearSolver</tt>. So we can
     * use highly optimized solvers for symmetric pure structural problems, but choose a different solver for the
     * hard non-symmetric contact case. We automatically switch from CONTACT SOLVER (in case of contact) to STRUCT SOLVER
     * (pure structural problem, no contact) and back again.
     *
     * \note For contact/meshtying problems in the saddle-point formulation (not condensed) this routines requires a block preconditioner
     * (eg <tt>CheapSIMPLE</tt> as preconditioner for the CONTACT SOLVER. The STRUCT SOLVER block is used for the primary
     * (structural) variables and the CONTACT CONSTRAINT SOLVER block is used for the Lagrange multiplier block.
     *
     * \note ATTENTION: condensed meshtying problems use the standard STRUCT SOLVER block (generated by <tt>CreateLinearSolver</tt>).
     * We assume that in contrary to contact problems the domain configuration is not changing for meshtying over the time.
     */
    Teuchos::RCP<LINALG::Solver> CreateContactMeshtyingSolver(Teuchos::RCP<DRT::Discretization>& actdis, const Teuchos::ParameterList& sdyn);

    /// create linear solver for pure structure problems
    /** returns linear solver object for pure structural problems
     *
     *  uses the parameters from the STRUCT SOLVER block in the BACI dat file. This solver is used for pure structural problems,
     *  whenever there is no contact. For contact/meshtying problems in saddle-point formulation the STRUCT SOLVER parameters are
     *  also used for the block preconditioner (structural block).
     */
    Teuchos::RCP<LINALG::Solver> CreateLinearSolver(Teuchos::RCP<DRT::Discretization>& actdis, const Teuchos::ParameterList& sdyn);

    /// structural field solver
    Teuchos::RCP<StructureNew> structure_;

    /// parameter list of the problem dynamics (read only)
    Teuchos::RCP<const Teuchos::ParameterList> prbdyn_;

    /// parameter list of the structural dynamics (mutable)
    Teuchos::RCP<Teuchos::ParameterList> sdyn_;

    /// current discretization
    Teuchos::RCP<DRT::Discretization> actdis_;

    bool isinit_;

    bool issetup_;
  };  // class StructureBaseAlgorithm
} // namespace ADAPTER

#endif /* AD_STR_STRUCTURE_NEW_H_ */
