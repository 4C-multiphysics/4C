
/// Adaptive meshes based on the stk libraries from trilinos
/*!

The stk, or rather stk::mesh, package is a mesh management library that comes
with trilinos. It can be used to replace DRT::Discretization. However, there
are quite some differences in scope and design between DRT::Discretization and
stk::mesh. The mesh adaptivity framework implemented here uses stk for its
mesh storage mechanism.

<h2>stk::mesh</h2>

stk::mesh is a very general package. It is able to store a fast range of
different mesh types. It is optimized to store large meshes on parallel
machines.

The usage of stk::mesh requires to define mesh meta data up front. This is the
description what kind of meshes (element types) are to be used, what parts
there are (fluid, structure, ...), what kinds of boundary conditions, and any
other distinction of elements or nodes. All of these are implemented using
stk::mesh::Part objects. Finally, the (numerical) fields need to be defined.

After the mesh type (meta data) definition is done, the actual mesh (bulk
data) can be read or generated. A mesh is nothing but a set of entities that
are linked by relations. Relations are directed links that point from a higher
rank entity to a lower rank entity, but can be traversed both ways. Thus nodes
are entities and elements are entities. The rank of nodes is lower than the
rank of elements. Each element knows its nodes by its (ordered) list of nodal
relations. There cannot be a relation between entities of the same rank.

Thus, the general concepts (classes) in stk::mesh are:

- stk::mesh::MetaData -- storage of all meta data. There is just one instance.

- stk::mesh::Part -- a named flag that applies to any set of entities. Each
  entity can be part of any number of parts. All entities of a given part (or
  set of parts) can be found. This is huge. This is where a lot of the
  flexibility comes from.

- stk::mesh::Field -- any scalar or vector field or any number of values for
  that matter, that is defined for some set of entities. E.g. the nodal
  coordinates are vector field defined on all entities of nodal
  rank. Obviously a field refers to a part, since parts are there to choose
  some subset of entities.

- stk::mesh::BulkData -- storage of all bulk data. There is just one instance.

- stk::mesh::Entity -- any node, line, surface, element, constraint

- stk::mesh::Relation -- a relation between entities

Parallel management of all entities including proper nodal sharing and
ghosting of elements in ensured. stk::mesh assigns elements in uniquely to
processes and shares nodes. There is a part for all owned and a part for all
globally shared entities.

In difference to DRT::Discretization stk::mesh stores field values as
well. Thus, there are no dof numbers and no Epetra_Vector classes. A little
work (a translation into epetra world and back) needs to be done to call a
linear solver.

\see H. Carter Edwards: "Managing complexity in massively parallel, adaptive,
multiphysics applications" in Engineering with Computers (pub. Springer),
Volume 22, Number 3-4, 2006.  

<h2>Mesh adaptivity</h2>

The central idea with the mesh adaptivity implementation is to create new
(nodal und element) entities for each refinement step and link them to their
parent via relations. Thus, a quad4 element that becomes a parent element
looks like a quad9 element due to its new nodes and four new quad4 elements
are created. The active elements (and nodes) are part of the active
part. Hanging nodes are linked with constraints (which are nothing but
entities) to their surrounding (surface) nodes. The whole mess of the mesh
adaptivity comes down to its parallel implementation.

The organization of the adaptivity implementation to different folders is as
follows:

- src/stk_refine -- the base mesh adaptivity package that is purely based on
  stk. There is no reference to epetra of DRT here.

- src/stk_lib -- the central classes to maintain a stk based mesh in baci and
  use it for calculation. This includes the translation from DRT to stk and the
  connection to LINALG solvers.

- src/stk_test -- a bunch of independent tests that are not linked into baci
  but executed on their own.

- src/stk_[fluid|structure|fsi|...] -- special subdirectories for algorithms
  which use the framework.

*/ 
namespace STK { }
