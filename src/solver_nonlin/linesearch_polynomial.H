/*----------------------------------------------------------------------------*/
/*!
\file linesearch_polynomial.H

\brief Line search based on polynomials

<pre>
Maintainer: Matthias Mayr
            mayr@mhpc.mw.tum.de
            089 - 289-10362
</pre>
*/

/*----------------------------------------------------------------------------*/

#ifndef LINESEARCH_POLYNOMIAL_H
#define LINESEARCH_POLYNOMIAL_H

/*----------------------------------------------------------------------------*/
/* headers */

// baci
#include "linesearch_base.H"

/*----------------------------------------------------------------------------*/
/* forward declarations */

/*----------------------------------------------------------------------------*/
/* definition of classes */
namespace NLNSOL
{
  /*! \brief Line search based on polynomials
   *
   *  Create a series of second order polynomials to model the L2-norm of the
   *  residual along the search direction. Try minimum of this polynomial model
   *  as next line search parameter. Build polynomial models recursively until
   *  the sufficient decrease condition is fulfilled.
   *
   *  <h3> References </h3>
   *  <ul>
   *  <li>[1] Kelley, C.T.: Iterative Methods for Linear and Nonlinear Equations,
   *          SIAM, Philadelphia (1995)
   *  <li>[2] Kelley, C.T.: Iterative Methods for Optimization, SIAM,
   *          Philadelphia (1999)
   *  <li>[3] Kelley, C.T.: Solving Nonlinear Equations with Newton's Method,
   *          SIAM, Philadelphia (2003)
   *  </ul>
   *
   *  \sa NLNSOL::LineSearchBase::IsSufficientDecrease()
   *
   *  \author mayr.mt \date 05/2014
   */
  class LineSearchPolynomial : public NLNSOL::LineSearchBase
  {

  public:

    //! @name Construction / Destruction
    //@{

    //! constructor (empty)
    LineSearchPolynomial();

    //! Destructor
    virtual ~LineSearchPolynomial(){};

    //@}

    //! @name Setup
    //@{

    //! Setup the line search object
    virtual void Setup();

    //@}

    //! @name Computation
    //@{

    /*! \brief Compute the step length / line search parameter
     *
     *  We use a second order polynomial model for the L2-norm of the residual.
     *  It is generated by the values at the last iterate, the full step iterate
     *  and the half step iterate. Then, recursively further polynomials are
     *  built, where we always drop the 'oldest' point.
     *
     *  Line search is finished as soon as the sufficient decrease condition is
     *  satisfied. We stop after #itermax_ evaluations of the polynomial model.
     *
     *  \author mayr.mt \date 06/2014
     */
    virtual const double ComputeLSParam() const;

    //@}

    //! @name Description of this class
    //@{

    //! Returns a character string describing the operator
    virtual const char* Label() const { return "NLNSOL::LineSearchPolynomial"; }

    //! Returns a character string describing the operator briefly
    virtual const char* LabelShort() const { return "LS_Polynomial"; }

    //@}

  protected:

  private:

    //! maximum number of recursive polynomial evaluations
    int itermax_;

  }; // class LineSearchPolynomial
} // namespace NLNSOL

#endif /* LINESEARCH_POLYNOMIAL_H */
