/*----------------------------------------------------------------------*/
/*!
\file linesearch_polynomial.H

\brief Line search based on polynomials

<pre>
Maintainer: Matthias Mayr
            mayr@mhpc.mw.tum.de
            089 - 289-10362
</pre>
*/

/*----------------------------------------------------------------------*/

#ifndef LINESEARCH_POLYNOMIAL_H_
#define LINESEARCH_POLYNOMIAL_H_

/*----------------------------------------------------------------------*/
/* headers */

// baci
#include "linesearch_base.H"

/*----------------------------------------------------------------------*/
/* forward declarations */

/*----------------------------------------------------------------------*/
/* definition of classes */
namespace NLNSOL
{
  /*! \brief Line search based on polynomials
   *
   *  Create a serias of second order polynomials to model the L2-norm of the
   *  residual along the search direction. Try minimum of this polynomial model
   *  as next line search parameter. Build polynomial models recursively until
   *  the sufficient decrease condition is fulfilled.
   *
   *  \author mayr.mt \date 05/2014
   */
  class LineSearchPolynomial : public NLNSOL::LineSearchBase
  {

  public:

    //! @name Construction / Destruction
    //@{

    //! constructor (empty)
    LineSearchPolynomial();

    //! Destructor
    virtual ~LineSearchPolynomial(){};

    //@}

    //! @name Setup
    //@{

    //! Setup the line search object
    virtual void Setup();

    //@}

    //! @name Computation
    //@{

    /*! \brief Compute the step length / line search parameter
     *
     *  We use a second order polynomial model for the L2-norm of the residual.
     *  It is generated by the values at the last iterate, the full step iterate
     *  and the half step iterate. Then, recursively further polynomials are
     *  built, where we always drop the 'oldest' point.
     *
     *  Line search is finished as soon as the sufficient descrease condition is
     *  satisfied. We stop after #itermax_ polynomials.
     *
     *  \author mayr.mt \date 06/2014
     */
    virtual const double ComputeLSParam() const;

    //@}

  protected:

  private:

    //! maximum number of recursive polynomial evaluations
    int itermax_;

  }; // class LineSearchPolynomial
} // namespace NLNSOL

#endif /* LINESEARCH_POLYNOMIAL_H_ */
