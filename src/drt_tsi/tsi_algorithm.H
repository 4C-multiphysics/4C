/*----------------------------------------------------------------------*/
/*!
\file tsi_algorithm.H

\brief Basis of all TSI algorithms that perform a coupling between the
       structural field equation and temperature field equations

<pre>
Maintainer: Caroline Danowski
            danowski@lnm.mw.tum.de
            http://www.lnm.mw.tum.de
            089 - 289-15253
</pre>
*/

/*----------------------------------------------------------------------*
 | definitions                                               dano 12/09 |
 *----------------------------------------------------------------------*/
#ifdef CCADISCRET

#ifndef TSI_ALGORITHM_H
#define TSI_ALGORITHM_H


/*----------------------------------------------------------------------*
 | headers                                                   dano 12/09 |
 *----------------------------------------------------------------------*/
#include "../drt_adapter/adapter_structure.H"
#include "../drt_adapter/adapter_thermo.H"
#include "../drt_adapter/adapter_algorithmbase.H"


/*----------------------------------------------------------------------*
 | forward declarations                                      dano 02/12 |
 *----------------------------------------------------------------------*/
namespace FS3I
{
  class AeroTFSI;
}


/*----------------------------------------------------------------------*
 |                                                           dano 12/09 |
 *----------------------------------------------------------------------*/
//! TSI: Thermo-Structure Interaction
namespace TSI
{
  //! TSI algorithm base
  //!
  //!
  //!  Base class of TSI algorithms. Derives from StructureBaseAlgorithm and
  //!  ThermoBaseAlgorithm with temperature field.
  //!  There can (and will) be different subclasses that implement different
  //!  coupling schemes.
  //!
  //!  \warning The order of calling the two BaseAlgorithm-constructors (that
  //!  is the order in which we list the base classes) is important here! In the
  //!  constructors control file entries are written. And these entries define
  //!  the order in which the filters handle the Discretizations, which in turn
  //!  defines the dof number ordering of the Discretizations... Don't get
  //!  confused. Just always list structure, thermo. In that order.
  //!
  //!  \author u.kue
  //!  \date 02/08
  class Algorithm : public ADAPTER::AlgorithmBase,
                    public ADAPTER::StructureBaseAlgorithm,
                    public ADAPTER::ThermoBaseAlgorithm
  {
    friend class FS3I::AeroTFSI;

  public:

    //! create using a Epetra_Comm
    explicit Algorithm(const Epetra_Comm& comm);

    //! virtual destructor to support polymorph destruction
    virtual ~Algorithm();

    //! outer level time loop (to be implemented by deriving classes)
    virtual void TimeLoop() = 0;

    /// initialise TSI system
    virtual void SetupSystem() = 0;

    //! read restart data
    virtual void ReadRestart(
      int step  //!< step number where the calculation is continued
      ) = 0;

  protected:

    //! @name Time loop building blocks

    //! start a new time step
    virtual void PrepareTimeStep() = 0;

    //! calculate stresses, strains, energies
    void PrepareOutput()
    {
      StructureField().PrepareOutput();
    }

    //! take current results for converged and save for next time step
    virtual void Update();

    //! write output
    virtual void Output();

    //! communicate displacement vector to thermal field to enable their
    //! visualisation on the deformed body
    void OutputDeformationInThr(
      Teuchos::RCP<const Epetra_Vector> dispnp,
      Teuchos::RCP<DRT::Discretization> structdis
      );

    //@}


    //! @name Access methods

    //! velocity calculation given the displacements (like in FSI)
    Teuchos::RCP<Epetra_Vector> CalcVelocity(
      Teuchos::RCP<const Epetra_Vector> dispnp
      );

    //! displacements at time n+1 for thermal output
    Teuchos::RCP<Epetra_MultiVector> dispnp_;

    //@}

  private:

  };  // Algorithm
}  // namespace TSI


/*----------------------------------------------------------------------*/
#endif  // TSI_ALGORITHM_H
#endif  // CCADISCRET
