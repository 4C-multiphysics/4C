/*!----------------------------------------------------------------------
\file so_tet4.H

<pre>
Maintainer: Moritz Frenzel
            frenzel@lnm.mw.tum.de
            http://www.lnm.mw.tum.de
            089 - 289-15240
</pre>

*----------------------------------------------------------------------*/

#ifdef D_SOLID3
#ifdef CCADISCRET
#ifndef SO_TET4_H
#define SO_TET4_H


#include "Teuchos_RefCountPtr.hpp"
#include "Epetra_Vector.h"
using namespace std;
using namespace Teuchos;

#include "../drt_lib/drt_element.H"
#include "../drt_lib/drt_elementtype.H"
#include "../drt_lib/drt_parobjectfactory.H"
#include "../drt_lib/drt_node.H"

// prestressing object
#include "prestress.H"

#include "../drt_mat/material.H"

#include "so_surface.H"
#include "so_line.H"
#include "../drt_inpar/inpar_structure.H"

#include "../linalg/linalg_fixedsizematrix.H"

#define NUMNOD_SOTET4       4      ///< number of nodes
#define NODDOF_SOTET4       3      ///< number of dofs per node
#define NUMDOF_SOTET4      12      ///< total dofs per element
#define NUMSTR_SOTET4       6      ///< number of strains/stresses 	/****/
#define NUMGPT_SOTET4       1      ///< total gauss points per element	/****/
#define NUMDIM_SOTET4       3      ///< number of dimensions 			/****/
#define NUMCOORD_SOTET4	    4 	   ///< number of shape function cooordinates (ksi1-ksi4)
#define NUMNOD_SOTET4_FACE  3	   ///< number of nodes on a TET4 face (which is a TRI3)
#define NUMGPT_SOTET4_FACE  1	   ///< number of GP    on a TET4 face (which is a TRI3)

namespace DRT
{
// forward declarations
class Discretization;

namespace ELEMENTS
{
// forward declarations
class InvDesign;

class So_tet4Type : public DRT::ElementType
{
public:

  std::string Name() const { return "So_tet4Type"; }

  static So_tet4Type & Instance() { return instance_; };

  virtual DRT::ParObject* Create( const vector<char> & data );

  virtual Teuchos::RCP<DRT::Element> Create( const string eletype,
                                             const string eledistype,
                                             const int id,
                                             const int owner );

  virtual Teuchos::RCP<DRT::Element> Create( const int id, const int owner );

  virtual int Initialize(DRT::Discretization& dis);

  virtual void NodalBlockInformation( DRT::Element * dwele, int & numdf, int & dimns, int & nv, int & np );

  virtual void ComputeNullSpace( DRT::Discretization & dis, std::vector<double> & ns, const double * x0, int numdf, int dimns );

  virtual void SetupElementDefinition( std::map<std::string,std::map<std::string,DRT::INPUT::LineDefinition> > & definitions );

private:

  static So_tet4Type instance_;
};

/*!
\brief A C++ version of the 4-node tet solid element

*/

class So_tet4 : public DRT::Element
{
public:

  //! @name Friends
  friend class So_tet4Type;

  //@}
  //! @name Constructors and destructors and related methods

  /*!
  \brief Standard Constructor

  \param id : A unique global id
  \param owner : elements owning processor
  */
  So_tet4(int id, int owner);

  /*!
  \brief Copy Constructor

  Makes a deep copy of a Element

  */
  So_tet4(const So_tet4& old);

  /*!
  \brief Deep copy this instance of Solid3 and return pointer to the copy

  The Clone() method is used from the virtual base class Element in cases
  where the type of the derived class is unknown and a copy-ctor is needed

  */
  DRT::Element* Clone() const;

  /*!
  \brief Get shape type of element
  */
  virtual DiscretizationType Shape() const;

  /*!
  \brief Return number of volumes of this element
  */
  virtual int NumVolume() const {return 1;}

  /*!
  \brief Return number of surfaces of this element
  */
  virtual int NumSurface() const {return 4;}

  /*!
  \brief Return number of lines of this element
  */
  virtual int NumLine() const {return 6;}

  /*!
  \brief Get vector of RefCountPtrs to the lines of this element

  */
  virtual vector<RCP<DRT::Element> > Lines();

  /*!
  \brief Get vector of RefCountPtrs to the surfaces of this element

  */
  virtual vector<RCP<DRT::Element> > Surfaces();

  /*!
  \brief Get vector of RefCountPtrs to the volumes of this element

  */
  virtual vector<RCP<DRT::Element> > Volumes();

  /*!
  \brief Return unique ParObject id

  every class implementing ParObject needs a unique id defined at the
  top of this file.
  */
  virtual int UniqueParObjectId() const { return So_tet4Type::Instance().UniqueParObjectId(); }

  /*!
  \brief Pack this class so it can be communicated

  \ref Pack and \ref Unpack are used to communicate this element

  */
  virtual void Pack(vector<char>& data) const;

  /*!
  \brief Unpack data from a char vector into this class

  \ref Pack and \ref Unpack are used to communicate this element

  */
  virtual void Unpack(const vector<char>& data);

  /*!
  \brief Destructor

  */
  virtual ~So_tet4();
  //@}

  //! @name Acess methods


  /*!
  \brief Get number of degrees of freedom of a certain node
         (implements pure virtual DRT::Element)

  The element decides how many degrees of freedom its nodes must have.
  As this may vary along a simulation, the element can redecide the
  number of degrees of freedom per node along the way for each of it's nodes
  separately.
  */
  virtual int NumDofPerNode(const DRT::Node& node) const {return 3;}

  /*!
  \brief Get number of degrees of freedom per element
         (implements pure virtual DRT::Element)

  The element decides how many element degrees of freedom it has.
  It can redecide along the way of a simulation.

  \note Element degrees of freedom mentioned here are dofs that are visible
        at the level of the total system of equations. Purely internal
        element dofs that are condensed internally should NOT be considered.
  */
  virtual int NumDofPerElement() const { return 0; }

  /*!
  \brief Print this element
  */
  void Print(ostream& os) const;

  virtual DRT::ElementType & ElementType() const
  { return So_tet4Type::Instance(); }

  //@}

  //! @name Input and Creation

  /*!
  \brief Read input for this element
  */
  /*!
  \brief Query names of element data to be visualized using BINIO

  The element fills the provided map with key names of
  visualization data the element wants to visualize AT THE CENTER
  of the element geometry. The values is supposed to be dimension of the
  data to be visualized. It can either be 1 (scalar), 3 (vector), 6 (sym. tensor)
  or 9 (nonsym. tensor)

  Example:
  \code
    // Name of data is 'Owner', dimension is 1 (scalar value)
    names.insert(pair<string,int>("Owner",1));
    // Name of data is 'StressesXYZ', dimension is 6 (sym. tensor value)
    names.insert(pair<string,int>("StressesXYZ",6));
  \endcode

  \param names (out): On return, the derived class has filled names with
                      key names of data it wants to visualize and with int dimensions
                      of that data.
  */
  virtual void VisNames(map<string,int>& names);

  /*!
  \brief Query data to be visualized using BINIO of a given name

  The method is supposed to call this base method to visualize the owner of
  the element.
  If the derived method recognizes a supported data name, it shall fill it
  with corresponding data.
  If it does NOT recognizes the name, it shall do nothing.

  \warning The method must not change size of data

  \param name (in):   Name of data that is currently processed for visualization
  \param data (out):  data to be filled by element if element recognizes the name
  */
  virtual bool VisData(const string& name, vector<double>& data);

  //@}

  //! @name Input and Creation

  /*!
  \brief Read input for this element
  */
  //bool ReadElement();

  /*!
  \brief Read input for this element
  */
  bool ReadElement(const std::string& eletype,
                   const std::string& distype,
                   DRT::INPUT::LineDefinition* linedef);


  //@}

  //! @name Evaluation

  /*!
  \brief Evaluate an element

  Evaluate so_tet4 element stiffness, mass, internal forces, etc.

  \param params (in/out): ParameterList for communication between control routine
                          and elements
  \param discretization : pointer to discretization for de-assembly
  \param lm (in)        : location matrix for de-assembly
  \param elemat1 (out)  : (stiffness-)matrix to be filled by element. If NULL on input,
                          the controling method does not expect the element to fill
                          this matrix.
  \param elemat2 (out)  : (mass-)matrix to be filled by element. If NULL on input,
                          the controling method does not expect the element to fill
                          this matrix.
  \param elevec1 (out)  : (internal force-)vector to be filled by element. If NULL on input,
                          the controlling method does not expect the element
                          to fill this vector
  \param elevec2 (out)  : vector to be filled by element. If NULL on input,
                          the controlling method does not expect the element
                          to fill this vector
  \param elevec3 (out)  : vector to be filled by element. If NULL on input,
                          the controlling method does not expect the element
                          to fill this vector
  \return 0 if successful, negative otherwise
  */
  int Evaluate(ParameterList& params,
               DRT::Discretization&      discretization,
               vector<int>&              lm,
               Epetra_SerialDenseMatrix& elemat1,
               Epetra_SerialDenseMatrix& elemat2,
               Epetra_SerialDenseVector& elevec1,
               Epetra_SerialDenseVector& elevec2,
               Epetra_SerialDenseVector& elevec3);


  /*!
  \brief Evaluate a Neumann boundary condition

  this method evaluates a surface Neumann condition on the solid3 element

  \param params (in/out)    : ParameterList for communication between control routine
                              and elements
  \param discretization (in): A reference to the underlying discretization
  \param condition (in)     : The condition to be evaluated
  \param lm (in)            : location vector of this element
  \param elevec1 (out)      : vector to be filled by element. If NULL on input,

  \return 0 if successful, negative otherwise
  */
  virtual int EvaluateNeumann(ParameterList& params,
                              DRT::Discretization&      discretization,
                              DRT::Condition&           condition,
                              vector<int>&              lm,
                              Epetra_SerialDenseVector& elevec1,
                              Epetra_SerialDenseMatrix* elemat1 = NULL);


  //@}

protected:

  //! action parameters recognized by so_tet10
  enum ActionType
  {
    none,
    calc_struct_linstiff,
    calc_struct_nlnstiff,
    calc_struct_internalforce,
    calc_struct_linstiffmass,
    calc_struct_nlnstiffmass,
    calc_struct_nlnstifflmass,
    calc_struct_stress,
    postprocess_stress,
    calc_struct_eleload,
    calc_struct_fsiload,
    calc_struct_update_istep,
    calc_struct_update_imrlike,
    calc_struct_reset_istep, //!< reset elementwise internal variables
                             //!< during iteration to last converged state
    prestress_update,
    inversedesign_update,
    inversedesign_switch
  };

  //! kinematic types of so_tet10
  enum KinematicType
  {
    so_tet4_geolin,
    so_tet4_totlag,
    so_tet4_updlag
  };

  //! kinematic type
  KinematicType                                                            kintype_;
  //! number of the material law
  //int                                                                      material_;

  //! container containing all kind of solid3 thisandthat
  //DRT::Container                                                           data_;
  //! vector of history variables for each Gauss point
  vector<RCP<MAT::Material> >                                              mat_;
  //! volume of the element
  double                                                                   V_;
  //! vector of partial derivatives in material frame
  vector<LINALG::Matrix<NUMNOD_SOTET4,NUMDIM_SOTET4> > nxyz_;

  /// prestressing switch & time
  INPAR::STR::PreStress                                                    pstype_;
  double                                                                   pstime_;
  double                                                                   time_;
  /// Prestressing object
  RCP<DRT::ELEMENTS::PreStress>                                            prestress_;
  /// compute Jacobian mapping wrt to deformed configuration
  void UpdateJacobianMapping(const vector<double>& disp,
                             DRT::ELEMENTS::PreStress& prestress);
  /// compute defgrd in all gp for given disp
  void DefGradient(const vector<double>& disp,
                   Epetra_SerialDenseMatrix& gpdefgrd,
                   DRT::ELEMENTS::PreStress& prestress);

  friend class DRT::ELEMENTS::InvDesign;
  RCP<DRT::ELEMENTS::InvDesign>                                            invdesign_;

  // internal calculation methods

  // don't want = operator
  So_tet4& operator = (const So_tet4& old);

  //! init the inverse of the jacobian and its determinant in the material configuration
  virtual void InitJacobianMapping();

  //! Calculate nonlinear stiffness and mass matrix
  virtual void so_tet4_nlnstiffmass(
                                 ParameterList&            params,
                                 vector<int>&              lm,
                                 vector<double>&           disp,
                                 vector<double>&           residual,
                                    LINALG::Matrix<NUMDOF_SOTET4,NUMDOF_SOTET4>* stiffmatrix,
                                    LINALG::Matrix<NUMDOF_SOTET4,NUMDOF_SOTET4>* massmatrix,
                                    LINALG::Matrix<NUMDOF_SOTET4,1>* force,
                                    LINALG::Matrix<NUMGPT_SOTET4,NUMSTR_SOTET4>* stresses,
                                    LINALG::Matrix<NUMGPT_SOTET4,NUMSTR_SOTET4>* elestrain,
                                    Teuchos::RCP<const MAT::Material> material,
                                    const INPAR::STR::StressType     iostress,
                                    const INPAR::STR::StrainType     iostrain);

  //! lump mass matrix (bborn 07/08)
  void so_tet4_lumpmass(LINALG::Matrix<NUMDOF_SOTET4,NUMDOF_SOTET4>* emass);  //!< element mass matrix


  /// Extrapolate Gauss-point values (e.g. stresses) to nodes and store them in elevecs
  void so_tet4_expol
  (
      LINALG::Matrix<NUMGPT_SOTET4,NUMSTR_SOTET4>& stresses, ///< gp stresses
      LINALG::Matrix<NUMDOF_SOTET4,1>& elevec1, ///< nodal normal stresses
      LINALG::Matrix<NUMDOF_SOTET4,1>& elevec2  ///< nodal shear stresses
  );

  //! Evaluate Tet4 Shapefcts at 1 gausspoint to keep them static
  const vector<LINALG::Matrix<NUMNOD_SOTET4,1> > so_tet4_1gp_shapefcts();
  //! Evaluate Tet4 Derivs at 1 gausspoint to keep them static
  const vector<LINALG::Matrix<NUMDIM_SOTET4+1,NUMNOD_SOTET4> > so_tet4_1gp_derivs();
  //! Evaluate Tet4 Weights at 1 gausspoint to keep them static
  const vector<double> so_tet4_1gp_weights();

  //! Evaluate Tet4 Shapefcts at 4 gausspoints to keep them static
  const vector<LINALG::Matrix<NUMNOD_SOTET4,1> > so_tet4_4gp_shapefcts();
  //! Evaluate Tet4 Derivs at 4 gausspoints to keep them static
  const vector<LINALG::Matrix<NUMDIM_SOTET4+1,NUMNOD_SOTET4> > so_tet4_4gp_derivs();
  //! Evaluate Tet4 Weights at 4 gausspoints to keep them static
  const vector<double> so_tet4_4gp_weights();

  /// material selection for so_tet4
  void so_tet4_mat_sel(Epetra_SerialDenseVector* stress,
                       Epetra_SerialDenseMatrix* cmat,
                       double* density,
                       const Epetra_SerialDenseVector* glstrain,
                       const Epetra_SerialDenseMatrix* defgrd,
                       int gp);

  /// material selection for so_tet4
  void so_tet4_mat_sel(
                    LINALG::Matrix<6,1>* stress,
                    LINALG::Matrix<6,6>* cmat,
                    double* density,
                    LINALG::Matrix<6,1>* glstrain,
                    LINALG::Matrix<3,3>* defgrd,
                    const int gp,
                    ParameterList& params);

}; // class So_tet4


} // namespace ELEMENTS
} // namespace DRT

#endif  // #ifndef SO_TET4_H_
#endif  // #ifdef  CCADISCRET
#endif  // #ifdef  D_SOLID3


