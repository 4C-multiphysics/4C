/*!----------------------------------------------------------------------
\file so_nstet.H

<pre>
Maintainer: Michael Gee
            gee@lnm.mw.tum.de
            http://www.lnm.mw.tum.de
            089 - 289-15239
</pre>

*----------------------------------------------------------------------*/

#ifdef D_SOLID3
#ifdef CCADISCRET
#ifndef SO_NSTET4_H
#define SO_NSTET4_H


#include "Teuchos_RefCountPtr.hpp"
#include "Epetra_Vector.h"
#include "../linalg/linalg_serialdensevector.H"
#include "../linalg/linalg_serialdensematrix.H"
using namespace std;
using namespace Teuchos;

#include "../drt_lib/drt_element.H"
#include "../drt_lib/drt_elementtype.H"
#include "../drt_lib/drt_parobjectfactory.H"
#include "../drt_lib/drt_node.H"
#include "../drt_inpar/inpar_structure.H"

#include "../drt_mat/material.H"

#include "so_surface.H"
#include "so_line.H"

#include "../linalg/linalg_fixedsizematrix.H"

#define ALPHA_NSTET       0.3    ///< stabilization parameter for vol-dev split stabilization
#define BETA_NSTET        1.0    ///< stabilization parameter for MIS-pressure stabilization
#define MIS_MIN_PATCHSIZE 2      ///< minimum MIS patch size required

namespace DRT
{
// forward declarations
class Discretization;

namespace ELEMENTS
{
class StructuralVolume;
class NStet;


//=======================================================================
//=======================================================================

class NStetType : public DRT::ElementType
{
  //! allow NStet element to access the nodal data
  friend class DRT::ELEMENTS::NStet;

public:

  std::string Name() const { return "NStetType"; }

  static NStetType & Instance() { return instance_; };

  virtual DRT::ParObject* Create( const vector<char> & data );

  virtual Teuchos::RCP<DRT::Element> Create( const string eletype,
                                             const string eledistype,
                                             const int id,
                                             const int owner );

  virtual Teuchos::RCP<DRT::Element> Create( const int id, const int owner );

  virtual int Initialize(DRT::Discretization& dis);

  virtual void PreEvaluate(DRT::Discretization& dis,
                           Teuchos::ParameterList& p,
                           RCP<LINALG::SparseOperator> systemmatrix1,
                           RCP<LINALG::SparseOperator> systemmatrix2,
                           RCP<Epetra_Vector>          systemvector1,
                           RCP<Epetra_Vector>          systemvector2,
                           RCP<Epetra_Vector>          systemvector3);

  virtual void NodalBlockInformation( DRT::Element * dwele, int & numdf, int & dimns, int & nv, int & np );

  virtual void ComputeNullSpace( DRT::Discretization & dis, std::vector<double> & ns, const double * x0, int numdf, int dimns );

  virtual void SetupElementDefinition( std::map<std::string,std::map<std::string,DRT::INPUT::LineDefinition> > & definitions );

private:

  static NStetType                        instance_;

  // map of row nodes adjacent to NStet elements
  map<int,DRT::Node*>                     noderids_;

  // map of column NStet elements
  map<int,DRT::ELEMENTS::NStet*>          elecids_;

  // nodal stresses
  Teuchos::RCP<Epetra_MultiVector>        nstress_;
  
  // nodal strains
  Teuchos::RCP<Epetra_MultiVector>        nstrain_;

  // vector of elements adjacent to each row node
  map<int,vector<DRT::ELEMENTS::NStet*> > adjele_;

  // map of nodes forming a patch around a node
  map<int,map<int,DRT::Node*> >           adjnode_;

  // map of location vectors for patch around a node
  map<int,vector<int> >                   adjlm_;

  // contains only MIS nodes
  // indicate whether MIS patch is identical to patch in adjele_
  map<int,bool>                           pstab_ident_patch_;
  
  // vector of elements associated with an MIS node
  // if patch is identical to adjele_, then length is zero here
  map<int,vector<DRT::ELEMENTS::NStet*> > pstab_adjele_;
  
  // adjnode and adjlm for non-identical patches only
  map<int,map<int,DRT::Node*> >           pstab_adjnode_;
  map<int,vector<int> >                   pstab_adjlm_;
  
  // vectors for visualization of stress and strain
  Teuchos::RCP<Epetra_MultiVector>        pstab_stress_;
  Teuchos::RCP<Epetra_MultiVector>        pstab_strain_;
  
  // map indicating which element is associated with which MIS noderids
  // key is column element gid
  // value is MIS node gid
  map<int,int>                            pstab_cid_mis_;
  Teuchos::RCP<Epetra_Map>                pstab_misstressout_;

  void NodalIntegration(Epetra_SerialDenseMatrix*       stiff,
                        Epetra_SerialDenseVector*       force,
                        map<int,DRT::Node*>&            adjnode,
                        vector<DRT::ELEMENTS::NStet*>&  adjele,
                        bool                            mis,
                        bool                            samepatch,
                        Epetra_SerialDenseMatrix*       ps_stiff,
                        Epetra_SerialDenseVector*       ps_force,
                        map<int,DRT::Node*>*            ps_adjnode,
                        vector<DRT::ELEMENTS::NStet*>*  ps_adjele,
                        vector<double>*                 nodalstress,
                        vector<double>*                 misstress,
                        vector<double>*                 nodalstrain,
                        vector<double>*                 misstrain,
                        const INPAR::STR::StressType    iostress,
                        const INPAR::STR::StrainType    iostrain);


  void SelectMaterial(RCP<MAT::Material> mat,
                      LINALG::Matrix<6,1>& stress,
                      LINALG::Matrix<6,6>& cmat,
                      double& density,
                      LINALG::Matrix<6,1>& glstrain,
                      LINALG::Matrix<3,3>& defgrd,
                      int gp);

   // compute deviatoric stresses and tangent
  static void DevStressTangent(LINALG::Matrix<6,1>& Sdev,
                               LINALG::Matrix<6,6>& CCdev,
                               LINALG::Matrix<6,6>& CC,
                               const LINALG::Matrix<6,1>& S,
                               const LINALG::Matrix<3,3>& C);
};

/*!
\brief A nodal-averaged strain 4-noded tet element

*/

class NStet : public DRT::Element
{
public:

  friend class NStetType;


  /*!
  \brief Standard Constructor

  \param id : A unique global id
  */
  NStet(int id, int owner);

  /*!
  \brief Copy Constructor

  Makes a deep copy of a Element

  */
  NStet(const NStet& old);

  /*!
  \brief Deep copy this instance of Solid3 and return pointer to the copy

  The Clone() method is used from the virtual base class Element in cases
  where the type of the derived class is unknown and a copy-ctor is needed

  */
  inline DRT::Element* Clone() const
  { return new DRT::ELEMENTS::NStet(*this); }

  /*!
  \brief Get shape type of element
  */
  inline virtual DiscretizationType Shape() const { return tet4; }

  /*!
  \brief Return number of volumes of this element
  */
  virtual int NumVolume() const {return 1;}

  /*!
  \brief Return number of surfaces of this element
  */
  virtual int NumSurface() const {return 4;}

  /*!
  \brief Return number of lines of this element
  */
  virtual int NumLine() const {return 6;}

  /*!
  \brief Get vector of RefCountPtrs to the lines of this element

  */
  virtual vector<RCP<DRT::Element> > Lines();

  /*!
  \brief Get vector of RefCountPtrs to the surfaces of this element

  */
  virtual vector<RCP<DRT::Element> > Surfaces();

  /*!
  \brief Get vector of RefCountPtrs to the volumes of this element

  */
  virtual vector<RCP<DRT::Element> > Volumes();

  /*!
  \brief Return unique ParObject id

  every class implementing ParObject needs a unique id defined at the
  top of this file.
  */
  virtual int UniqueParObjectId() const { return NStetType::Instance().UniqueParObjectId(); }

  /*!
  \brief Pack this class so it can be communicated

  \ref Pack and \ref Unpack are used to communicate this element

  */
  virtual void Pack(vector<char>& data) const;

  /*!
  \brief Unpack data from a char vector into this class

  \ref Pack and \ref Unpack are used to communicate this element

  */
  virtual void Unpack(const vector<char>& data);

  /*!
  \brief Destructor

  */
  virtual ~NStet();

  /*!
  \brief Get number of degrees of freedom of a certain node
         (implements pure virtual DRT::Element)

  The element decides how many degrees of freedom its nodes must have.
  As this may vary along a simulation, the element can redecide the
  number of degrees of freedom per node along the way for each of it's nodes
  separately.
  */
  virtual inline int NumDofPerNode(const DRT::Node& node) const {return 3;}

  /*!
  \brief Get number of degrees of freedom per element
         (implements pure virtual DRT::Element)

  The element decides how many element degrees of freedom it has.
  It can redecide along the way of a simulation.

  \note Element degrees of freedom mentioned here are dofs that are visible
        at the level of the total system of equations. Purely internal
        element dofs that are condensed internally should NOT be considered.
  */
  virtual inline int NumDofPerElement() const { return 0; }

  /*!
  \brief Print this element
  */
  void Print(ostream& os) const;

  virtual NStetType & ElementType() const { return NStetType::Instance(); }

  /*!
  \brief Read input for this element
  */
  //bool ReadElement();

  /*!
  \brief Read input for this element
  */
  bool ReadElement(const std::string& eletype,
                   const std::string& distype,
                   DRT::INPUT::LineDefinition* linedef);

  /*!
  \brief Evaluate an element

  Evaluate so_tet4 element stiffness, mass, internal forces, etc.

  \param params (in/out): ParameterList for communication between control routine
                          and elements
  \param elemat1 (out)  : (stiffness-)matrix to be filled by element. If NULL on input,
                          the controling method does not expect the element to fill
                          this matrix.
  \param elemat2 (out)  : (mass-)matrix to be filled by element. If NULL on input,
                          the controling method does not expect the element to fill
                          this matrix.
  \param elevec1 (out)  : (internal force-)vector to be filled by element. If NULL on input,
                          the controlling method does not expect the element
                          to fill this vector
  \param elevec2 (out)  : vector to be filled by element. If NULL on input,
                          the controlling method does not expect the element
                          to fill this vector
  \param elevec3 (out)  : vector to be filled by element. If NULL on input,
                          the controlling method does not expect the element
                          to fill this vector
  \return 0 if successful, negative otherwise
  */
  int Evaluate(ParameterList& params,
               DRT::Discretization&      discretization,
               vector<int>&              lm,
               Epetra_SerialDenseMatrix& elemat1,
               Epetra_SerialDenseMatrix& elemat2,
               Epetra_SerialDenseVector& elevec1,
               Epetra_SerialDenseVector& elevec2,
               Epetra_SerialDenseVector& elevec3);


  /*!
  \brief Evaluate a Neumann boundary condition

  this method evaluates a surface Neumann condition on the solid3 element

  \param params (in/out)    : ParameterList for communication between control routine
                              and elements
  \param discretization (in): A reference to the underlying discretization
  \param condition (in)     : The condition to be evaluated
  \param lm (in)            : location vector of this element
  \param elevec1 (out)      : vector to be filled by element. If NULL on input,

  \return 0 if successful, negative otherwise
  */
  virtual int EvaluateNeumann(ParameterList& params,
                              DRT::Discretization&      discretization,
                              DRT::Condition&           condition,
                              vector<int>&              lm,
                              Epetra_SerialDenseVector& elevec1,
                              Epetra_SerialDenseMatrix* elemat1 = NULL);


protected:

  //! action parameters recognized by this element
  enum ActionType
  {
    none,
    calc_struct_linstiff,
    calc_struct_nlnstiff,
    calc_struct_internalforce,
    calc_struct_linstiffmass,
    calc_struct_nlnstiffmass,
    calc_struct_nlnstifflmass,
    calc_struct_stress,
    postprocess_stress,
    calc_struct_eleload,
    calc_struct_fsiload,
    calc_struct_update_istep,
    calc_struct_update_imrlike,
    calc_struct_reset_istep,  //!< reset elementwise internal variables
                              //!< during iteration to last converged state
    calc_struct_B_and_F
  };

  enum StressType
  {
    so_tet4_stress_none,
    so_tet4_stress_gpxyz,
    so_tet4_stress_gprst,
    so_tet4_stress_gp123,
    so_tet4_stress_ndxyz,
    so_tet4_stress_ndrst,
    so_tet4_stress_nd123
  };

  //! type of stress evaluation
  StressType                                               stresstype_;
  //! number of the material law
  int                                                      material_;
  //! vector of history variables for each Gauss point
  vector<RCP<MAT::Material> >                              mat_;
  //! volume of element
  double                                                   V_;
  //! derivs of shape functions wrt to material coords
  LINALG::Matrix<4,3>                                      nxyz_;
  //! element's def-gradient and flag indicating age of it
  bool                                                     FisNew_;
  LINALG::Matrix<3,3>                                      F_;

  // internal calculation methods

  // don't want = operator
  NStet& operator = (const NStet& old);

  // init the inverse of the jacobian and its determinant
  // in the material configuration
  virtual void InitElement();

  // return volume of element
  virtual inline double Volume() { return V_; }

  //! Shape functions
  inline void ShapeFunction(LINALG::Matrix<4,1>& funct,
                            const double& e1,
                            const double& e2,
                            const double& e3,
                            const double& e4)
  {
    // shape function is N_i = xsi_i
    funct(0) = e1;
    funct(1) = e2;
    funct(2) = e3;
    funct(3) = e4;
    return;
  }

  //! Shape function derivatives
  inline void ShapeFunctionDerivatives(LINALG::Matrix<4,4>& deriv)
  {
    // Ni,j = 1.0 for i==j, otherwise 0.0
    deriv.Clear();
    deriv(0,0) = 1.0;
    deriv(1,1) = 1.0;
    deriv(2,2) = 1.0;
    deriv(3,3) = 1.0;
    return;
  }

  //! standards displ. tet4 calc routine
  virtual void nstetnlnstiffmass(vector<int>&                    lm,
                                vector<double>&                  disp,
                                vector<double>&                  residual,
                                LINALG::Matrix<12,12>*           stiffmatrix,
                                LINALG::Matrix<12,12>*           massmatrix,
                                LINALG::Matrix<12,1>*            force,
                                LINALG::Matrix<1,6>*             elestress,
                                LINALG::Matrix<1,6>*             elestrain,
                                const INPAR::STR::StressType     iostress,
                                const INPAR::STR::StrainType     iostrain);

  //! lump mass matrix (bborn 07/08)
  void nstetlumpmass(LINALG::Matrix<12,12>* emass);

  void DeformationGradient(vector<double>& disp);


  void so_nstet_expol(LINALG::Matrix<1,6>& stresses,
                     LINALG::Matrix<4,6>& nodalstresses);


#if 0
  void SelectMaterial(Epetra_SerialDenseVector& stress,
                      Epetra_SerialDenseMatrix& cmat,
                      double& density,
                      const Epetra_SerialDenseVector& glstrain,
                      const Epetra_SerialDenseMatrix& defgrd,
                      int gp);
#endif
  void SelectMaterial(LINALG::Matrix<6,1>& stress,
                      LINALG::Matrix<6,6>& cmat,
                      double& density,
                      LINALG::Matrix<6,1>& glstrain,
                      LINALG::Matrix<3,3>& defgrd,
                      int gp);

}; // class NStet






} // namespace ELEMENTS
} // namespace DRT

#endif  // #ifndef SO_NSTET_H_
#endif  // #ifdef  CCADISCRET
#endif  // #ifdef  D_SOLID3


