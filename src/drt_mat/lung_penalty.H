/*!----------------------------------------------------------------------
\file lung_penalty.H
\brief

<pre>
Maintainer: Lena Wiechert & Sophie Rausch
            {wiechert,rausch}@lnm.mw.tum.de
            http://www.lnm.mw.tum.de
</pre>
*----------------------------------------------------------------------*/
#ifndef LUNGPENALTY_H_
#define LUNGPENALTY_H_
#ifdef CCADISCRET

#include "material.H"
#include "matpar_parameter.H"
#include "../drt_lib/drt_parobjectfactory.H"
#include <Epetra_SerialDenseVector.h>
#include <Epetra_SerialDenseMatrix.h>


namespace MAT
{

  namespace PAR
  {

    /*----------------------------------------------------------------------*/
    /// material parameters for lung Ogden
    class LungPenalty : public Parameter
    {
    public:

      /// standard constructor
      LungPenalty(
        Teuchos::RCP<MAT::PAR::Material> matdata
        );

      /// destructor
      virtual ~LungPenalty() { ; }

      /// @name material parameters (these need to be writable for inverse analysis)
      //@{

      double c_;
      double k1_;
      double k2_;
      double epsilon_;
      double gamma_;
      double dens_;

      //@}

      /// create material instance of matching type with my parameters
      virtual Teuchos::RCP<MAT::Material> CreateMaterial();

    };  // class LungPenalty

  }  // namespace PAR

class LungPenaltyType : public DRT::ParObjectType
{
public:

  std::string Name() const { return "LungPenaltyType"; }

  static LungPenaltyType & Instance() { return instance_; };

  virtual DRT::ParObject* Create( const vector<char> & data );

private:

  static LungPenaltyType instance_;
};

  /*----------------------------------------------------------------------*/
  /// Wrapper for hyperelastic polyconvex anisotropic material
  class LungPenalty : public Material
  {
  public:

    /// construct empty material object
    LungPenalty();

    /// construct the material object given material parameters
//    explicit LungPenalty(MATERIAL* matdata);


    /// construct the material object given material parameters
    explicit LungPenalty(MAT::PAR::LungPenalty* params);

    //! @name Packing and Unpacking

    /*!
      \brief Return unique ParObject id

      every class implementing ParObject needs a unique id defined at the
      top of drt_parobject.H (this file) and should return it in this method.
    */
    virtual int UniqueParObjectId() const { return LungPenaltyType::Instance().UniqueParObjectId(); }

    /*!
      \brief Pack this class so it can be communicated

      Resizes the vector data and stores all information of a class in it.
      The first information to be stored in data has to be the
      unique parobject id delivered by UniqueParObjectId() which will then
      identify the exact class on the receiving processor.

      \param data (in/out): char vector to store class information
    */
    virtual void Pack(vector<char>& data) const;

    /*!
      \brief Unpack data from a char vector into this class

      The vector data contains all information to rebuild the
      exact copy of an instance of a class on a different processor.
      The first entry in data has to be an integer which is the unique
      parobject id defined at the top of this file and delivered by
      UniqueParObjectId().

      \param data (in) : vector storing all data to be unpacked into this
      instance.
    */
    virtual void Unpack(const vector<char>& data);

    //@}

    /// material type
    virtual INPAR::MAT::MaterialType MaterialType() const { return INPAR::MAT::m_lung_penalty; }

    /// return copy of this material object
    virtual Teuchos::RCP<Material> Clone() const { return Teuchos::rcp( new LungPenalty( *this ) ); }

    // wrapper for less intensive error output information
    void Evaluate(const LINALG::Matrix<6,1>* glstrain,
                  LINALG::Matrix<6,6>* cmat,
                  LINALG::Matrix<6,1>* stress);

    /// @name Access methods
    //@{
    double Density() const { return params_->dens_; }
    double C() const { return params_->c_; }
    double K1() const { return params_->k1_; }
    double K2() const { return params_->k2_; }
    double Epsilon() const { return params_->epsilon_; }
    double Gamma() const { return params_->gamma_; }
    //@}

    /// @name Write methods
    //@{
    void SetC(const double c) { params_->c_ = c; }
    void SetK1(const double k1) { params_->k1_ = k1; }
    void SetK2(const double k2) { params_->k2_ = k2; }
    //@}

    /// Return quick accessible material parameter data
    virtual MAT::PAR::Parameter* Parameter() const { return params_; }

  private:

    /// my material parameters
////    MATERIAL* matdata_;

    /// my material parameters
    MAT::PAR::LungPenalty* params_;

  };
}

#endif /*CCADISCRET*/
#endif /*LUNGPENALTY_H_*/
