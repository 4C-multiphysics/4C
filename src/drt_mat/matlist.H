/*!----------------------------------------------------------------------
\file matlist.H

<pre>
Maintainer: Georg Bauer
            bauer@lnm.mw.tum.de
            http://www.lnm.mw.tum.de
            089 - 289-15252
</pre>
*----------------------------------------------------------------------*/
#ifndef MATLIST_H
#define MATLIST_H

#ifdef CCADISCRET

#include "matpar_parameter.H"
#include "material.H"

namespace MAT
{
 
  namespace PAR
  {
    /*----------------------------------------------------------------------*/
    /// material parameters for list of materials
    class MatList : public Parameter
    {
    public:

      /// standard constructor
      MatList(
        Teuchos::RCP<MAT::PAR::Material> matdata
        );

      /// destructor
      virtual ~MatList() { ; }

      /// @name material parameters
      //@{

      /// provide access to material by its ID
      Teuchos::RCP<const MAT::Material> MaterialById(const int id) const
      {
        std::map<int,Teuchos::RCP<MAT::Material> >::const_iterator m = mat_.find(id);

        if (m == mat_.end())
        {
          dserror("Material %d could not be found", id);
          return Teuchos::null;
        }
        else
          return m->second;
      }

      /// length of material list
      const int nummat_;

      /// the list of material IDs
      const std::vector<int>* matids_;

    private:

      /// map to materials
      std::map<int,Teuchos::RCP<MAT::Material> > mat_;

      //@}

    };  // class MatList

  }  // namespace PAR


  /*----------------------------------------------------------------------*/
  /// Wrapper for a list of materials
  class MatList : public Material
  {
  public:

    /// construct empty material object
    MatList();

    /// construct the material object given material parameters
    explicit MatList(MAT::PAR::MatList* params);

    //! @name Packing and Unpacking

    /*!
      \brief Return unique ParObject id

      every class implementing ParObject needs a unique id defined at the
      top of drt_parobject.H (this file) and should return it in this method.
    */
    virtual int UniqueParObjectId() const { return ParObject_MatList; }

    /*!
      \brief Pack this class so it can be communicated

      Resizes the vector data and stores all information of a class in it.
      The first information to be stored in data has to be the
      unique parobject id delivered by UniqueParObjectId() which will then
      identify the exact class on the receiving processor.

      \param data (in/out): char vector to store class information
    */
    virtual void Pack(vector<char>& data) const;

    /*!
      \brief Unpack data from a char vector into this class

      The vector data contains all information to rebuild the
      exact copy of an instance of a class on a different processor.
      The first entry in data has to be an integer which is the unique
      parobject id defined at the top of this file and delivered by
      UniqueParObjectId().

      \param data (in) : vector storing all data to be unpacked into this
      instance.
    */
    virtual void Unpack(const vector<char>& data);

    //@}

    /// material type
    virtual INPAR::MAT::MaterialType MaterialType() const { return INPAR::MAT::m_matlist; }

    /// number of materials
    int NumMat() const { return params_->nummat_; }

    /// material ID by Index
    int MatID(
      const unsigned index
    ) const
    { 
      if ((int)index < params_->nummat_)
        return params_->matids_->at(index);
      else
      {
        dserror("Index too large");
        return -1;
      }
    }

    /// provide access to material by its ID
    Teuchos::RCP<const MAT::Material> MaterialById(const int id) const { return params_->MaterialById(id); }

  private:

    /// my material parameters
    MAT::PAR::MatList* params_;
  };

}

#endif

#endif
