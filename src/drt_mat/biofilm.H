/*!----------------------------------------------------------------------
\file biofilm.H

<pre>
Maintainer: Mirella Coroneo
            coroneo@lnm.mw.tum.de
            http://www.lnm.mw.tum.de
            089 - 289-15236
</pre>
*----------------------------------------------------------------------*/
#ifndef BIOFILM_H
#define BIOFILM_H



#include "matpar_parameter.H"
#include "material.H"
#include "../drt_lib/drt_parobjectfactory.H"

namespace MAT
{

  namespace PAR
  {

    /*----------------------------------------------------------------------*/
    /// parameters for scalar transport material
    class Biofilm : public Parameter
    {
    public:

      /// standard constructor
    	Biofilm(
        Teuchos::RCP<MAT::PAR::Material> matdata
        );

      /// destructor
      virtual ~Biofilm() { ; }

      /// @name material parameters
      //@{

      /// kinematic diffusivity
      const double diffusivity_;
      /// Substrate consumption kinetics (SimpleMonod)
      const string* kinetics_;
      /// substrate uptake rate coefficient
      const double rearate_;
      /// substrate saturation coefficient
      const double satcoeff_;

      //@}

      /// create material instance of matching type with my parameters
      virtual Teuchos::RCP<MAT::Material> CreateMaterial();

    };  // class Biofilm

  } // namespace PAR

class BiofilmType : public DRT::ParObjectType
{
public:

  std::string Name() const { return "BiofilmType"; }

  static BiofilmType & Instance() { return instance_; };

  virtual DRT::ParObject* Create( const std::vector<char> & data );

private:

  static BiofilmType instance_;
};

  /*----------------------------------------------------------------------*/
  /// wrapper for scalar transport material
  class Biofilm : public Material
  {
  public:

    /// construct empty material object
	  Biofilm();

    /// construct the material object given material parameters
    explicit Biofilm(MAT::PAR::Biofilm* params);

    //! @name Packing and Unpacking

    /*!
      \brief Return unique ParObject id

      every class implementing ParObject needs a unique id defined at the
      top of drt_parobject.H (this file) and should return it in this method.
    */
    virtual int UniqueParObjectId() const { return BiofilmType::Instance().UniqueParObjectId(); }

    /*!
      \brief Pack this class so it can be communicated

      Resizes the vector data and stores all information of a class in it.
      The first information to be stored in data has to be the
      unique parobject id delivered by UniqueParObjectId() which will then
      identify the exact class on the receiving processor.

      \param data (in/out): char vector to store class information
    */
    virtual void Pack(DRT::PackBuffer& data) const;

    /*!
      \brief Unpack data from a char vector into this class

      The vector data contains all information to rebuild the
      exact copy of an instance of a class on a different processor.
      The first entry in data has to be an integer which is the unique
      parobject id defined at the top of this file and delivered by
      UniqueParObjectId().

      \param data (in) : vector storing all data to be unpacked into this
      instance.
    */
    virtual void Unpack(const std::vector<char>& data);

    //@}

    /// material type
    virtual INPAR::MAT::MaterialType MaterialType() const { return INPAR::MAT::m_biofilm; }

    /// compute reaction coefficient
    double ComputeReactionCoeff(const double csnp) const;

    /// compute reaction coefficient derivative
    double ComputeReactionCoeffDeriv(const double csnp) const;

    /// return copy of this material object
    virtual Teuchos::RCP<Material> Clone() const { return Teuchos::rcp( new Biofilm( *this ) ); }

    /// diffusivity
    double Diffusivity() const { return params_->diffusivity_; }
    /// Substrate consumption kinetics (SimpleMonod)
    const string* Kinetics() const { return params_->kinetics_; }
  	/// substrate uptake rate coefficient
    double ReaRate() const { return params_->rearate_; }
    /// substrate saturation coefficient
    double SatCoeff() const { return params_->satcoeff_; }

    /// Return quick accessible material parameter data
    virtual MAT::PAR::Parameter* Parameter() const { return params_; }

  private:

    /// my material parameters
    MAT::PAR::Biofilm* params_;

  };

}

#endif

