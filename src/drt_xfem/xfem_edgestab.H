/*!-----------------------------------------------------------------------------------------------*
\file xfem_edgestab.H

\brief provides the xfem fluid and ghost penalty stabilization based on EOS/CIP (edge-oriented, continuous interior penalty) scheme

<pre>
Maintainer: Benedikt Schott
            schott@lnm.mw.tum.de
            http://www.lnm.mw.tum.de
            089 - 289-15241
</pre>
*------------------------------------------------------------------------------------------------*/


#ifndef XFEM_EDGESTAB_H_
#define XFEM_EDGESTAB_H_


#include <vector>
#include <Teuchos_RCP.hpp>

#include <Epetra_Vector.h>


namespace DRT
{
  class AssembleStrategy;
  class Discretization;
  class DiscretizationXFEM;
  class Element;

  namespace ELEMENTS
  {
    class Fluid;
    class FluidIntFace;
  }
}

namespace GEO
{
  namespace CUT
  {
    class Side;
  }
}

namespace LINALG
{
  class SparseMatrix;
}


namespace XFEM
{
  class FluidWizard;

/*!
\brief provides the xfem fluid and ghost penalty stabilization based on EOS/CIP (edge-oriented, continuous interior penalty) scheme
 */
class XFEM_EdgeStab
{
public:

  //! constructor
  explicit XFEM_EdgeStab(Teuchos::RCP<XFEM::FluidWizard>              wizard, ///< fluid wizard
                         Teuchos::RCP<DRT::Discretization>            discret ///< discretization
                         );

  //! destructor
  ~XFEM_EdgeStab()
  {
    return;
  }


  //! prepares edge based stabilization and ghost penaly in case of XFEM and calls evaluate routine
  void EvaluateEdgeStabGhostPenalty( Teuchos::ParameterList &               eleparams,        ///< element parameter list
                                     Teuchos::RCP<DRT::Discretization>      discret,                ///< discretization
                                     DRT::ELEMENTS::FluidIntFace *          faceele,                ///< face element
                                     Teuchos::RCP<LINALG::SparseMatrix>     systemmatrix,           ///< systemmatrix
                                     Teuchos::RCP<Epetra_Vector>            systemvector,           ///< systemvector
                                     bool                                   gmsh_discret_out = true ///< stabilization gmsh output
                                     );

  //! calls the evaluate and assemble routine for edge based stabilization and ghost penaly in the XFEM
  void AssembleEdgeStabGhostPenalty( Teuchos::ParameterList &               eleparams,        ///< element parameter list
                                     const bool                             edge_based_stab,  ///< boolian for edge based fluid stabilization
                                     const bool                             ghost_penalty,    ///< boolian for XFEM ghost penalty stabilization
                                     DRT::ELEMENTS::FluidIntFace*           intface,          ///< internal face element
                                     std::vector<int> &                     nds_master,       ///< nodal dofset vector w.r.t. master element
                                     std::vector<int> &                     nds_slave,        ///< nodal dofset vector w.r.t. slave element
                                     DRT::DiscretizationXFEM &              xdiscret,         ///< XFEM discretization
                                     Teuchos::RCP<LINALG::SparseMatrix>     systemmatrix,     ///< systemmatrix
                                     Teuchos::RCP<Epetra_Vector>            systemvector      ///< systemvector
                                     );

  //! returns a map containing the ghost penalty stabilized internal face elements
  std::map<int,bool> & GetGhostPenaltyMap(){return ghost_penalty_stab_;}

  //! returns a map containing the edge based stabilized internal face elements
  std::map<int,bool> & GetEdgeBasedMap(){return edge_based_stab_;}


  private:

  //! get the cut side for face's element identified using the sorted node ids
  GEO::CUT::Side* GetCutSide(DRT::Element* faceele);


  Teuchos::RCP<XFEM::FluidWizard> wizard_;    ///< fluid wizard
  Teuchos::RCP<DRT::Discretization> discret_; ///< discretization

  std::map<int, bool> ghost_penalty_stab_;    /// map of face elements stabilized with ghost penalty
  std::map<int, bool> edge_based_stab_;       /// map of face elements stabilized with edge based fluid stabilization


};

} // namespace XFEM

#endif /*XFEM_EDGESTAB_H_*/
