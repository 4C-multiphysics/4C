/*!----------------------------------------------------------------------
\file drt_surfstress_manager.H

<pre>
Maintainer: Lena Wiechert
            wiechert@lnm.mw.tum.de
            http://www.lnm.mw.tum.de
            089 - 289-15303
</pre>

*----------------------------------------------------------------------*/

#ifndef SURFSTRESS_MANAGER_H
#define SURFSTRESS_MANAGER_H

#include <Teuchos_RefCountPtr.hpp>
#include "Teuchos_ParameterList.hpp"
#include <Teuchos_StandardParameterEntryValidators.hpp>
#include <Epetra_Vector.h>

#include <Teuchos_ParameterList.hpp>
#include "../linalg/linalg_sparsematrix.H"
#include "../drt_lib/drt_discret.H"
#include "../linalg/linalg_utils.H"
#include "../drt_io/io.H"
#include "../drt_inpar/inpar_structure.H"


using namespace std;
using namespace Teuchos;


namespace UTILS
{
/*!
\brief Class controlling surface stresses due to interfacial phenomena
and containing all necessary history data

\author wiechert (wiechert@lnm.mw.tum.de)
*/
class SurfStressManager
{
public:

  /*!
    \brief Standard Constructor

    \param discret (in): Discretization
    \param sdynparams (in): structural dynamics parameters
    \param file_prefix (in): prefix for output file name

    Note that the prefix needs to be handed in since the
    SurfStressManager can not distinguish whether it is allocated on
    the macro- or a possible micro-scale (and if so, in which
    macro-scale element and at which macro-scale GP).
  */
  SurfStressManager(Teuchos::RCP<DRT::Discretization> discret,
                    ParameterList sdynparams,
                    const string file_prefix);


  /*!
    \brief Destructor
  */
  ~SurfStressManager() {};


  /*!
    \brief Return if there are surface stress conditions
  */
  bool HaveSurfStress() const
  {
    return havesurfstress_;
  };

  /*!
    \brief Write binary results (current gamma, Gamma, A)
  */
  void WriteResults(const int istep, const double timen);

  /*!
    \brief Write restart (current gamma, Gamma, A)
  */
  void WriteRestart(const int istep, const double timen)
  {
    surfoutput_->WriteMesh(istep,timen);
    WriteResults(istep, timen);
  }

  /*!
    \brief Read restart (current gamma, Gamma, A)
  */
  void ReadRestart(const int step,
                   const string file_prefix,
                   const bool serial = false);

  /*!
    \brief Call discretization to calculate additional contributions
    due to interfacial energy

    \param p (in): parameter list
    \param dism (in): displacements (n+1-alphaf)
    \param disn (in): displacements (n+1)
    \param fint (out): internal forces
    \param stiff (out): stiffness matrix
  */
  void EvaluateSurfStress(ParameterList& p,
                          const RefCountPtr<Epetra_Vector> dism,
                          const RefCountPtr<Epetra_Vector> disn,
                          RefCountPtr<Epetra_Vector> fint,
                          RefCountPtr<LINALG::SparseOperator> stiff);

  /*!
    \brief Update history variables
  */
  void Update();

  /*!
    \brief Calculate additional internal forces and
    stiffnesses due to interfacial phenomena

    \param curvenum (in): number of time curve
    \param A (in): current interfacial area at (n+1-alphaf)
    \param Adiff (in): first partial derivatives of surface area at (n+1-alphaf)
    \param Adiff2 (in): second partial derivatives of surface area at (n+1-alphaf)
    \param Anew (in): current interfacial area at (n+1)
    \param Adiffnew (in): first partial derivatives of surface area at (n+1)
    \param fint (out): element internal force vector
    \param stiff (out): element stiffness matrix
    \param ID (in): ID of surface condition
    \param time (in): current time
    \param dt (in): timestep size
    \param surface_flag (in): flag for surfactant model (0) or ideal liquid (1)
    \param const_gamma (in): constant surface tension in case surface_flag=1
    \param k1xC (in): adsorption coefficient times bulk concentration
    \param k2 (in): desorption coefficient
    \param m1 (in): 1st isothermal slope
    \param m2 (in): 2nd isothermal slope
    \param gamma_0 (in): surface tension of water
    \param gamma_min (in): minimum surface stress
    \param gamma_min_eq (in): minimum equilibrium surface stress
    \param con_quot_max (in): maximum surfactant concentration
    \param con_quot_eq (in): equilibrium surfactant concentration
    \param newstep (in): flag for new time step
  */
  void StiffnessAndInternalForces(const int curvenum,
                                  const double& A,
                                  const RCP<Epetra_SerialDenseVector> Adiff,
                                  const RCP<Epetra_SerialDenseMatrix> Adiff2,
                                  const double& Anew,
                                  const RCP<Epetra_SerialDenseVector> Adiffnew,
                                  Epetra_SerialDenseVector& fint,
                                  Epetra_SerialDenseMatrix& stiff,
                                  const int ID,
                                  const double time,
                                  const double dt,
                                  const int surface_flag,
                                  const double const_gamma,
                                  const double k1xC,
                                  const double k2,
                                  const double m1,
                                  const double m2,
                                  const double gamma_0,
                                  const double gamma_min,
                                  const double gamma_min_eq,
                                  const double con_quot_max,
                                  const double con_quot_eq,
                                  const bool newstep);

  /*!
    \brief Surfactant model equations

    \param ID (in): ID of surface condition
    \param gamma (out): current surface stresses
    \param dgamma (out): current derivative of surface stress
    \param dt (in): timestep size
    \param k1xC (in): adsorption coefficient times bulk concentration
    \param k2 (in): desorption coefficient
    \param m1 (in): 1st isothermal slope
    \param m2 (in): 2nd isothermal slope
    \param gamma_0 (in): surface tension of water
    \param gamma_min (in): minimum surface stress
    \param gamma_min_eq (in): minimum equilibrium surface stress
    \param con_quot_max (in) maximum surfactant concentration
    \param update (in): flag for new time step
  */
  void SurfactantModel(const int ID,
                       double& gamma,
                       double& dgamma,
                       const double dt,
                       double k1xC,
                       double k2,
                       const double m1,
                       const double m2,
                       const double gamma_0,
                       const double gamma_min,
                       const double gamma_min_eq,
                       const double con_quot_max,
                       const bool newstep);

private:

  //don't want = operator and cctor
  SurfStressManager operator = (const SurfStressManager& old);
  SurfStressManager(const UTILS::SurfStressManager& old);


  //! name@ Private Attributes

  bool havesurfstress_;
  double alphaf_;
  double timen_;

  // current discretization
  Teuchos::RCP<DRT::Discretization> discret_;

  // current surface condition discretization
  Teuchos::RCP<DRT::Discretization> surfdiscret_;

  // output
  Teuchos::RCP<IO::DiscretizationWriter> surfoutput_;

  // row map of surfaces
  RCP<Epetra_Map> surfrowmap_;

  // current surface areas (n+1)^i
  RefCountPtr<Epetra_Vector> A_current_;

  // surface areas of former time step (n)
  RefCountPtr<Epetra_Vector> A_last_;

  // current non-dimensionalized surfactant concentrations (n+1)^i
  RefCountPtr<Epetra_Vector> con_current_;

  // non-dimensionalized surfactant concentrations of former time step (n)
  RefCountPtr<Epetra_Vector> con_last_;

  // current surface stresses (n+1)^i
  RefCountPtr<Epetra_Vector> gamma_current_;

  // surface stresses of former time step (n)
  RefCountPtr<Epetra_Vector> gamma_last_;

  //@}
}; //class
}//namespace DRT

#endif /*SURFSTRESS_MANAGER_H*/
