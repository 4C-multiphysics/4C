%!PS-Adobe-3.0 EPSF-3.0
%%Creator: (Interleaf, Inc.)
%%Copyright: (Copyright(c) 1993 Interleaf, Inc.)
%%Version: 6.0 1
%%BoundingBox: 241 272 582 420
%%For: (wall)
%%CreationDate: (Di, 29. Apr 2003, 17:53:17 Uhr)
%%Title: (logo_final)
%%Pages: (atend)
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginProlog
userdict /Ileaf_6.0.1 400 dict dup begin put
/MAJOR 6 def/MINOR 0 def/SUB 1 def
/bdf {bind def} bind def
/ilput {Ileaf_6.0.1 3 1 roll dup begin put} bdf
/ildef {bind end def} bdf
/ldf{load def}bdf
/xdf{exch def}bdf
/sdf{string def}bdf
/imatrix[1.0 0.0 0.0 -1.0 0.0 0.0]def
/MAXCHARS 128 def
/VMHEAD 1000 def
/BOGUSWIDTH -1 def
/mesg 64 sdf
/charstr 12 sdf
/istr 3 sdf
/ILEncoding 256 array def
/ILSymBEnc 256 array def
/ILDingbats 256 array def
/trashheap 1024 sdf
/emsg1 256 sdf
/emsg2 256 sdf
/inch{72 mul}bdf
/pgstate 0 def/DPIx 0 def/DPIy 0 def
/PSfontobj 1024 dict def
/BinaryMode false def
/L /lineto ldf
/M /moveto ldf
/C /closepath ldf
/N /newpath ldf
/LW /setlinewidth ldf
/GS /gsave ldf
/GR /grestore ldf
/SF /setfont ldf
/SD /setdash ldf
/CD /countdictstack ldf
% User definable macros for custom prologues
/BOJ {} def
/EOJ {} def
/BOS {} def
/EOS {} def
%
/initialize {Ileaf_6.0.1 begin} bdf
/terminate /end ldf
/npop {
        {pop} repeat
} bdf
%
        /hline 0 def /y 11 def /jishdr 0 def
        /nl {/y y .33 sub def 1 inch y inch M} bdf
/headerpage{
        /#copies 1 def
        /jishdr xdf
        jishdr {
                /GothicBBB-Medium-83pv-RKSJ-H findfont 14 scalefont setfont
        } {
                /Helvetica-Bold/ILhelvb ILEncoding 0 ReEncode
                /ILhelvb findfont 18 scalefont setfont
        } ifelse
        nl nl nl
        hline length dup dup
        25 gt{26 sub dup hline exch((  ...))put} {pop 0}ifelse
        exch 1 sub -1 3 -1 roll{hline exch get show nl}for
        jishdr {
                /GothicBBB-Medium-83pv-RKSJ-H findfont 8 scalefont setfont
        } {
                /Helvetica findfont 8 scalefont setfont
        } ifelse
        1 inch dup M
        emsg1 0 get 0 ne{1 inch .75 inch M emsg1 show}if
        emsg2 0 get 0 ne{1 inch .5 inch M emsg2 show}if
} bdf
%
/lline 0 def
/logme{
        (\tInterleaf::pl2ps 6.0.1\n)print
        lline length dup dup 
        5 gt {5 sub}{pop 0}ifelse
        exch 1 sub -1 3 -1 roll{(\tInterleaf::)print lline exch get print(\n)print}for
        flush
}bdf
%
        /msg /print load def
/vck{   % stack => major minor sub
        3 copy
        MAJOR ne exch MINOR ne or exch SUB ne or {
                headerpage
                4 {nl} repeat
                (Interleaf:: FATAL ERROR: pspro.ps and pl2ps versions do not agree.\n)
                dup msg show nl
                (Interleaf:: pspro.ps Version 6.0.1\n) dup msg show nl
                (Interleaf:: pl2ps Version ) dup msg show
                3 {mesg cvs dup msg show (.) dup msg show} repeat
                showpage
                quit 
        } {3 npop} ifelse
}bdf
%
/el{
        matrix currentmatrix 8 1 roll
        translate rotate scale 0 0 1 5 -2 roll arc setmatrix
}bdf
/addconic{
        matrix currentmatrix 9 1 roll
        translate rotate scale
        0 0 1 6 -3 roll 1 eq{arc}{arcn}ifelse
        setmatrix
}bdf
/dp{1 setlinejoin 1 setlinecap stroke}bdf
/ALIGN_NONE 0 def/ALIGN_OPEN 1 def/ALIGN_CLOSE 2 def
/PPWADJ [0 0 4 8 12 16 20]def
/MINSCALE .1 def
%
/plDict 7 dict ilput
        /dist 0 def /y1 0 def /x1 0 def /ymoveto 0 def /xmoveto 0 def
        /y2 0 def /x2 0 def
/plen{
        plDict begin
        /dist 0 def
        flattenpath
        {
                /y1 xdf/x1 xdf
                /ymoveto y1 def/xmoveto x1 def
        }
        {
                /y2 xdf/x2 xdf
                /dist dist y2 y1 sub dup mul
                x2 x1 sub dup mul add sqrt add def
                /y1 y2 def/x1 x2 def
        }
        {}
        {
                /y2 ymoveto def/x2 xmoveto def
                /dist dist y2 y1 sub dup mul
                x2 x1 sub dup mul add sqrt add def
                /y1 y2 def/x1 x2 def
        }
        pathforall dist
        end
}ildef
%
/spDict 21 dict ilput
        /style 0 def/width 0 def/pattern 0 def
        /scaleup 0 def/indx 0 def/adj 0 def
        /val 0 def/iszero 0 def/offset 0 def
        /patternlen 0 def/n 0 def/extralen 0 def
        /halfpatlen 0 def/scale1 0 def/scale2 0 def
        /offset 0 def/firstdash 0 def/dashpct 0 def
        /pathlen 0 def/x 0 def/y 0 def
/setpenpat{
        spDict begin
        %
        /patternlen 0 def/iszero 0 def
        /style xdf/width xdf/pattern xdf
        /scaleup DPIx 300 div def
        /indx width 1 add scaleup div 4 div cvi def
        indx 1 gt indx 7 lt and {
                /adj PPWADJ indx get scaleup mul def
                /indx 0 def
                pattern {
                        /iszero indx 2 mod def iszero
                        0 ne {adj add/val xdf} {/val xdf} ifelse
                        pattern indx val put /indx indx 1 add def
                } forall
        }if
        %
        /pathlen plen def
        pattern{patternlen add/patternlen xdf}forall
        style ALIGN_NONE eq{}if
        %
        style ALIGN_CLOSE eq{
                /n pathlen patternlen div cvi def
                /extralen pathlen cvi patternlen cvi mod def
                /halfpatlen patternlen 2 div def
                extralen halfpatlen gt {/n n 1 add def} if
                n 0 eq {/n 1 def} if
                /scale1 pathlen n patternlen mul div def
                scale1 MINSCALE gt{
                        /indx 0 def
                        pattern{
                                scale1 mul/val xdf
                                val 0 eq{/val 1 def}if
                                pattern indx val cvi put
                                /indx indx 1 add def
                        }forall
                }if
                /offset pattern 0 get 2 div round def
        }if
        %
        style ALIGN_OPEN eq{
                /firstdash pattern 0 get def
                /dashpct firstdash patternlen div def
                /n pathlen patternlen div dashpct sub cvi def
                /scale1 pathlen n dashpct add patternlen mul div def
                /scale2 pathlen n dashpct add 1 add patternlen mul div def
                /x scale2 1 sub abs def
                /y scale1 1 sub abs def
                x y lt{/scale1 scale2 def}if
                scale1 MINSCALE gt{
                        /indx 0 def
                        pattern{
                                scale1 mul/val xdf
                                val 0 eq{/val 1 def}if
                                pattern indx val cvi put
                                /indx indx 1 add def
                        }forall
                        /offset 0 def
                }if
        }if
        pattern offset setdash
        end
}ildef
%
/hpos 0 def /vpos 0 def /sEnd 0 def
/msp 0 def /nsp 0 def /str 0 def
/s{
        /msp xdf/sEnd xdf/nsp xdf/vpos xdf/hpos xdf/str xdf
        hpos vpos moveto
        msp -1 ne
        {sEnd hpos sub str stringwidth pop sub nsp div 0 msp str widthshow}
        {str show}
        ifelse
}bdf
%
/RL /rlineto ldf
/RM /rmoveto ldf
/RC /rcurveto ldf
/ptsz 0 def
/ec{
        /ptsz xdf/vpos xdf/hpos xdf
        gsave
        newpath hpos vpos moveto
        ptsz DPIx 72 div mul 1000 div dup neg scale
        30 -110 RM 573 0 RL 0 873 RL -573 0 RL 0 -873 RL
        40 833 RM 493 0 RL 0 -793 RL -493 0 RL 0 793 RL
        194 -137 RM 94 0 RL 0 94 RL -94 0 RL 0 -94 RL
        10 -176 RM 0 -83 -162 -95 -162 -257 RC
        0 -119 109 -174 208 -174 RC 116 0 201 69 201 172 RC
        0 34 RL -83 0 RL 4 -63 -6 -148 -119 -148 RC
        -74 0 -128 48 -128 121 RC 0 133 158 136 158 252 RC
        0 45 0 95 0 95 RC -75 0 RL 0 0 0 -52 0 -95 RC
        closepath fill
        grestore
}bdf
%
/ilr{BinaryMode{readstring}{readhexstring}ifelse}bdf
%
/dbsize 0 def/cf 0 def
/ccd[
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}{14}{15}
 {16}{17}{18}{19}{20}{21}{22}{23}{24}{25}{26}{27}{28}{29}{30}{31}
 {32}{33}{34}{35}{36}{37}{38}{39}{40}{41}{42}{43}{44}{45}{46}{47}
 {48}{49}{50}{51}{52}{53}{54}{55}{56}{57}{58}{59}{60}{61}{62}{63}
 {t1_1}{t1_2}{3 t1}{4 t1}{5 t1}{6 t1}{7 t1}{8 t1}
 {9 t1}{10 t1}{11 t1}{12 t1}{13 t1}{14 t1}{15 t1}{16 t1}
 {t2_1}{t2_2}{3 t2}{4 t2}{5 t2}{6 t2}{7 t2}{8 t2}
 {9 t2}{10 t2}{11 t2}{12 t2}{ditto}{rn}{raw}
]def
/t1tab[
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 16#00 16#01 16#02 16#04 16#08 16#10 16#20 16#40
 16#80 16#03 16#06 16#0c 16#18 16#30 16#60 16#c0
 16#07 16#0e 16#1c 16#38 16#70 16#e0 16#0f 16#1e
 16#3c 16#78 16#f0 16#1f 16#3e 16#7c 16#f8 16#3f
 16#7e 16#fc 16#7f 16#fe 16#ff 16#a0 16#90 16#88
 16#84 16#82 16#81 16#50 16#48 16#44 16#42 16#41
 16#28 16#24 16#22 16#21 16#14 16#12 16#11 16#0a
 16#09 16#05 16#00 16#00 16#00 16#00 16#00 16#00 
]def
/rn{
        cf read pop 32 sub 6 bitshift cf read pop 32 sub or
}bdf
/t1_1{
        2 copy 2 copy
        get cf read pop t1tab exch get xor put 1
}bdf
/t1_2{
        2 copy 2 copy
        get cf read pop t1tab exch get xor put 1 add
        2 copy 2 copy
        get cf read pop t1tab exch get xor put 1
}bdf
/t1{
        {2 copy 2 copy get cf read pop t1tab exch get xor put 1 add}repeat
        0
}bdf
/s1 1 sdf
/t2_1{
        2 copy 2 copy
        get cf s1 readhexstring pop 0 get xor put 1
}bdf
/t2_2{
        2 copy 2 copy
        get cf s1 readhexstring pop 0 get xor put 1 add
        2 copy 2 copy
        get cf s1 readhexstring pop 0 get xor put 1
}bdf
/t2{
        {2 copy 2 copy get cf s1 readhexstring pop 0 get xor put 1 add}repeat
        0
}bdf
/ditto{
        dbsize
}bdf
/raw{
        2 copy pop
        cf exch readhexstring pop pop
        dbsize
}bdf
/dl{
        dline 0 cf es readline pop
        {ccd exch get exec add}forall pop
        0 dbsize getinterval
}bdf
/rhex {currentfile exch readhexstring pop} bdf
/neg1Set{
        0 1 2 index length 1 sub {1 index exch 255 put} for
        pop
}bdf
/screenSet{
        currentscreen
        3 index dup length 0 eq {pop} {exch pop} ifelse
        exch
        4 index dup -1 eq {pop} {exch pop} ifelse
        exch
        3 -1 roll
        5 index dup -1 eq {pop} {exch pop} ifelse
        3 1 roll
        setscreen
        3 npop
}bdf
/tDict 9 dict ilput
        /mapsz 0 def/tf 0 def
        /wmap 0 def/bmap 0 def/gmap 0 def/rmap 0 def/clr 0 def
/trans {
        tDict begin
        /mapsz xdf/wmap xdf/bmap xdf/gmap xdf/rmap xdf/clr xdf
        /tf {exch mapsz mul round cvi get} bdf
        systemdict /setcolortransfer known clr and{
                rmap length 0 ne {{rmap tf}} {{}} ifelse
                gmap length 0 ne {{gmap tf}} {{}} ifelse
                bmap length 0 ne {{bmap tf}} {{}} ifelse
                {} setcolortransfer
        }{
                wmap length 0 ne {
                 [currenttransfer /exec load wmap /tf load /exec load]
                 cvx settransfer
                } if
        } ifelse
        end
}ildef
/cDict 6 dict ilput
        /sl 0 def/r 0 def/g 0 def/b 0 def/w 0 def
/clrimg{
        cDict begin
        /sl xdf
        /r sl sdf/g sl sdf/b sl sdf/w sl sdf

        systemdict /colorimage known {
                {r rhex} {g rhex} {b rhex w rhex pop} true 3 colorimage
        }{
                {r rhex pop g rhex pop b rhex pop w rhex} image
        } ifelse
        end
}ildef
/iDict 9 dict ilput
        /dbsize 0 def/cf 0 def/msk 0 def/cmprs 0 def
        /es 0 def/dline 0 def
/ilimg{
        iDict begin
        /cmprs xdf/msk xdf/dbsize xdf
        /dline dbsize sdf dline neg1Set

        msk 1 eq {
                cmprs 1 eq {
                        /cf currentfile def/es dbsize sdf
                        {dl}imagemask
                }
                {{dline rhex} imagemask} ifelse
        }
        {{dline rhex} image} ifelse
        end
}ildef
/blankImg{
        /dbsize xdf
        /scanline dbsize sdf scanline neg1Set
        {scanline}image
}def
%
/wmode 0 def/newencoding 0 def/newname 0 def
/ReEncode{
        /wmode xdf/newencoding xdf/newname xdf
        findfont dup maxlength 1 add dict begin
        { 1 index /FID ne
                {def} {pop pop} ifelse
        } forall
        currentdict end
        dup /FontName newname put
        newencoding -1 ne {dup /Encoding newencoding put} if
        wmode 1 eq wmode 2 eq or{dup /WMode 1 put}if
        wmode 2 eq{dup /CDevProc {pop pop pop pop 0 exch -1000 exch 2 div 1000} put}if
        newname exch definefont pop
} bdf
/charstr 0 def/encoding 0 def/i 0 def
/insertcharnum{
        /charstr 12 sdf
        %
        /encoding xdf/i xdf
        (char)charstr copy pop
        i istr cvs pop
        charstr 4 3 string putinterval
        encoding i charstr cvn put
}bdf
ILEncoding 0[
/Aacute/Acircumflex/Adieresis/Agrave/Aring/Atilde/Ccedilla/Eacute
/Ecircumflex/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Ntilde
/Oacute/Ocircumflex/Odieresis/Ograve/Otilde/Scaron/Uacute/Ucircumflex
/Udieresis/Ugrave/Ydieresis/Zcaron/char28/char29/char30/char31
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/quoteleft/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/quotedblleft
/aacute/acircumflex/adieresis/agrave/aring/atilde/ccedilla/eacute
/ecircumflex/edieresis/egrave/iacute/icircumflex/idieresis/igrave/ntilde
/oacute/ocircumflex/odieresis/ograve/otilde/scaron/uacute/ucircumflex
/udieresis/ugrave/ydieresis/zcaron/char156/char157/char158/char159
/char160/exclamdown/cent/sterling/fraction/yen/florin/section
/currency/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
/char176/endash/dagger/daggerdbl/periodcentered/char181/paragraph/bullet
/quotesinglbase/quotedblbase/quotedblright/guillemotright/ellipsis/perthousand/char190/questiondown
/char192/grave/acute/circumflex/tilde/macron/breve/dotaccent
/dieresis/char201/ring/cedilla/char204/hungarumlaut/ogonek/caron
/emdash/char209/char210/char211/char212/char213/char214/char215
/char216/char217/char218/char219/char220/char221/char222/char223
/char224/AE/char226/ordfeminine/char228/char229/char230/char231
/Lslash/Oslash/OE/ordmasculine/char236/char237/char238/char239
/char240/ae/char242/char243/char244/dotlessi/char246/char247
/lslash/oslash/oe/germandbls/char252/char253/char254/char255
]putinterval
ILSymBEnc 32[
/space/logicalor/arrowright/arrowdblleft/arrowdblup
/arrowdblright/lozenge/arrowhorizex/angleleft/registersans
/Upsilon1/plusminus/second/angle/greaterequal
/radical/ellipsis/Ifraktur/spade/lessequal
/minute/degree/fraction/florin/infinity
/approxequal/integral/propersuperset/parenrightbt/arrowup
/bracketrighttp/aleph/arrowdblboth/bracerightbt/integralbt
/notsubset/bracketleftbt/trademarksans/bracelefttp/braceleftmid
/braceleftbt/bracketlefttp/braceex/apple/angleright
/parenrightex/parenrighttp/arrowdown/divide/element
/summation/bracketleftex/parenlefttp/parenleftbt/dotmath
/copyrightsans/integralex/parenleftex/integraltp/registerserif
/intersection/trademarkserif/arrowdbldown/gradient/logicalnot
/reflexsubset/equivalence/propersubset/partialdiff/arrowboth
/circlemultiply/heart/bracketrightex/bracerightmid/emptyset
/bracketrightbt/Rfraktur/proportional/reflexsuperset/carriagereturn
/notequal/notelement/diamond/club/bracerighttp
/arrowleft/weierstrass/bullet/circleplus/multiply
/arrowvertex/copyrightserif/union/product/logicaland
]putinterval
0 1 32{ILSymBEnc insertcharnum}for
127 1 255{ILSymBEnc insertcharnum}for
ILDingbats 0[
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/space/a1/a2/a202/a3/a4/a5/a119
/a118/a117/a11/a12/a13/a14/a15/a16
/a105/a17/a18/a19/a20/a21/a22/a23
/a24/a25/a26/a27/a28/a6/a7/a8
/a9/a10/a29/a30/a31/a32/a33/a34
/a35/a36/a37/a38/a39/a40/a41/a42
/a43/a44/a45/a46/a47/a48/a49/a50
/a51/a52/a53/a54/a55/a56/a57/a58
/a59/a60/a61/a62/a63/a64/a65/a66
/a67/a68/a69/a70/a71/a72/a73/a74
/a203/a75/a204/a76/a77/a78/a79/a81
/a82/a83/a84/a97/a98/a99/a100/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/a205/a206/a85/a86/a87
/a88/a89/a90/a91/a92/a93/a94/a95
/a96/a101/a102/a103/a104/a106/a107/a108
/a112/a111/a110/a109/a120/a121/a122/a123
/a124/a125/a126/a127/a128/a129/a130/a131
/a132/a133/a134/a135/a136/a137/a138/a139
/a140/a141/a142/a143/a144/a145/a146/a147
/a148/a149/a150/a151/a152/a153/a154/a155
/a156/a157/a158/a159/a160/a161/a163/a164
/a196/a165/a192/a166/a167/a168/a169/a170
/a171/a172/a173/a162/a174/a175/a176/a177
/a178/a179/a193/a180/a199/a181/a200/a182
/.notdef/a201/a183/a184/a197/a185/a194/a198
/a186/a195/a187/a188/a189/a190/a191/.notdef]putinterval
%
/newFont
{
        findfont imatrix makefont
        exch DPIx 72 div mul scalefont
} bdf
/wmode 0 def/encoding 0 def/ILfont 0 def/PSfont 0 def/ptsize 0 def
/declareNFont{
        /wmode xdf/encoding xdf/ILfont xdf/PSfont xdf/ptsize xdf
        FontDirectory ILfont known false eq{PSfont ILfont encoding wmode ReEncode}if
        ptsize ILfont newFont
}bdf
/declareRFont{  % stack => Printerleaf Font Name
        PSfontobj exch 2 copy dup 10 dict dup begin
        /FontType 3 def
        /FontMatrix[DPIx 300 div 0 0 DPIy 300 div 0 0]def
        /FontBBox[0 0 0 0]def
        /Encoding ILEncoding def
        /BuildChar{
                0 begin
                /char xdf
                /fontdict xdf
                /charname fontdict/Encoding get char get def
                /charinfo fontdict/CharData get charname get def
                /wx charinfo 0 get def
                charinfo 0 get BOGUSWIDTH eq
                {puterrchar}
                {
                        /charbbox charinfo 1 4 getinterval def
                        wx 0 charbbox aload pop setcachedevice  
                        charinfo 5 get charinfo 6 get true
                        fontdict/imagemaskmatrix get
                        dup 5 charinfo 8 get put
                        dup 4 charinfo 7 get put
                        charinfo 9 get
                        imagemask
                }
                ifelse
                end
        }def
        /BuildChar load 0 7 dict put
        /imagemaskmatrix[1 0 0 1 0 0]def
        /CharData MAXCHARS dict def
        end
        definefont put get
        /CharData get/space[16 0 0 1 1 16 1 0 0[<00>]cvx]put
}def
%
/egDict 3 dict ilput
        /chnum 0 def/font 0 def/w 0 def
/numLoadEmptyGlyph{
        egDict begin
        /chnum xdf/font xdf/w xdf
        w font PSfontobj font get/Encoding get chnum get
        LoadEmptyGlyph
        end
}ildef
/puterrchar{
        PSfontobj errfontname get dup
        /BuildChar get errcharno exch exec
        (\tInterleaf::out of VM loading bitmap(?). Try breaking up document\n)
        dup print flush
        emsg1 copy pop
}def
/QUIT{
        (\tInterleaf::completely out of memory. \n\tTry breaking up the document \n)
        dup print flush
        emsg2 copy pop stop
}def
/lgDict 15 dict ilput
        /charno 0 def/fontname 0 def/height 0 def/width 0 def
        /hsize 0 def/nbytes 0 def/glyph 0 def/tx 0 def/ty 0 def/lly 0 def
        /llx 0 def/urx 0 def/lsb 0 def/glyph 0 def/NoVMHead 0 def
/LoadGlyph{
        lgDict begin
        %
        /charno xdf/fontname xdf/height xdf/vadj xdf/width xdf/hsize xdf/lsb xdf
        /NoVMHead vmstatus exch sub exch pop dup
         VMHEAD 2 idiv lt{QUIT}if
         VMHEAD lt{true}{false}ifelse def
        /nbytes hsize 15 add 16 idiv 2 mul height mul def       
        NoVMHead not{/glyph nbytes sdf}if
        currentfile NoVMHead {trashheap 0 nbytes getinterval}{glyph}ifelse
        readhexstring 2 npop
        /hsize hsize 15 add 16 idiv 16 mul def
        /lly height vadj add def
        /urx hsize lsb add def
        /tx lsb neg def
        /ty vadj neg def
        PSfontobj fontname get dup /Encoding get charno get
        exch /CharData get exch
        NoVMHead {[BOGUSWIDTH]}
        {[width lsb lly urx vadj hsize height tx ty[glyph]cvx]}ifelse
        put end
}ildef
%
        /scfrq 0 def/scang 0 def
/solidFill{
        /scfrq xdf/scang xdf/scproc xdf
        gsave
        scfrq -1 ne scang -1 ne or /scproc load length 0 ne or{
                scfrq scang /scproc load screenSet
        }if
        eofill
        grestore
}bdf
        /patchar 0 def/pffontname 0 def
        /fillpatset {/patchar xdf/pffontname xdf} def
        /patstr 1 sdf
/patternFill{
        /scfrq xdf/scang xdf/scproc xdf
        gsave 
        scfrq -1 ne scang -1 ne or /scproc load length 0 ne or{
                scfrq scang /scproc load screenSet
        }if
        currentfont PSfontobj pffontname get setfont pFill
        dup null ne{setfont}{pop}ifelse
        grestore
}bdf
/pfDict 7 dict ilput
        /paty 0 def/patx 0 def/#chars 0 def
        /ry 0 def/rx 0 def/ly 0 def/lx 0 def
/pFill{
        pfDict begin
        gsave 1 1 1 setrgbcolor eofill grestore
        % setup factors
        patstr 0 patchar put
        patstr stringwidth pop
        /paty exch def/patx paty def
        % setup region
        eoclip  
        pathbbox
        /ry exch floor def
        /rx exch floor def
        /ly exch ceiling cvi
        dup 0 lt{paty sub}if cvi
        dup paty ceiling cvi mod sub def
        /lx exch ceiling cvi
        dup 0 lt{patx sub}if cvi
        dup patx ceiling cvi mod sub def
        /ry ry paty add def
        /ly ly paty sub def
        newpath
        % blastchars
        /#chars rx lx sub patx div ceiling cvi def
        ly paty ry{lx exch M #chars{patstr show}repeat}for
        newpath
        end
}ildef
%
/BeginEpsf{
        /ILB4Epsf save def
        /clp{newpath moveto lineto lineto lineto closepath clip} def
        /ILDictCnt countdictstack def
        /ILOpCnt count 1 sub def
        0 setgray 0 setlinecap
        1 setlinewidth 0 setlinejoin
        10 setmiterlimit [] 0 setdash newpath
        /showpage {} def
}def
/EndEpsf{
        count ILOpCnt sub {pop} repeat
        countdictstack ILDictCnt sub {end} repeat
        ILB4Epsf restore
}def
%
/clp{newpath M L L L closepath clip}bdf
%
        /cm 0 def/pgw 0 def/pgl 0 def/cn 0 def/pw 0 def
        /pw2 0 def/lnx 0 def/lny 0 def
/cropdefs[
{} % 0
{ % 1
        0 0 M lnx neg 0 L
        0 0 M 0 lny neg L
}
{ % 2
        0 0 M lnx 0 L
        0 0 M 0 lny L
}
{ % 3
        lnx .25 mul neg 0 M lnx neg 0 L
        0 lny .25 mul neg M 0 lny neg L
}
{ % 4
        lnx .25 mul 0 M lnx 0 L
        0 lny .25 mul M 0 lny L
}
{ % 5
        lnx neg 0 M lnx 0 L
        0 lny neg M 0 lny L
}
{  % 6
        [lnx .75 mul lnx .50 mul]0 setdash
        lnx neg 0 M lnx 0 L 0 lny neg M 0 lny L
}
{ % 7
        cn 1 eq cn 3 eq or {90 rotate}if
        0 0 M lnx neg 0 L
        0 lny M 0 lny neg L
        cn 1 eq cn 3 eq or {90 neg rotate}if
        /cn cn 1 add def
}
]def
/cutmarks{      %stack: pglen pgwid cmtype => ---  
        0 SSG [] 0 setdash
        /cm xdf/pgwid xdf/pglen xdf
        /pw DPIx 80 div def/pw2 pw 2 div def
        /lnx DPIx 4 div def/lny DPIy 4 div def
        pw LW
        /cn 0 def newpath
        % upper left corner
        pw2 neg pw2 neg translate
        cropdefs cm get exec
        % upper right corner
        pgwid pw add 0 translate
        90 rotate cropdefs cm get exec 90 neg rotate
        % lower right corner
        0 pglen pw add translate
        180 rotate cropdefs cm get exec 180 neg rotate
        % lower left corner
        pgwid pw add neg 0 translate
        270 rotate cropdefs cm get exec 270 neg rotate
        dp
}bdf
/bop {/pgstate save def} bdf
/eop {pgstate restore showpage} bdf
/ndf
{
        1 index where {pop pop pop} {dup xcheck {bind} if def} ifelse
} bdf
/setcmykcolor
{
        4 copy pop add add
        0 eq
                {1 sub neg setgray 3 npop}
                {
                        1 sub 4 1 roll
                        3 {
                                3 index add neg dup 0 lt {pop 0} if
                                3 1 roll
                        } repeat
                        setrgbcolor pop
                }
        ifelse
} ndf
/packedarray
{
        array astore readonly
} ndf
/findcmykcustomcolor
{
        5 packedarray
} ndf
/setcustomcolor
{
        exch
        aload pop pop
        4 {4 index mul 4 1 roll} repeat
        5 -1 roll pop
        setcmykcolor
} ndf
/setseparationgray {setgray} ndf
/SSG {setseparationgray} def
/FC {findcmykcustomcolor def} bdf
/CC {setcustomcolor} def
/ilfeatend{
        stopped cleartomark CD exch sub dup
        0 gt {{end} repeat} {pop} ifelse
}bdf
end 
%%EndProlog
%%BeginSetup
Ileaf_6.0.1 /initialize get exec
%%EndSetup
bop
/DPIx 1270 def /DPIy 1270 def
72 DPIx div 72 DPIy div neg scale
0 10505 neg translate
%%IncludeResource: font Times-BoldItalic
/wst:timsps100bi 100.00 /Times-BoldItalic /wst:timspsbi ILEncoding 0 declareNFont def
%%IncludeResource: font Helvetica
/wst:helvps22 22.00 /Helvetica /wst:helvps ILEncoding 0 declareNFont def
GS
-8 10504 14842 10504 14842 -8 -8 -8 clp
N
0 LW
[] 0 SD
0.00 1.00 1.00 0.00 setcmykcolor
4339 5655 M
4506 5387 L
4506 5387 L
4949 5387 L
4820 5655 L
C
{} -1.0 -1.0 solidFill
0.00 0.00 0.00 1.00 setcmykcolor
N
4339 5667 M
4506 5387 L
4506 5387 L
4949 5387 L
4820 5655 L
C
4 LW
N
0.00 0.00 0.00 1.00 setcmykcolor
7257 4023 M
7257 4300 L
dp
N
7257 4361 M
7257 4638 L
dp
N
7257 4711 M
7257 4988 L
dp
N
7257 5045 M
7257 5322 L
dp
N
7257 5387 M
7257 5664 L
dp
N
6859 4023 M
6825 4300 L
dp
N
6819 4361 M
6785 4638 L
dp
N
6777 4711 M
6743 4988 L
dp
N
6737 5049 M
6703 5326 L
dp
N
6696 5387 M
6662 5664 L
dp
N
6461 4023 M
6394 4300 L
dp
N
6382 4362 M
6314 4639 L
dp
N
6299 4707 M
6231 4983 L
dp
N
6217 5047 M
6150 5324 L
dp
N
6136 5387 M
6068 5664 L
dp
N
6064 4023 M
5963 4300 L
dp
N
5943 4364 M
5842 4641 L
dp
N
5820 4706 M
5719 4983 L
dp
N
5699 5045 M
5597 5322 L
dp
N
5575 5387 M
5473 5664 L
dp
N
5666 4023 M
5531 4300 L
dp
N
5507 4360 M
5372 4637 L
dp
N
5340 4708 M
5205 4985 L
dp
N
5178 5045 M
5043 5322 L
dp
N
5014 5387 M
4879 5664 L
dp
N
10250 5699 M
4264 5699 L
4264 5699 L
5290 3989 L
9224 3989 L
C
dp
N
6864 4335 M
7213 4335 L
dp
N
6429 4335 M
6777 4335 L
dp
N
5994 4335 M
6342 4335 L
dp
N
5558 4335 M
5906 4335 L
dp
N
5123 4335 M
5471 4335 L
dp
N
7209 4673 M
6828 4673 L
dp
N
6734 4673 M
6353 4673 L
dp
N
6258 4676 M
5877 4676 L
dp
N
5784 4672 M
5403 4672 L
dp
N
5306 4676 M
4925 4676 L
dp
N
7205 5023 M
6791 5023 L
dp
N
6689 5018 M
6275 5018 L
dp
N
6172 5017 M
5758 5017 L
dp
N
5654 5020 M
5240 5020 L
dp
N
5135 5022 M
4721 5022 L
dp
N
5529 5357 M
5082 5357 L
dp
N
6085 5359 M
5639 5359 L
dp
N
6643 5361 M
6196 5361 L
dp
N
7201 5357 M
6754 5357 L
dp
N
4973 5354 M
4526 5354 L
dp
N
7654 4023 M
7688 4300 L
dp
N
7695 4361 M
7729 4638 L
dp
N
7736 4711 M
7770 4988 L
dp
N
7777 5049 M
7811 5326 L
dp
N
7817 5387 M
7851 5664 L
dp
N
8052 4023 M
8120 4300 L
dp
N
8132 4362 M
8199 4639 L
dp
N
8215 4707 M
8282 4983 L
dp
N
8296 5047 M
8364 5324 L
dp
N
8378 5387 M
8446 5664 L
dp
N
8450 4023 M
8551 4300 L
dp
N
8570 4364 M
8672 4641 L
dp
N
8693 4706 M
8795 4983 L
dp
N
8815 5045 M
8916 5322 L
dp
N
8939 5387 M
9040 5664 L
dp
N
8847 4023 M
8982 4300 L
dp
N
9007 4360 M
9141 4637 L
dp
N
9173 4708 M
9308 4985 L
dp
N
9335 5045 M
9470 5322 L
dp
N
9500 5387 M
9634 5664 L
dp
N
7649 4335 M
7300 4335 L
dp
N
8085 4335 M
7736 4335 L
dp
N
8520 4335 M
8172 4335 L
dp
N
8955 4335 M
8607 4335 L
dp
N
9391 4335 M
9042 4335 L
dp
N
7304 4673 M
7685 4673 L
dp
N
7779 4673 M
8160 4673 L
dp
N
8256 4676 M
8637 4676 L
dp
N
8730 4672 M
9111 4672 L
dp
N
9208 4676 M
9588 4676 L
dp
N
7308 5023 M
7722 5023 L
dp
N
7825 5018 M
8239 5018 L
dp
N
8341 5017 M
8755 5017 L
dp
N
8859 5020 M
9273 5020 L
dp
N
9378 5022 M
9792 5022 L
dp
N
8985 5357 M
9431 5357 L
dp
N
8428 5359 M
8875 5359 L
dp
N
7871 5361 M
8317 5361 L
dp
N
7313 5357 M
7759 5357 L
dp
N
9541 5354 M
9987 5354 L
dp
%%wst:helvps22 SF
%%<4c656872737475686c20669872204e756d65726973636865204d656368616e696b> 4235 6089 3 10340 32 s
wst:timsps100bi SF
0.96 0.53 0.00 0.27 setcmykcolor
<6c6e> 5917 4938 0 7388 -1 s
<4d> 7459 4294 0 9027 -1 s
GR
eop
%%Trailer
Ileaf_6.0.1 /terminate get exec
%%DocumentNeededResources: font Times-BoldItalic
%%+ font Helvetica
%%DocumentSuppliedResources:
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentCustomColors:
%%EOF