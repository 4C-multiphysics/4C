{% set input_file1 = "contact2D_centrdiff.4C.yaml" %}
{% set input_file1_content = load_input_file(input_file1) %}
{% set input_file2 = "contact2D_multibody.4C.yaml" %}
{% set input_file2_content = load_input_file(input_file2) %}
{% set input_file3 = "contact3D_unbiased_self_hex8_nitsche.4C.yaml" %}
{% set input_file3_content = load_input_file(input_file3) %}
{% set input_file4 = "meshtying2D_inf_plate.4C.yaml" %}
{% set input_file4_content = load_input_file(input_file4) %}
{% set meta_file_content = load_meta_data() %}

.. _contactandmeshtying:

Contact and Mesh tying
======================

.. _ contact:

Contact
--------

Contact conditions, which in |FOURC| are set up by the keyword ``MORTAR`` are defined along lines (2D)
or surfaces (3D). Two types of contact can be defined: Master/Slave contact and Selfcontact. In any case, at least one contact pair is necessary:

- 2D:

{{ section_dump(input_file1_content, "DESIGN LINE MORTAR CONTACT CONDITIONS 2D") }}

for master/slave contact (taken from {{ input_file1}}), or

{{ section_dump(input_file2_content, "DESIGN LINE MORTAR CONTACT CONDITIONS 2D") }}

for self contact (taken from {{input_file2}}).
There may be also further parameters attached, see also :ref:`DESIGN MORTAR CONTACT CONDITIONS 2D<secdesignlinemortarcontactconditions2d>`.

- 3D:

  The 3D case is analogous, just the condition name is different, see see :ref:`DESIGN SURF MORTAR CONTACT CONDITIONS 3D<secdesignsurfmortarcontactconditions3d>`.

The further parameters are:

.. code-block:: yaml

   Initialization: [Inactive|Active]
   FrCoeffOrBound: 0.0
   AdhesionBound: 0.0
   Application: [Solidcontact | Beamtosolidcontact | Beamtosolidmeshtying]
   TwoHalfPass: 0|1
   RefConfCheckNonSmoothSelfContactSurface: 0|1
   ConstitutiveLawID: <num>

Remarks:

- The keyword ``Active`` declares a surface pair to be in contact initially.
  it is only valid for slave surfaces
  (but ``Inactive`` must be given for Master surfaces as well if further parameters are given).
  The default is ``Inactive`` anyway, and it is not necessary to denote surfaces as being active,
  since a contact search is conducted in any case.
- While all further parameters are optional, one must not miss any parameter between others;
  it is only possible to omit parameters at the end.
- ``AdhesionBound`` declares an adhesive contact condition.
  The value given subsequently is the tensile strength of the adhesive joint.
  Note that you have to define the parameter ``ADHESION`` as described in :ref:`CONTACT DYNAMIC <SECcontactdynamic>`.`
- the parameters ``TwoHalfPass`` and ``RefConfCheckNonSmoothSelfContactSurface``
  do only make sense for self contact.


Contact and symmetry conditions
"""""""""""""""""""""""""""""""

When a contact surface touches a symmetry plane or some other dirichlet boundary condition
(or a contact line touches a line with dirichlet conditions, respectively),
one has three possibilities to overcome the clashing of two contstrains at the common line/point.
One can

#. remove the boundary condition,
#. declare a specific condition to allow both conditions.

For option one, one can simply define a line dirichlet condition,
where all dirichlet boundary conditions are removed.

For the second option one can tell |FOURC| that a line belongs to the symmetry plane / dirichlet boundary condition *and* the contact surface.
This is done using the so-called mortar symmetry conditions (Note that the word *symmetry* does not mean that it must be a symmetry condition,
it can be any dirichlet boundary condition, even with non-zero displacement value).
See the symmetry conditions from the example {{input_file3}}:

{{ section_dump(input_file3_content, ["DESIGN LINE MORTAR SYMMETRY CONDITIONS 3D", "DESIGN POINT MORTAR SYMMETRY CONDITIONS 2D/3D"]) }}

The ONOFF value has to be set to one in the direction of the dirichlet boundary condition.
If a contact surface touches two planes with dirchlet conditions,
the ``DESIGN POINT MORTAR SYMMETRY`` has to be defined as well.

**Reference:** :ref:`DESIGN MORTAR SYMMETRY CONDITIONS<secdesignlinemortarsymmetryconditions3d>`, :ref:`DESIGN MORTAR SYMMETRY CONDITIONS 2D/3D<secdesignpointmortarsymmetryconditions2d_3d>`.


Contact at edges/corners
"""""""""""""""""""""""""

If an edge of a (3D) structure is involved in contact, one may define the edge separately
(in addition to the adjacent contact surfaces, which probably may also come into contact).
For this, the ``MORTAR EDGE CONDITIONS`` are needed, see also :ref:`DESIGN MORTAR EDGE CONDITIONS 3D<secdesignlinemortaredgeconditions3d>`, :ref:`DESIGN MORTAR CORNER CONDITIONS 2D/3D<secdesignpointmortarcornerconditions2d_3d>`

.. _meshtying:

Mesh Tying
-----------

Different meshes can be connected with the `MORTAR COUPLING` definition. Two different application cases are envisioned:

- Incompatible meshes of two geometrical regions in one simulation are tied. This may be useful if a very coarse mesh shall be connected to a much finer region.

- In multiphysics simulations, two different meshes can be used for the different physical parts
  (e.g. temperature and structure, since high temperature gradients may occur in other regions than high highly stressed regions).

See for example the conditions in {{ input_file4 }}, where incompatible meshes are glued together:

{{ section_dump(input_file4_content, "DESIGN LINE MORTAR COUPLING CONDITIONS 2D") }}

Similar couplings can be defined in the following conditions:

{{ find_sections_in_meta(meta_file_content, ".* MORTAR COUPLING CONDITION.*") }}

See the reference :ref:`DESIGN MORTAR COUPLING CONDITIONS 3D<secdesignsurfmortarcouplingconditions3d>`, :ref:`DESIGN MORTAR COUPLING CONDITIONS 2D<secdesignlinemortarcouplingconditions2d>`, :ref:`DESIGN MORTAR MULTI-COUPLING CONDITIONS 3D<secdesignsurfmortarmulti-couplingconditions3d>`, :ref:`DESIGN MORTAR MULTI-COUPLING CONDITIONS 2D<secdesignlinemortarmulti-couplingconditions2d>`
