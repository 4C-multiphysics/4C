{% set input_file1 = "solid_runtime_hex8.4C.yaml" %}
{% set input_file1_content = load_input_file("parsed_files/" + input_file1) %}
{% set input_file2 = "xfluid_beltrami_stat_16x16x16_hk_vol_equivalent.4C.yaml" %}
{% set input_file2_content = load_input_file("parsed_files/" + input_file2) %}
{% set tutorial_file = "tutorial_solid.4C.yaml" %}
{% set tutorial_file_content = load_input_file(tutorial_file) %}

.. _inputfile:

Input Files
============

Input file format
-----------------

|FOURC| has a proprietary input file format.
The file format is yaml, that is, the input is human-readable.
Its compact form, widely available readers / programming libraries for reading
as well as the opportunity to include comments make it a versatile format for the data input.
Since any file in JSON format can be read by the yaml input reader, the input file may be in JSON as well.
Note that only the suffixes ".yaml", ".yml" and ".json" are recognized by program.
If the input file has a different suffix, it will be recognized as the previous (outdated) proprietary format that was used until 2024 (so-called .dat file).
Even though the old file format can still be read for historical reasons, it is not part of the documentation anymore.

Each yaml file consists of a collection of input sections.
These usually contain a dictionary of parameters, e.g.:

{{ section_dump(input_file1_content, ["SOLVER 1"]) }}

Some of them contain lists of entries, of which each element itself may be a string, a number or a dictionary again.
The most important section, which contain lists, are:

- node coordinates
- element definitions
- set definitions
- materials
- boundary conditions
- functions

An example of some of those sections (taken from {{input_file1}}) is shown here:

{{ section_dump(input_file1_content, ["NODE COORDS", "STRUCTURE ELEMENTS", "MATERIALS", "DESIGN SURF DIRICH CONDITIONS", ]) }}

Note that each input section must be unique, that is, it must not appear twice.

Include files
-------------

It is possible to include additional files in an input file.
During the input read process, they are concatenated internally, such that |FOURC| regards them as one input
(which means that also in different files the sections must not be repeated). The structure is like this (taken from the test file {{input_file2}} ).

{{ section_dump(input_file2_content, ["INCLUDES"]) }}

Also nested includes are possible, that is, an included file may call include files itself.

.. _input_from_exodus:

Geometry input in Exodus II format
----------------------------------

The geometry information (nodal coordinates, elements, node sets, and side sets), can be defined in Exodus II format,
which is a format that may be exported by finite element preprocessing software products, such as *Coreform Cubit* `<http://cubit.sandia.gov/>`_, see also in the :ref:`preprocessing section<cubit>`.
The section that reads these exodus input files, looks like this:

{{ section_dump(tutorial_file_content, ["STRUCTURE GEOMETRY"]) }}
