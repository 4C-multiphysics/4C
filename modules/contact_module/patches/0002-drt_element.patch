From df990750fc6c2a6fdd8d648e41382bb695ba490c Mon Sep 17 00:00:00 2001
From: Tobias Wiesner <wiesner@lnm.mw.tum.de>
Date: Mon, 24 Nov 2014 16:01:45 +0100
Subject: [PATCH 02/16] drt_element:

- remove linedefinition
- remove material
---
 src/drt_lib/drt_element.H   |   70 -------------------------------
 src/drt_lib/drt_element.cpp |   97 +++----------------------------------------
 2 files changed, 6 insertions(+), 161 deletions(-)

diff --git a/src/drt_lib/drt_element.H b/src/drt_lib/drt_element.H
index b01cd7c..04a071e 100644
--- a/src/drt_lib/drt_element.H
+++ b/src/drt_lib/drt_element.H
@@ -21,11 +21,6 @@
 #include "drt_condition.H"
 
 // forward declarations
-namespace MAT
-{
-  class Material;
-}
-
 namespace DRT
 {
 
@@ -629,21 +624,6 @@
   virtual void Print(std::ostream& os) const;
 
   /*!
-  \brief Return the material of this element
-
-  Note: The input parameter nummat is not the material number from input file
-        as in SetMaterial(int matnum), but the number of the material within
-        the vector of materials the element holds
-
-  \param nummat (in): number of requested material
-  */
-  virtual Teuchos::RCP<MAT::Material> Material(int nummat=0) const
-  {
-    dsassert(nummat<(int)mat_.size(),"invalid material number");
-    return mat_[nummat];
-  }
-
-  /*!
   \brief Check whether the element has only ghost nodes
 
   Note: If the element has only ghost nodes, the element will not be allowed
@@ -732,13 +712,6 @@
   void SetId(const int id) { id_ = id; }
 
   /*!
-  \brief Read input for this element
-  */
-  virtual bool ReadElement(const std::string& eletype,
-                           const std::string& distype,
-                           DRT::INPUT::LineDefinition* linedef);
-
-  /*!
     \brief Set processor local col id
 
     \param lid: processor local col id
@@ -775,13 +748,6 @@
   void SetNodeIds(const int nnode, const int* nodes);
 
   /*!
-  \brief Set a list of node ids this element is connected to
-
-  Here the node ids are directly taken from an input line.
-  */
-  void SetNodeIds(const std::string& distype, DRT::INPUT::LineDefinition* linedef);
-
-  /*!
   \brief Set a the face with index faceindex this element is connected to
 
   Sets the face pointer of the face adjacent to this element, using NumFace() as
@@ -795,39 +761,6 @@
   void SetFace(const int         faceindex,
                DRT::FaceElement* faceelement);
 
-  /// Set element material
-  /*!
-    Material numbers are read from the input file. The element stores
-    a corresponding material object. These material objects can be
-    anything from very simple (just a little calculation) to highly
-    sophisticated with history data. The material is packed and
-    unpacked along with its element.
-
-    \param matnum : material number from input file
-   */
-  virtual void SetMaterial(int matnum);
-
-  /// Add element material
-  /*!
-    In case of volume coupled problems the element needs information
-    from the material of the other field. Therefore, it is possible to
-    add pointers on other materials from other elements.
-
-    \param mat: material to be added
-    \param nummat (out):  number of materials the element holds
-   */
-  int AddMaterial(Teuchos::RCP<MAT::Material> mat);
-
-  /// Number of materials of the element
-  /*!
-    In case of volume coupled problems the element needs information
-    from the material of the other field. Therefore, it is possible to
-    add pointers on other materials from other elements.
-
-    \param nummat (out):  number of materials the element holds
-   */
-  int NumMaterial() const {return mat_.size();};
-
   //@}
 
   //! @name Conditions
@@ -1216,9 +1149,6 @@
   //! \brief Some conditions e.g. BCs
   std::multimap<std::string,Teuchos::RCP<Condition> > condition_;
 
-  //! vector of material objects of element
-  std::vector<Teuchos::RCP<MAT::Material> > mat_;
-
   //! is this a nurbs element?
   bool isNurbs_;
 
 
diff --git a/src/drt_lib/drt_element.cpp b/src/drt_lib/drt_element.cpp
index 65aa905..088898f 100644
--- a/src/drt_lib/drt_element.cpp
+++ b/src/drt_lib/drt_element.cpp
@@ -17,11 +17,7 @@
 #include "drt_dserror.H"
 #include "drt_condition.H"
 #include "../drt_lib/drt_utils_factory.H"
-#include "drt_linedefinition.H"
 
-#include "../drt_mat/material.H"
-
-
 /*----------------------------------------------------------------------*/
 /*----------------------------------------------------------------------*/
 DRT::Element::DiscretizationType DRT::StringToDistype(std::string name)
@@ -70,9 +66,7 @@
 ParObject(),
 id_(id),
 lid_(-1),
-owner_(owner),
-mat_(1,Teuchos::null),
-isNurbs_(false)
+owner_(owner)
 {}
 
 /*----------------------------------------------------------------------*
@@ -85,9 +79,7 @@
 owner_(old.owner_),
 nodeid_(old.nodeid_),
 node_(old.node_),
-face_(old.face_),
-mat_(1,Teuchos::null),
-isNurbs_(old.isNurbs_)
+face_(old.face_)
 {
   // we do NOT want a deep copy of the condition_ as the condition
   // is only a reference in the elements anyway
@@ -95,16 +87,6 @@
   for (fool=old.condition_.begin(); fool!=old.condition_.end(); ++fool)
     SetCondition(fool->first,fool->second);
 
-  if(old.mat_.size())
-  {
-    mat_.resize(old.mat_.size());
-    for (unsigned iter=0; iter<old.mat_.size(); ++iter)
-      if ( old.mat_[iter]!=Teuchos::null )
-        mat_[iter]=(old.mat_[iter]->Clone());
-  }
-  else
-    mat_[0] = Teuchos::null;
-
   return;
 }
 
@@ -157,17 +139,6 @@
   return;
 }
 
-/*----------------------------------------------------------------------*/
-/*----------------------------------------------------------------------*/
-bool DRT::Element::ReadElement(const std::string& eletype,
-                               const std::string& distype,
-                               DRT::INPUT::LineDefinition* linedef)
-{
-  dserror("subclass implementations missing");
-  return false;
-}
-
-
 /*----------------------------------------------------------------------*
  |  set node numbers to element (public)                     mwgee 11/06|
  *----------------------------------------------------------------------*/
@@ -180,43 +151,7 @@
 }
 
 
-/*----------------------------------------------------------------------*/
-/*----------------------------------------------------------------------*/
-void DRT::Element::SetNodeIds(const std::string& distype, DRT::INPUT::LineDefinition* linedef)
-{
-  linedef->ExtractIntVector(distype,nodeid_);
-  for (unsigned i=0; i<nodeid_.size(); ++i)
-    nodeid_[i] -= 1;
-  node_.resize(0);
-}
-
-
 /*----------------------------------------------------------------------*
- |  create material class (public)                                 05/07|
- *----------------------------------------------------------------------*/
-void DRT::Element::SetMaterial(int matnum)
-{
-  Teuchos::RCP<MAT::Material> mat = MAT::Material::Factory(matnum);
-  if(mat == Teuchos::null)
-    dserror("Invalid material given to the element. \n"
-        "Invalid are Summands of the Elasthyper-Toolbox and single Growth-Materials. \n"
-        "If you like to use a Summand of the Elasthyper-Material define it via MAT_ElastHyper. \n"
-        "If you like to use a Growth-Material define it via the according base material.");
-  mat_[0] = mat;
-}
-
-/*----------------------------------------------------------------------*
- |  add material to element (public)                          vuong 02/14|
- *----------------------------------------------------------------------*/
-int DRT::Element::AddMaterial(Teuchos::RCP<MAT::Material> mat)
-{
-  mat_.push_back(mat);
-
-  return mat_.size();
-}
-
-
-/*----------------------------------------------------------------------*
  |  Pack data                                                  (public) |
  |                                                            gee 02/07 |
  *----------------------------------------------------------------------*/
@@ -234,17 +169,9 @@
   AddtoPack(data,owner_);
   // add vector nodeid_
   AddtoPack(data,nodeid_);
-  // add material
-  if (mat_[0]!=Teuchos::null)
-  {
-    //pack only first material
-    mat_[0]->Pack(data);
-  }
-  else
-  {
-    int size = 0;
-    AddtoPack(data,size);
-  }
+  // add material (none)
+  int size = 0;
+  AddtoPack(data,size);
 
   return;
 }
@@ -265,22 +193,9 @@
   ExtractfromPack(position,data,owner_);
   // nodeid_
   ExtractfromPack(position,data,nodeid_);
-  // mat_
+  // mat_ (no material)
   std::vector<char> tmp;
   ExtractfromPack(position,data,tmp);
-  if (tmp.size()>0)
-  {
-    DRT::ParObject* o = DRT::UTILS::Factory(tmp);
-    MAT::Material* mat = dynamic_cast<MAT::Material*>(o);
-    if (mat==NULL)
-      dserror("failed to unpack material");
-    //unpack only first material
-    mat_[0] = Teuchos::rcp(mat);
-  }
-  else
-  {
-    mat_[0] = Teuchos::null;
-  }
 
   // node_, face_, parent_master_, parent_slave_ are NOT communicated
   node_.resize(0);

