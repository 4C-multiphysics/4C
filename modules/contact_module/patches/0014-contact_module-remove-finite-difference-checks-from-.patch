From 3e25827bca9e01bb2a77578286b779f905a93309 Mon Sep 17 00:00:00 2001
From: Tobias Wiesner <wiesner@lnm.mw.tum.de>
Date: Tue, 16 Dec 2014 01:47:06 +0100
Subject: [PATCH 14/16] contact_module: remove finite difference checks from
 contact wear strategy

---
 src/drt_contact/contact_wear_interface.H           |   80 +---------
 src/drt_contact/contact_wear_lagrange_strategy.cpp |  180 --------------------
 2 files changed, 2 insertions(+), 258 deletions(-)

diff --git a/src/drt_contact/contact_wear_interface.H b/src/drt_contact/contact_wear_interface.H
index d618088..4617579 100644
--- a/src/drt_contact/contact_wear_interface.H
+++ b/src/drt_contact/contact_wear_interface.H
@@ -177,90 +177,14 @@ public:
    */
    virtual bool BuildActiveSetMaster();
 
-   /*!
-   \brief Check mortar wear T derivatives with finite differences
-
-   */
-   void FDCheckMortarTDeriv();
-
-   /*!
-   \brief Check mortar wear T derivatives with finite differences (Master)
-
-   */
-   void FDCheckMortarT_Master_Deriv();
-
-   /*!
-   \brief Check mortar wear E derivatives with finite differences
-
-   */
-   void FDCheckMortarEDeriv();
-
-   /*!
-   \brief Check mortar wear E derivatives with finite differences (for master)
-
-   */
-   void FDCheckMortarE_Master_Deriv();
-
-   /*!
-   \brief Check mortar wear T derivatives with finite differences
-     --> for wear condition
-
-   */
-   void FDCheckDerivT_D(LINALG::SparseMatrix& lintdis);
-
-   /*!
-   \brief Check mortar wear T derivatives with finite differences
-     --> for wear condition (Master)
-
-   */
-   void FDCheckDerivT_D_Master(LINALG::SparseMatrix& lintdis);
-
-   /*!
-   \brief Check mortar wear E derivatives with finite differences
-     --> for wear condition
-
-   */
-   void FDCheckDerivE_D(LINALG::SparseMatrix& linedis);
-
-   /*!
-   \brief Check mortar wear E derivatives with finite differences
-     --> for wear condition (Master)
-
-   */
-   void FDCheckDerivE_D_Master(LINALG::SparseMatrix& linedis);
-   /*!
-   \brief Check weighted gap g derivatives with finite differences
-
-   */
-   void FDCheckGapDeriv();
-
-   /*!
-   \brief Check weighted gap g derivatives with finite differences
-
-   */
-   void FDCheckGapDeriv_W();
-
-   /*!
-   \brief Check weighted wear ~w derivatives with finite differences
-          derivation w.r.t. displ.
-
-   */
-   void FDCheckWearDeriv();
-
-   /*!
-   \brief Check weighted wear ~w derivatives with finite differences
-          derivation w.r.t. lagr.-mult.
-
-   */
-   void FDCheckWearDerivLm();
 
    /*!
    \brief Check slip condition derivatives with finite differences
 
    */
-   virtual void FDCheckSlipDeriv(LINALG::SparseMatrix& linslipLMglobal,
+   /*virtual void FDCheckSlipDeriv(LINALG::SparseMatrix& linslipLMglobal,
                                  LINALG::SparseMatrix& linslipDISglobal,
-                                 LINALG::SparseMatrix& linslipWglobal);
+                                 LINALG::SparseMatrix& linslipWglobal);*/
 
    /*!
    \brief Finalize construction of Wear interface
diff --git a/src/drt_contact/contact_wear_lagrange_strategy.cpp b/src/drt_contact/contact_wear_lagrange_strategy.cpp
index 2378fda..966067f 100644
--- a/src/drt_contact/contact_wear_lagrange_strategy.cpp
+++ b/src/drt_contact/contact_wear_lagrange_strategy.cpp
@@ -2761,186 +2761,6 @@ void CONTACT::WearLagrangeStrategy::EvaluateFriction(Teuchos::RCP<LINALG::Sparse
   {
     PrepareSaddlePointSystem(kteff,feff);
   }
-  // FD checks...
-#ifdef WEARIMPLICITFDLM
-  for (int i=0; i<(int)interface_.size(); ++i)
-  {
-    if (!wearimpl_)
-      dserror("Explicit wear algorithm: no FD check necessary!");
-
-    interface_[i]->FDCheckWearDerivLm();
-  }
-#endif
-
-#ifdef WEARIMPLICITFD
-  for (int i=0; i<(int)interface_.size(); ++i)
-  {
-    if (!wearimpl_)
-      dserror("Explicit wear algorithm: no FD check necessary!");
-
-    interface_[i]->FDCheckWearDeriv();
-  }
-#endif
-
-#ifdef CONTACTFDGAP
-  // FD check of weighted gap g derivatives (non-penetr. condition)
-  for (int i=0; i<(int)interface_.size(); ++i)
-  {
-    interface_[i]->FDCheckGapDeriv();
-    interface_[i]->FDCheckGapDeriv_W();
-  }
-#endif // #ifdef CONTACTFDGAP
-
-#ifdef CONTACTFDSLIPINCR
-  // FD check of weighted gap g derivatives (non-penetr. condition)
-  for (int i=0; i<(int)interface_.size(); ++i)
-  {
-    interface_[i]->FDCheckSlipIncrDerivTXI();
-    if (Dim()==3)
-      interface_[i]->FDCheckSlipIncrDerivTETA();
-
-  }
-#endif // #ifdef CONTACTFDGAP
-
-#ifdef CONTACTFDSTICK
-
-  if (gstickt->NumGlobalElements())
-  {
-    // FD check of stick condition
-    for (int i=0; i<(int)interface_.size(); ++i)
-    {
-      interface_[i]->FDCheckStickDeriv(*linstickLM_,*linstickDIS_);
-    }
-  }
-#endif // #ifdef CONTACTFDSTICK
-
-#ifdef CONTACTFDT_D
-
-  if (!weardiscr_)
-    dserror("FD CHECK ONLY FOR DISCRETE WEAR!");
-
-  // FD check of stick condition
-  for (int i=0; i<(int)interface_.size(); ++i)
-    interface_[i]->FDCheckDerivT_D(*lintdis_);
-
-#endif
-
-#ifdef CONTACTFDT_D_MASTER
-
-  if (!weardiscr_)
-    dserror("FD CHECK ONLY FOR DISCRETE WEAR!");
-
-  if (!wearbothdiscr_)
-    dserror("FD CHECK ONLY FOR DISCRETE WEAR!");
-
-  // FD check of stick condition
-  for (int i=0; i<(int)interface_.size(); ++i)
-    interface_[i]->FDCheckDerivT_D_Master(*lintdisM_);
-
-#endif
-
-#ifdef CONTACTFDE_D
-
-  if (!weardiscr_)
-    dserror("FD CHECK ONLY FOR DISCRETE WEAR!");
-
-  // FD check of stick condition
-  for (int i=0; i<(int)interface_.size(); ++i)
-    interface_[i]->FDCheckDerivE_D(*linedis_);
-
-#endif
-
-#ifdef CONTACTFDE_D_MASTER
-
-  if (!weardiscr_)
-    dserror("FD CHECK ONLY FOR DISCRETE WEAR!");
-
-  if (!wearbothdiscr_)
-    dserror("FD CHECK ONLY FOR DISCRETE WEAR!");
-
-  // FD check of stick condition
-  for (int i=0; i<(int)interface_.size(); ++i)
-    interface_[i]->FDCheckDerivE_D_Master(*linedisM_);
-
-#endif
-
-#ifdef CONTACTFDSLIP
-
-  if (gslipnodes_->NumGlobalElements())
-  {
-    // FD check of slip condition
-    for (int i=0; i<(int)interface_.size(); ++i)
-    {
-      interface_[i]->FDCheckSlipDeriv(*linslipLM_,*linslipDIS_,*linslipW_);
-    }
-  }
-#endif // #ifdef CONTACTFDSLIP
-
-#ifdef CONTACTFDMORTART
-
-  if (!weardiscr_)
-    dserror("FD CHECK ONLY FOR DISCRETE WEAR!");
-
-    // FD check of Mortar matrix D derivatives
-    std::cout << " -- CONTACTFDMORTART -----------------------------------" << std::endl;
-    twmatrix_->Complete();
-    if( twmatrix_->NormOne() )
-      for (int i=0; i<(int)interface_.size(); ++i)
-        interface_[i]->FDCheckMortarTDeriv();
-    //twmatrix_->UnComplete();
-    std::cout << " -- CONTACTFDMORTART -----------------------------------" << std::endl;
-#endif // #ifdef CONTACTFDMORTARD
-
-#ifdef CONTACTFDMORTARE
-
-    if (!weardiscr_)
-      dserror("FD CHECK ONLY FOR DISCRETE WEAR!");
-
-    // FD check of Mortar matrix D derivatives
-    std::cout << " -- CONTACTFDMORTARE -----------------------------------" << std::endl;
-    ematrix_->Complete();
-    if( ematrix_->NormOne() )
-      for (int i=0; i<(int)interface_.size(); ++i)
-        interface_[i]->FDCheckMortarEDeriv();
-    //ematrix_->UnComplete();
-    std::cout << " -- CONTACTFDMORTARE -----------------------------------" << std::endl;
-#endif // #ifdef CONTACTFDMORTARD
-
-#ifdef CONTACTFDMORTARE_MASTER
-
-    if (!weardiscr_)
-      dserror("FD CHECK ONLY FOR DISCRETE WEAR!");
-
-    if (!wearbothdiscr_)
-      dserror("FD CHECK ONLY FOR DISCRETE WEAR!");
-
-    // FD check of Mortar matrix D derivatives
-    std::cout << " -- CONTACTFDMORTARE_MASTER -----------------------------------" << std::endl;
-    ematrixM_->Complete();
-    if( ematrixM_->NormOne() )
-      for (int i=0; i<(int)interface_.size(); ++i)
-        interface_[i]->FDCheckMortarE_Master_Deriv();
-    //ematrix_->UnComplete();
-    std::cout << " -- CONTACTFDMORTARE_MASTER -----------------------------------" << std::endl;
-#endif // #ifdef CONTACTFDMORTARD
-
-#ifdef CONTACTFDMORTART_MASTER
-
-    if (!weardiscr_)
-      dserror("FD CHECK ONLY FOR DISCRETE WEAR!");
-
-    if (!wearbothdiscr_)
-      dserror("FD CHECK ONLY FOR DISCRETE WEAR!");
-
-    // FD check of Mortar matrix D derivatives
-    std::cout << " -- CONTACTFDMORTART_MASTER -----------------------------------" << std::endl;
-    twmatrixM_->Complete();
-    if( twmatrixM_->NormOne() )
-      for (int i=0; i<(int)interface_.size(); ++i)
-        interface_[i]->FDCheckMortarT_Master_Deriv();
-    //ematrix_->UnComplete();
-    std::cout << " -- CONTACTFDMORTART_MASTER -----------------------------------" << std::endl;
-#endif // #ifdef CONTACTFDMORTARD
 
   return;
 }
-- 
1.7.7.6

