#--------------------------------------------------------------------
# switch between sequentiell and parallel compilation by uncommenting 
# the approbiate compilers:
#--------------------------------------------------------------------
#
# sequentiell part
#--------------------------------------------------------------------
PROGRAM_NAME  = resulter.exe
FXX     = f77
CCX     = cc
LDX     = cc
PFL     = 
#--------------------------------------------------------------------
#
CC	 = $(CCX)
LD       = $(CCX)
RM	 = /bin/rm -f

#--------------------------------------------------------------------
# switch between fast and debug compilation by uncommenting 
# the approbiate flags:
#------------------------------------------------ this is debug-32bit
CFLAGS        = -D__HP__ +w1 +e -Aa -Ae  -g ${PFL} -DDEBUG
FFLAGS        = -g -I/opt/mpi/include/
#------------------------------------------------- this is fast-32bit
#CFLAGS       = -D__HP__  +e -Ae +w1  -OAa +Onolimit ${PFL}
#FFLAGS        = +O2 +Onolimit -I/opt/mpi/include/
#--------------------------------------------------------------------
LDFLAGS	 = -L/usr/lib -L/opt/fortran/lib -lcl -lc -lM -lm 
LDOPTS        = -a archive -v

INCLUDES = 

LIBS     = -lblas

#
# binaries
#                main
OBJS1         = main.o \
                read_mesh.o \
                printf_info.o \
                take_every.o \
                merge.o \
                pss_am.o

# targets
#
PROGRAM       = $(PROGRAM_NAME)
#
# dependencies
#
$(PROGRAM):     $(OBJS1)
		@echo "Linking $(PROGRAM) ..."
		@$(LD) $(LDFLAGS) $(OBJS1) $(LIBS) $(INCLUDES) -o $(PROGRAM)
		@echo "done"

#
$(OBJS1):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."

.c.o:
	@ echo "$@ wird kompiliert...."
	$(CC) $(CFLAGS) $(INCLUDES) -c  $<

.f.o:
	@ echo "$@ wird kompiliert...."
	$(FXX) $(FFLAGS) -c  $<
clean:
	rm -rf  $(OBJS1)  
$
