BACI guidelines

Programming
===========

- Document classes and their intent in header .H files at the top of the class definition and on top of the functions in the class. No additional documentation in the .cpp files (that will get outdated and contradict the header). Ensure correctness of your code documentation in the baci doxygen
  http://jacobi/doxygen/html/index.html
The doxygen module is the main documentation of our code and the interfaces.

- Use verbose names for variable and function names except for the few completely obvious ones such as i,j,k for loop counters, 'dt' for time step or 'x' as spatial coordinates (in the right context). Otherwise prefer 'residual' over 'r' or 'f', 'velocity' over 'u'. Good naming reduces the need for separate documentation.

- Central functionality of problem types need to adhere to a common interface pattern. For coupling different fields together, the convention is to have empty constructors, Init() calls for basic initialization of the field-related quantities, Setup() calls for creating the field vectors and matrices, and functionality to create matrices and vectors. The split between Init() and Setup() is necessary because degrees of freedom need to be assigned for all fields at once in between those two steps.

- Do not declare member variables in classes with larger visibility as 'public', but either 'private' or 'protected' depending on the context. For access to variables, use Set() and Get() methods. This also allows for tracking the call hierarchy of these methods more easily.

- Use inheritance and base classes rather than copy-paste whenever the copied part is more than about 50 lines.

- Use inheritance and base classes or factory classes whenever you encounter the same 'if' or 'switch' statement that distinguish specific problem types three times or more. By centralizing the decision for switching between algorithms one can switch to the correct branch only once, avoiding the pain for finding all appearances of the switch in case something needs to be changed. This improves both readablity and maintainability.

- Try to design new code similar to current best practices to facilitate for people switching between different modules. Current best practice for time integration/nonlinear solvers is the new structure (using DRT::ELEMENTS::ParamsInterface), current best practice for element routines is fluid.

- Do not mis-use Teuchos::ParameterList for passing parameters among element routines. Use DRT::ELEMENTS::ParamsInterface for this purpose or write your own struct or class for local data. A ParameterList makes it difficult to find out which parameters are valid, where a parameter is set, and what the magic parameter is supposed to mean. ParameterList is also expensive to access - on the order of 1000s of operations.

- Read the code style guide at jacobi for explanations and background:
http://jacobi/cppcodestyle/cppguide.xml
We break a number of those guide lines with existing code, but we want to approach the style in that document.

- If you encounter, or if you know about outdated or redundant functionality in BACI, do not hesitate to delete this functionality in discussion with the BACI committee.

Note that these rules should be the guideline for all code you write, but obviously we will be more strict in enforcing the style on level 2 (stable application code), level 1 (central field functionality), or level 0 (core functionality) code.

Commits
=======

- Avoid overly large commits: Separate commits into
  * Framework changes and code refactoring
  * New functionality
  * Pure beauty like whitespace, indentation, typos, documentation changes
  This makes it easier for others to identify more important changes and isolate possible bugs.

- Only touch the lines that are actually necessary. That way, line annotations (history) become more meaningful.

- Make sure to keep the svn history when renaming or copying files.

General
=======

- Use/advertise the BACI tutorials for teaching students that are new to BACI. Improve those tutorials in case you find them incomplete.
https://lnm.wiki.tum.de/BACI+Tutorial
