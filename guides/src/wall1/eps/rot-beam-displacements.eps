%!PS-Adobe-2.0 EPSF-2.0
%%Title: rot-beam-displacements.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Mon Feb 12 15:58:21 2007
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -76 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Times-Roman) findfont 230 scalefont setfont
1.000 UL
LTb
943 460 M
63 0 V
5675 0 R
-63 0 V
stroke
805 460 M
gsave 0 setgray
[ [(Times-Roman) 230.0 0.0 true true 0 ( 0)]
] -76.7 MRshow
grestore
1.000 UL
LTb
943 1177 M
63 0 V
5675 0 R
-63 0 V
stroke
805 1177 M
gsave 0 setgray
[ [(Times-Roman) 230.0 0.0 true true 0 ( 0.2)]
] -76.7 MRshow
grestore
1.000 UL
LTb
943 1895 M
63 0 V
5675 0 R
-63 0 V
stroke
805 1895 M
gsave 0 setgray
[ [(Times-Roman) 230.0 0.0 true true 0 ( 0.4)]
] -76.7 MRshow
grestore
1.000 UL
LTb
943 2612 M
63 0 V
5675 0 R
-63 0 V
stroke
805 2612 M
gsave 0 setgray
[ [(Times-Roman) 230.0 0.0 true true 0 ( 0.6)]
] -76.7 MRshow
grestore
1.000 UL
LTb
943 3329 M
63 0 V
5675 0 R
-63 0 V
stroke
805 3329 M
gsave 0 setgray
[ [(Times-Roman) 230.0 0.0 true true 0 ( 0.8)]
] -76.7 MRshow
grestore
1.000 UL
LTb
943 4047 M
63 0 V
5675 0 R
-63 0 V
stroke
805 4047 M
gsave 0 setgray
[ [(Times-Roman) 230.0 0.0 true true 0 ( 1)]
] -76.7 MRshow
grestore
1.000 UL
LTb
943 4764 M
63 0 V
5675 0 R
-63 0 V
stroke
805 4764 M
gsave 0 setgray
[ [(Times-Roman) 230.0 0.0 true true 0 ( 1.2)]
] -76.7 MRshow
grestore
1.000 UL
LTb
943 460 M
0 63 V
0 4241 R
0 -63 V
stroke
943 230 M
gsave 0 setgray
[ [(Times-Roman) 230.0 0.0 true true 0 (-0.4)]
] -76.7 MCshow
grestore
1.000 UL
LTb
1660 460 M
0 63 V
0 4241 R
0 -63 V
stroke
1660 230 M
gsave 0 setgray
[ [(Times-Roman) 230.0 0.0 true true 0 (-0.2)]
] -76.7 MCshow
grestore
1.000 UL
LTb
2378 460 M
0 63 V
0 4241 R
0 -63 V
stroke
2378 230 M
gsave 0 setgray
[ [(Times-Roman) 230.0 0.0 true true 0 ( 0)]
] -76.7 MCshow
grestore
1.000 UL
LTb
3095 460 M
0 63 V
0 4241 R
0 -63 V
stroke
3095 230 M
gsave 0 setgray
[ [(Times-Roman) 230.0 0.0 true true 0 ( 0.2)]
] -76.7 MCshow
grestore
1.000 UL
LTb
3812 460 M
0 63 V
0 4241 R
0 -63 V
stroke
3812 230 M
gsave 0 setgray
[ [(Times-Roman) 230.0 0.0 true true 0 ( 0.4)]
] -76.7 MCshow
grestore
1.000 UL
LTb
4529 460 M
0 63 V
0 4241 R
0 -63 V
stroke
4529 230 M
gsave 0 setgray
[ [(Times-Roman) 230.0 0.0 true true 0 ( 0.6)]
] -76.7 MCshow
grestore
1.000 UL
LTb
5247 460 M
0 63 V
0 4241 R
0 -63 V
stroke
5247 230 M
gsave 0 setgray
[ [(Times-Roman) 230.0 0.0 true true 0 ( 0.8)]
] -76.7 MCshow
grestore
1.000 UL
LTb
5964 460 M
0 63 V
0 4241 R
0 -63 V
stroke
5964 230 M
gsave 0 setgray
[ [(Times-Roman) 230.0 0.0 true true 0 ( 1)]
] -76.7 MCshow
grestore
1.000 UL
LTb
6681 460 M
0 63 V
0 4241 R
0 -63 V
stroke
6681 230 M
gsave 0 setgray
[ [(Times-Roman) 230.0 0.0 true true 0 ( 1.2)]
] -76.7 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
2378 460 M
0 4304 V
1.000 UL
LTb
943 460 M
5738 0 V
0 4304 V
-5738 0 V
943 460 L
1.000 UP
1.000 UL
LT1
LTb
5652 4586 M
gsave 0 setgray
[ [(Helvet) 230.0 0.0 true true 0 (initial configuration)]
] -76.7 MRshow
grestore
LT1
5790 4586 M
615 0 V
2378 460 M
597 0 V
0 359 V
-597 0 V
0 -359 V
597 0 R
598 0 V
0 359 V
-598 0 V
0 -359 V
598 0 R
598 0 V
0 359 V
-598 0 V
0 -359 V
598 0 R
597 0 V
0 359 V
-597 0 V
0 -359 V
597 0 R
598 0 V
0 359 V
-598 0 V
0 -359 V
598 0 R
598 0 V
0 359 V
-598 0 V
0 -359 V
1.000 UL
LT0
LTb
5652 4356 M
gsave 0 setgray
[ [(Helvet) 230.0 0.0 true true 0 (deformed configurations)]
] -76.7 MRshow
grestore
LT0
5790 4356 M
615 0 V
2378 460 M
638 67 V
-64 351 V
2378 819 L
0 -359 V
638 67 R
609 138 V
-89 345 V
2952 878 L
64 -351 V
609 138 R
593 161 V
-95 344 V
3536 1010 L
89 -345 V
593 161 R
587 160 V
-88 345 V
4123 1170 L
95 -344 V
587 160 R
585 132 V
-65 351 V
4717 1331 L
88 -345 V
585 132 R
574 59 V
0 359 V
-639 -67 V
65 -351 V
2378 460 M
599 231 V
-153 321 V
2285 806 L
93 -346 V
599 231 R
552 290 V
-175 310 V
2824 1012 L
2977 691 L
552 290 R
532 309 V
-181 307 V
3354 1291 L
3529 981 L
532 309 R
526 306 V
-175 310 V
3880 1597 L
181 -307 V
526 306 R
530 279 V
-153 322 V
4412 1906 L
175 -310 V
530 279 R
539 206 V
-93 347 V
4964 2197 L
153 -322 V
2378 460 M
519 378 V
-231 271 V
2198 771 L
2378 460 L
519 378 R
458 424 V
-250 254 V
2666 1109 L
2897 838 L
458 424 R
433 436 V
-254 249 V
3105 1516 L
250 -254 V
433 436 R
429 431 V
-249 255 V
3534 1947 L
254 -249 V
429 431 R
440 407 V
-231 271 V
3968 2384 L
249 -255 V
440 407 R
468 339 V
-180 310 V
4426 2807 L
231 -271 V
2378 460 M
403 499 V
-293 202 V
2124 714 L
2378 460 L
403 499 R
333 528 V
-307 181 V
2488 1161 L
2781 959 L
333 528 R
306 534 V
-310 175 V
stroke
3110 2196 M
2807 1668 L
307 -181 V
306 534 R
303 528 V
-307 181 V
3110 2196 L
310 -175 V
303 528 R
319 507 V
-293 202 V
3416 2730 L
307 -181 V
319 507 R
364 447 V
-253 254 V
3749 3258 L
293 -202 V
2378 460 M
260 587 V
-335 119 V
2067 639 L
2378 460 L
260 587 R
185 596 V
-343 95 V
2303 1166 L
335 -119 V
185 596 R
158 595 V
-345 89 V
2480 1738 L
343 -95 V
158 595 R
155 588 V
-343 95 V
2636 2327 L
345 -89 V
155 588 R
178 572 V
-336 119 V
2793 2921 L
343 -95 V
178 572 R
235 527 V
-310 179 V
2978 3517 L
336 -119 V
2378 460 M
100 634 V
-355 29 V
2031 553 L
347 -93 V
100 634 R
24 624 V
-356 3 V
-23 -598 V
355 -29 V
24 624 R
-2 615 V
-356 -3 V
2 -609 V
356 -3 V
-2 615 R
-2 609 V
-356 3 V
2 -615 V
356 3 V
-2 609 R
23 598 V
-355 28 V
-24 -623 V
356 -3 V
23 598 R
92 570 V
-347 93 V
2166 3568 L
355 -28 V
2378 460 M
-68 639 V
-350 -65 V
59 -574 V
359 0 V
-68 639 R
-138 608 V
-345 -89 V
133 -584 V
350 65 V
-138 608 R
-161 594 V
-343 -95 V
159 -588 V
345 89 V
-161 594 R
-159 587 V
-345 -89 V
161 -593 V
343 95 V
-159 587 R
-133 584 V
-350 -64 V
138 -609 V
345 89 V
-133 584 R
-59 575 V
stroke
1660 4047 M
-358 0 V
67 -639 V
350 64 V
1.000 UL
LTb
943 460 M
5738 0 V
0 4304 V
-5738 0 V
943 460 L
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvet Times-Roman
