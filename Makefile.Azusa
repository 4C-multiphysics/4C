#--------------------------------------------------------------------
# list of possible defines:
#--------------------------------------------------------------------
#  
# -DD_ALE        defines element ale (2D+3D)
# -DD_AXISHELL   defines axishell element
# -DD_BEAM3      defines element beam3
# -DD_BRICK1     defines element brick1
# -DD_FLUID2     defines element fluid2
# -DD_FLUID2_PRO defines element fluid2 with projection method
# -DFLUID2_ML    defines element fluid2 with multilevel 
# -DD_FLUID3     defines element fluid3
# -DFLUID3_ML    defines element fluid3 with multilevel 
# -DD_SHELL8     defines element shell8
# -DD_SHELL9     defines element shell9
# -DD_WALL1      defines element wall1
#
# -DGEMM         defines Generalized Energy-Momentum Int. Scheme
# -DD_FLUID      defines general fluid problem
# -DD_FSI        defines general FSI problem
# -DD_MAT        defines materials
# -DD_OPTIM      defines optimization
# -DRESULTTEST   defines defines result testing before checking in a new version
# -DS8CONTACT    defines contact algorithms for shell8 contact
# -DWALLCONTACT  defines contact algorithms for wall contact
#
# -DDEBUG        defines debug mode: routine and array tracing 
# -DPARALLEL     defines parallel version of programm
# -DSIXTYFOUR    defines 64bit compilation and linkage
# -DSUSE73       defines for compilation and linkage with gcc and g77 on Suselinux
# -DSUN          defines for compilation and linkage on CUSS Sunfire machine
# -DAZUSA        defines for compilation on azusa.hww.de
# -DHPUX10       defines for compilation on HPUX10
# -DHPUX11       defines for compilation on HPUX11
# -DHPUXITA      defines compilation for Itanium2 running HPUX11i
# 
# -DMLIB_PACKAGE       defines interface to solver library MLIB (HPUX11, sequentiell)
# -DHYPRE_PACKAGE      defines interface to solver library HYPRE (not yet impl.)
# -DAZTEC_PACKAGE      defines interface to solver library AZTEC
# -DPARSUPERLU_PACKAGE defines interface to solver library ParSuperLU
# -DSUPERLU_PACKAGE    defines interface to solver library SuperLU 
# -DMUMPS_PACKAGE      defines interface to solver library Mumps (only in parallel HPUX11)
# -DUMFPACK            defines interface to solver library Umfpack
# -DSPOOLES_PACKAGE    defines interface to solver library Spooles (only in parallel HPUX11)
#
# -DVISUAL2_PACKAGE    defines visualisation tool VISUAL2 (only in seriell)
#                      (add -lVisual2 -lX11 to INCLUDES!!!)
#
#--------------------------------------------------------------------
PFL	   =  -DAZUSA -DSIXTYFOUR -DPARALLEL -DD_SHELL8 -DD_BRICK1 -DD_FLUID -DS8CONTACT -DD_CONTACT \
	      -DD_FLUID2 -DD_FLUID3 -DD_ALE -DD_WALL1 -DD_SHELL9 -DD_BEAM3 -DD_AXISHELL \
            -DD_MAT -DSPOOLES_PACKAGE
#
# set correct HOMEDIR to the directory where you placed ccarat 
#place the com director from lib_azusa.tar.gz into your home
#place .profile from lib_azusa.tar.gz into your home
#place ccarat in a subdirectory of your home named <Name>
HOMEDIR      =  /crossi/rus/rus/stati/azusa
SRC          =  $(HOMEDIR)/<name>/ccarat/
METISDIR     =  $(HOMEDIR)/lib_ita1/metis
SPOOLESDIR   =  $(HOMEDIR)/lib_ita1/spooles
AZTECDIR     =  $(HOMEDIR)/lib_ita1/aztec21/lib/
COMPILER     =  /opt/NECcomp/compiler70/ia64
MPI          =  /opt/NECmpi
LAPACK       =  /opt/intel/mkl/lib/64
#
# compilers
#
CC	 = /opt/NECmpi/bin/mpicc
F77      = /opt/NECmpi/bin/mpif90
LD       = $(F77)
RM	 = /bin/rm -f
#---------------------------------------------------------------
#                                            this is debug 64bit
#---------------------------------------------------------------
#CFLAGS   = -g -ansi -Wall $(PFL) -DDEBUG
#FFLAGS   = -g 
#LDFLAGS  = -g 
#LDOPTS   = -g 
#LIBPATHS = -L$(COMPILER)/lib -L$(LAPACK) -L$(METISDIR) -L$(SPOOLESDIR) -L$(AZTECDIR)
#LIBS	 = $(LIBPATHS) -lF90 -lIEPCF90 -lc -lm -lspooles_Ita1_64 -lmetis_azusa -laztec_ita1_64 \
#	   $(LAPACK)/libguide.so $(LAPACK)/libmkl_lapack.a $(LAPACK)/libmkl_itp.a -lmpi
#PROGRAM  = cca_ita1_debg.exe
#----------------------------------------------------------------
#                                             this is fast 64 bit
#----------------------------------------------------------------
CFLAGS   = -O3  -parallel -tpp1  -ansi  $(PFL) 
FFLAGS   = -O3  -parallel -tpp1 
LDFLAGS  = -O 
LDOPTS   =  
LIBPATHS = -L$(COMPILER)/lib -L$(LAPACK) -L$(METISDIR) -L$(SPOOLESDIR) -L$(AZTECDIR)
LIBS	 = $(LIBPATHS) -lF90 -lIEPCF90 -lc -lm -lspooles_Ita1_64 -lmetis_azusa -laztec_ita1_64 \
	   $(LAPACK)/libguide.so $(LAPACK)/libmkl_lapack.a $(LAPACK)/libmkl_itp.a -lmpi
PROGRAM  = cca_ita1_fast.exe
#----------------------------------------------------------------
#
#
#
INCLUDES  =  -I/opt/NECcomp/glibc-2.2.4/include/  -I$(AZTECDIR)
#
#----------------------- binaries -----------------------------------
include ./Makefile.objects
#--------------------------------------------------------------------
#
#
# targets
#
#
# dependencies
#
$(PROGRAM):     $(OBJS1) $(OBJS2) $(OBJS3) $(OBJS4) $(OBJS5) $(OBJS6) $(OBJS7) $(OBJS8) \
                $(OBJS9) $(OBJS10) $(OBJS11) $(OBJS12) $(OBJS13) $(OBJS14) $(OBJS15) \
                $(OBJS16) $(OBJS17) $(OBJS18) $(OBJS19) $(OBJS20) $(OBJS_OPT) \
		$(OBJS_AXISHELL) $(OBJS_MAT) $(OBJS_F2PRO)
		@echo "Linking $(LD) $(LDFLAGS) $(LIBS) -o $(PROGRAM)"
		@$(LD) $(LDFLAGS) $(OBJS1) $(OBJS2) $(OBJS3) $(OBJS4) $(OBJS5) $(OBJS6) \
                $(OBJS7) $(OBJS8) $(OBJS9) $(OBJS10) $(OBJS11) $(OBJS12) $(OBJS13) $(OBJS14) \
		$(OBJS15) $(OBJS16) $(OBJS17) $(OBJS18) $(OBJS19) $(OBJS20) $(OBJS_OPT) \
		$(OBJS_AXISHELL) $(OBJS_MAT) $(OBJS_F2PRO) \
		$(LIBS) -o $(PROGRAM)


		@echo "done"
$(OBJS1):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS2):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS3):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS4):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS5):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS6):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS7):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS8):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS9):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS10):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS11):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS12):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS14):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS15):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS16):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS17):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS18):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS19):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS20):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS_OPT):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS_AXISHELL):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c $(*F).c $<
		@echo "MainMake is back."
#
$(OBJS_MAT):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
#
$(OBJS_F2PRO):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  ${<F}
		@echo "MainMake is back."
# fortran
$(OBJS13):     
		@echo "Making $@ ..."
		cd ${SRC}; cd ${@D}; $(F77) $(FFLAGS)  -c $(*F).f $<
		@echo "MainMake is back."

.c.o:
	$(CC) $(CFLAGS) $(INCLUDES) -c $<
.f.o:
	$(F77) $(FFLAGS) -c $<
clean:
	rm -rf  $(OBJS1) $(OBJS2) $(OBJS3) $(OBJS4) $(OBJS5) $(OBJS6) \
                $(OBJS7) $(OBJS8) $(OBJS9) $(OBJS10) $(OBJS11) $(OBJS12) \
                $(OBJS13) $(OBJS14) $(OBJS15) $(OBJS16) $(OBJS17) $(OBJS18) \
		$(OBJS19) $(OBJS20) $(OBJS_OPT) $(OBJS_AXISHELL) $(OBJS_MAT) \
		$(OBJS_F2PRO)

