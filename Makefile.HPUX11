#--------------------------------------------------------------------
# choose seq. or par. executable
#--------------------------------------------------------------------
include ./Makefile.par
#include ./Makefile.seq
#
#--------------------------------------------------------------------
#    Makefile CARAT (parallel and sequentiel)
#--------------------------------------------------------------------
#
# Ausschalten der Ausgabe von Kommandos durch Make
.SILENT:
#
#
#
# binaries
#                main
OBJS1         = ${SRC}/main/main_ccarat.o 
#                global_full
OBJS2	      = ${SRC}/global_full/global_control.o \
                ${SRC}/global_full/global_inp_control.o \
                ${SRC}/global_full/global_cal_control.o \
                ${SRC}/global_full/global_init_control.o \
                ${SRC}/global_full/global_ass_dof.o \
                ${SRC}/global_full/cal_dyn_control.o \
                ${SRC}/global_full/cal_static_control.o \
                ${SRC}/global_full/cal_nlnstatic_control.o \
                ${SRC}/global_full/cal_static_service.o \
                ${SRC}/global_full/map_node_find.o \
                ${SRC}/global_full/global_mask_matrices.o \
                ${SRC}/global_full/global_mask_msr.o \
                ${SRC}/global_full/global_mask_parcsr.o \
                ${SRC}/global_full/global_mask_ucchb.o \
                ${SRC}/global_full/global_mask_dense.o \
                ${SRC}/global_full/global_mask_rcptr.o \
                ${SRC}/global_full/global_calelm.o \
                ${SRC}/global_full/global_calrhs.o \
                ${SRC}/global_full/global_calrhs_nodal.o \
                ${SRC}/global_full/solver_control.o \
                ${SRC}/global_full/solver_service.o \
                ${SRC}/global_full/solver_add_data.o \
                ${SRC}/global_full/solver_add_msr.o \
                ${SRC}/global_full/solver_add_parcsr.o \
                ${SRC}/global_full/solver_add_ucchb.o \
                ${SRC}/global_full/solver_add_dense.o \
                ${SRC}/global_full/solver_aztec.o \
                ${SRC}/global_full/solver_hypre.o \
                ${SRC}/global_full/solver_superlu.o \
                ${SRC}/global_full/solver_lapack.o \
                ${SRC}/global_full/solver_mumps.o \
                ${SRC}/global_full/machine_hpux.o 
#                pss_full
OBJS3	      = ${SRC}/pss_full/pss_am.o \
                ${SRC}/pss_full/pss_ds.o \
                ${SRC}/pss_full/pss_fr.o \
                ${SRC}/pss_full/pss_pss.o 
#                input_full
OBJS4	      = ${SRC}/input_full/input_control_global.o \
                ${SRC}/input_full/input_ctr_head.o \
                ${SRC}/input_full/input_sol.o \
                ${SRC}/input_full/input_design.o \
                ${SRC}/input_full/input_design_top.o \
                ${SRC}/input_full/input_mesh.o \
                ${SRC}/input_full/input_topology.o \
                ${SRC}/input_full/input_curves.o \
                ${SRC}/input_full/input_cond_struct.o \
                ${SRC}/input_full/input_cond_fluid.o \
                ${SRC}/input_full/input_cond_couple.o \
                ${SRC}/input_full/input_material.o \
                ${SRC}/input_full/input_conditions.o
#                fluid3
OBJS5	      = ${SRC}/fluid3/f3_inpele.o 
#                shell8
OBJS6	      = ${SRC}/shell8/s8_main.o \
                ${SRC}/shell8/s8_inpele.o \
                ${SRC}/shell8/s8_intg.o \
                ${SRC}/shell8/s8_jaco.o \
                ${SRC}/shell8/s8_a3.o \
                ${SRC}/shell8/s8_loccoordnode.o \
                ${SRC}/shell8/s8_funcderiv.o \
                ${SRC}/shell8/s8_static_ke.o \
                ${SRC}/shell8/s8_static_keug.o \
                ${SRC}/shell8/s8_stress.o \
                ${SRC}/shell8/s8_tfte.o \
                ${SRC}/shell8/s8_tforce.o \
                ${SRC}/shell8/s8_tvkg.o \
                ${SRC}/shell8/s8_load1.o \
                ${SRC}/shell8/s8_tmtr.o \
                ${SRC}/shell8/s8_mtr.o \
                ${SRC}/shell8/s8_tvmr.o \
                ${SRC}/shell8/s8_tvbo.o \
                ${SRC}/shell8/s8_tvhe_linear.o \
                ${SRC}/shell8/s8_tvhe.o \
                ${SRC}/shell8/s8_tvma.o \
                ${SRC}/shell8/s8_tmat.o \
                ${SRC}/shell8/s8_eps.o \
                ${SRC}/shell8/s8_intforce.o \
                ${SRC}/shell8/s8_mat_linel.o \
                ${SRC}/shell8/s8_btdb.o \
                ${SRC}/shell8/s8_eas.o \
                ${SRC}/shell8/s8_vthv.o \
                ${SRC}/shell8/s8_xint.o \
                ${SRC}/shell8/s8_init.o 
#                ale
OBJS7	      = ${SRC}/ale/ale_inpele.o 
#                parallel
OBJS8	      = ${SRC}/parallel/par_initmetis.o \
                ${SRC}/parallel/par_make_comm.o \
                ${SRC}/parallel/par_assignmesh.o
#                brick1
OBJS9	      = ${SRC}/brick1/b1_inpele.o 
#                math
OBJS10	      = ${SRC}/math/sort_find.o \
                ${SRC}/math/math1.o
#                output
OBJS11	      = ${SRC}/output/out_global.o \
                ${SRC}/output/out_gid_msh.o \
                ${SRC}/output/out_gid_sol.o
#                fortran
OBJS12	      = ${SRC}/fortran/bi_f77_get_constants.o \
                ${SRC}/fortran/mumps_interface.o
#                wall1
#OBJS12        = ${SRC}/wall1/w1_init.o \
#                ${SRC}/wall1/w1_inpele.o \
#                ${SRC}/wall1/w1_intg.o \
#                ${SRC}/wall1/w1_static_ke.o \
#                ${SRC}/wall1/w1_funcderiv.o \
#                ${SRC}/wall1/w1_bop.o \
#                ${SRC}/wall1/w1_jaco.o \
#                ${SRC}/wall1/w1_mat_linel.o \
#                ${SRC}/wall1/w1_call_stiff.o \
#                ${SRC}/wall1/w1_main.o
#
#
# targets
#
PROGRAM       = $(PROGRAM_NAME)
#
# dependencies
#
$(PROGRAM):     $(OBJS1) $(OBJS2) $(OBJS3) $(OBJS4) $(OBJS5) $(OBJS6) $(OBJS7) $(OBJS8) \
                $(OBJS9) $(OBJS10) $(OBJS11) $(OBJS12)
		@echo "Linking $(PROGRAM) ..."
		@$(LD) $(LDFLAGS) $(OBJS1) $(OBJS2) $(OBJS3) $(OBJS4) $(OBJS5) $(OBJS6) \
                $(OBJS7) $(OBJS8) $(OBJS9) $(OBJS10) $(OBJS11) $(OBJS12) $(LIBS) $(INCLUDES) -o $(PROGRAM)
		@echo "done"

#
$(OBJS1):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS2):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS3):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS4):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS5):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS6):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS7):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS8):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS9):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS10):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
#
$(OBJS11):     
		@echo "Making $@ ..."
		cd ${@D}; $(CC) $(CFLAGS) $(INCLUDES) -c  $<
		@echo "MainMake is back."
# FORTRAN90
$(OBJS12):     
		@echo "Making $@ ..."
		cd ${@D}; $(FXX) $(FFLAGS)  -c  $<
		@echo "MainMake is back."
#

.c.o:
	@ echo "$@ wird kompiliert...."
	$(CC) $(CFLAGS) $(INCLUDES) -c  $<

.f.o:
	@ echo "$@ wird kompiliert...."
	$(FXX) $(FFLAGS) -c  $<
clean:
	rm -rf  $(OBJS1) $(OBJS2) $(OBJS3) $(OBJS4) $(OBJS5) $(OBJS6) \
                $(OBJS7) $(OBJS8) $(OBJS9) $(OBJS10) $(OBJS11) $(OBJS12)
$
