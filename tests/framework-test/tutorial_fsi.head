//
-----------------------------------------------------------------ALE DYNAMIC
//
// ale mesh movement algorithm
//                              solid, springs, laplace
ALE_TYPE                        springs_spatial
//
// number of linear solver used for ale problems...
LINEAR_SOLVER                   1
//
MAXTIME                         4
//
NUMSTEP                         41
//
NUM_INITSTEP                    0
//
RESULTSEVRY                     1
//
TIMESTEP                        0.1
//
MAXITER                         4
//
TOLRES                          1.0e-4
//
TOLDISP                         1.0e-4
//
--------------------------------------------------------------DISCRETISATION
//
// Number of meshes in reduced dimensional airways network field
NUMAIRWAYSDIS                   1
//
// Number of meshes in ale field
NUMALEDIS                       1
//
// Number of meshes in arterial network field
NUMARTNETDIS                    1
//
// Number of meshes in fluid field
NUMFLUIDDIS                     1
//
// Number of meshes in structural field
NUMSTRUCDIS                     1
//
// Number of meshes in thermal field
NUMTHERMDIS                     1
//
// control parameters for electrochemistry problems
---------------------------------------------------------------FLUID DYNAMIC
//
// Switch on adaptive control of linear solver tolerance for nonlinear solution
//                              Yes,No,yes,no,YES,NO
ADAPTCONV                       yes
//
// The linear solver shall be this much better than the current nonlinear residual in the nonlinear convergence limit
ADAPTCONV_BETTER                0.1
//
// Time integration factor
ALPHA_F                         1
//
// Time integration factor
ALPHA_M                         1
//
// Flag to (de)activate error calculations
//                              no
//                              beltrami_flow
//                              channel2D
//                              gravitation
//                              shear_flow
//                              byfunct1
//                              beltrami_stat_stokes
//                              beltrami_stat_navier_stokes
//                              beltrami_instat_stokes
//                              beltrami_instat_navier_stokes
//                              kimmoin_stat_stokes
//                              kimmoin_stat_navier_stokes
//                              kimmoin_instat_stokes
//                              kimmoin_instat_navier_stokes
//                              fsi_fluid_pusher
CALCERROR                       no
//
// Compute divergence of velocity field at the element center
//                              Yes,No,yes,no,YES,NO
COMPUTE_DIVU                    No
//
// norm for convergence check
//                              L_2_norm,L_2_norm_without_residual_at_itemax
CONVCHECK                       L_2_norm
//
// form of convective term
//                              convective,conservative
CONVFORM                        convective
//
// Time integration factor
GAMMA                           1
//
// write output to gmsh files
//                              Yes,No,yes,no,YES,NO
GMSH_OUTPUT                     No
//
// order of accuracy of mesh velocity determination
GRIDVEL                         BDF2
//
// Scale blocks of matrix with row infnorm?
//                              Yes,No,yes,no,YES,NO
INFNORMSCALING                  no
//
// Initial field for fluid problem
//                              zero_field
//                              field_by_function
//                              disturbed_field_from_function
//                              FLAME_VORTEX_INTERACTION
//                              BELTRAMI-FLOW
//                              KIM-MOIN-FLOW
INITIALFIELD                    zero_field
//
// max number of nonlinear iterations for initial stationary solution
INITSTATITEMAX                  5
//
// max. number of nonlin. iterations
ITEMAX                          50
//
// Calculate lift and drag forces along specified boundary
//                              No,no,Yes,yes,Nodeforce,NODEFORCE,nodeforce
LIFTDRAG                        No
//
// number of linear solver used for fluid dynamics
LINEAR_SOLVER                   2
//
// Total simulation time
MAXTIME                         1000
//
// Flag to (de)activate mesh tying algorithm
//                              no
//                              Condensed_Smat
//                              Condensed_Bmat
//                              Condensed_Bmat_merged
//                              SaddlePointSystem_coupled
//                              SaddlePointSystem_pc
//                              Coupling_ionTransport_Laplace
MESHTYING                       no
//
// Flag to activate check for potential nonlinear boundary conditions
//                              no,yes
NONLINEARBC                     no
//
// Nonlinear iteration scheme
//                              fixed_point_like,Newton
NONLINITER                      fixed_point_like
//
// Number of Steps for Starting Scheme
NUMSTASTEPS                     0
//
// Total number of Timesteps
NUMSTEP                         1
//
// Physical Type
//                              Incompressible
//                              Varying_density
//                              Loma
//                              Boussinesq
//                              Poro
PHYSICAL_TYPE                   Incompressible
//
// Predictor for first guess in nonlinear iteration
//                              steady_state
//                              zero_acceleration
//                              constant_acceleration
//                              constant_increment
//                              explicit_second_order_midpoint
//                              TangVel
PREDICTOR                       steady_state
//
// Increment for writing restart
RESTARTEVRY                     20
//
// Assemble fluid system matrix into a block system
//                              Yes,No,yes,no,YES,NO
BLOCKMATRIX                     no
//
// Function for Initial Starting Field
STARTFUNCNO                     -1
//
// Time integration factor for starting scheme
START_THETA                     1
//
// steady state check every step
STEADYSTEP                      -1
//
// Flag to (de)activate potential Strong 3D redD coupling
//                              no,yes
STRONG_REDD_3D_COUPLING_TYPE    no
//
// Time integration factor
THETA                           0.66
//
// Time Integration Scheme
//                              Stationary,Np_Gen_Alpha,Af_Gen_Alpha,One_Step_Theta,BDF2
TIMEINTEGR                      Np_Gen_Alpha
//
// Time increment dt
TIMESTEP                        0.01
//
// Increment for writing solution
RESULTSEVRY                     1
//
--------------------------------------FLUID DYNAMIC/NONLINEAR SOLVER TOLERANCES
TOL_VEL_RES                           1.e-12
TOL_VEL_INC                           1.e-12
TOL_PRES_RES                          1.e-12
TOL_PRES_INC                          1.e-12
----------------------------------FLUID DYNAMIC/RESIDUAL-BASED STABILIZATION
//
// Flag to (de)activate cross-stress term -> residual-based VMM.
//                              no_cross,yes_cross,cross_rhs
CROSS-STRESS                    no_cross
//
// Definition of tau_M and Tau_C
//                              Taylor_Hughes_Zarins
//                              Taylor_Hughes_Zarins_wo_dt
//                              Taylor_Hughes_Zarins_Whiting_Jansen
//                              Taylor_Hughes_Zarins_Whiting_Jansen_wo_dt
//                              Taylor_Hughes_Zarins_scaled
//                              Taylor_Hughes_Zarins_scaled_wo_dt
//                              Franca_Barrenechea_Valentin_Frey_Wall
//                              Franca_Barrenechea_Valentin_Frey_Wall_wo_dt
//                              Shakib_Hughes_Codina
//                              Shakib_Hughes_Codina_wo_dt
//                              Codina
//                              Codina_wo_dt
//                              Franca_Madureira_Valentin_Badia_Codina
//                              Franca_Madureira_Valentin_Badia_Codina_wo_dt
DEFINITION_TAU                  Franca_Barrenechea_Valentin_Frey_Wall
//
// Characteristic element length for tau_Mu
//                              streamlength
//                              volume_equivalent_diameter
//                              root_of_volume
CHARELELENGTH_U                 streamlength
//
// Characteristic element length for tau_Mp/tau_C
//                              streamlength
//                              volume_equivalent_diameter
//                              root_of_volume
CHARELELENGTH_PC                root_of_volume
//
// Location where material law is evaluated
//                              element_center,integration_point
EVALUATION_MAT                  element_center
//
// Location where tau is evaluated
//                              element_center,integration_point
EVALUATION_TAU                  element_center
//
// Flag to (de)activate grad-div term.
//                              Yes,No,yes,no,YES,NO
GRAD_DIV                        Yes
//
// residual based without second derivatives (i.e. only consistent for tau->0, but faster)
//                              Yes,No,yes,no,YES,NO
INCONSISTENT                    No
//
// Flag to (de)activate cross-stress term loma continuity equation-> residual-based VMM.
//                              no_cross,yes_cross,cross_rhs
LOMA_CONTI_CROSS_STRESS         no_cross
//
// Flag to (de)activate Reynolds-stress term loma continuity equation-> residual-based VMM.
//                              no_reynolds,yes_reynolds,reynolds_rhs
LOMA_CONTI_REYNOLDS_STRESS      no_reynolds
//
// Flag to (de)activate SUPG stabilization in loma continuity equation.
//                              Yes,No,yes,no,YES,NO
LOMA_CONTI_SUPG                 No
//
// Flag to (de)activate PSPG stabilization.
//                              Yes,No,yes,no,YES,NO
PSPG                            Yes
//
// Flag to (de)activate Reynolds-stress term -> residual-based VMM.
//                              no_reynolds,yes_reynolds,reynolds_rhs
REYNOLDS-STRESS                 no_reynolds
//
// Flag to (de)activate reactive term in residual-based stabilization.
//                              no_rstab,rstab_gls,rstab_usfem
RSTAB                           no_rstab
//
// Apply (un)stabilized fluid formulation
//                              no_stabilization,residual_based,edge_based
STABTYPE                        residual_based
//
// Flag to (de)activate SUPG stabilization.
//                              Yes,No,yes,no,YES,NO
SUPG                            Yes
//
// Flag to allow time dependency of subscales for residual-based stabilization.
//                              quasistatic,time_dependent
TDS                             quasistatic
//
// Specify how to treat the transient term.
//                              no_transient,yes_transient,transient_complete
TRANSIENT                       no_transient
//
// Flag to (de)activate viscous term in residual-based stabilization.
//                              no_vstab,vstab_gls,vstab_gls_rhs,vstab_usfem,vstab_usfem_rhs
VSTAB                           no_vstab
//
-----------------------------------------------------------------FSI DYNAMIC
//
// Iteration Scheme over the fields
//                              basic_sequ_stagg
//                              iter_stagg_fixed_rel_param
//                              iter_stagg_AITKEN_rel_param
//                              iter_stagg_steep_desc
//                              iter_stagg_NLCG
//                              iter_stagg_MFNK_FD
//                              iter_stagg_MFNK_FSI
//                              iter_stagg_MPE
//                              iter_stagg_RRE
//                              iter_monolithicfluidsplit
//                              iter_monolithicstructuresplit
//                              iter_lung_monolithicstructuresplit
//                              iter_lung_monolithicfluidsplit
//                              iter_monolithicxfem
//                              pseudo_structure
//                              iter_constr_monolithicfluidsplit
//                              iter_constr_monolithicstructuresplit
//                              iter_mortar_monolithicstructuresplit
//                              iter_mortar_monolithicfluidsplit
//                              iter_fluidfluid_monolithicstructuresplit
COUPALGO                        iter_stagg_AITKEN_rel_param
//
// Output of unconverged interface values during FSI iteration.
// There will be a new control file for each time step.
// This might be helpful to understand the coupling iteration.
//                              No,Yes,no,yes,NO,YES,Interface,Preconditioner,All
DEBUGOUTPUT                     No
//
// Total simulation time
MAXTIME                         3
//
// Total number of Timesteps
NUMSTEP                         3
//
// Increment for writing restart
RESTARTEVRY                     1
//
// Second order coupling at the interface.
//                              Yes,No,yes,no,YES,NO
SECONDORDER                     Yes
//
// Projection method to use for sliding FSI.
//                              None,Curr,Ref,RotZ,RotZSphere
SLIDEALEPROJ                    None
//
// Time increment dt
TIMESTEP                        0.1
//
// Increment for writing solution
RESULTSEVRY                     1
//
-----------------------------------------------FSI DYNAMIC/MONOLITHIC SOLVER
//
// Required distance for adaptive convergence check in Newton-type FSI.
// This is the improvement we want to achieve in the linear extrapolation of the
// adaptive convergence check. Set to zero to avoid the adaptive check altogether.
ADAPTIVEDIST                    0
//
// Number of Richardson iterations on ale block in MFSI block preconditioner
ALEPCITER                       1 1 1 1
//
// Relaxation factor for Richardson iteration on ale block in MFSI block preconditioner
ALEPCOMEGA                      1.0 1.0 1.0 1.0
//
// Basic tolerance for adaptive convergence check in monolithic FSI.
// This tolerance will be used for the linear solve of the FSI block system.
// The linear convergence test will always use the relative residual norm (AZ_r0).
// Not to be confused with the Newton tolerance (CONVTOL) that applies
// to the nonlinear convergence test using a absolute residual norm.
BASETOL                         0.001
//
// Type of block smoother, can be BGS or Schur
BLOCKSMOOTHER BGS BGS BGS
//
// Tolerance for iteration over fields
CONVTOL                         1e-6
//
// Number of Richardson iterations on fluid block in MFSI block preconditioner
FLUIDPCITER                     1 1 1 1
//
// Relaxation factor for Richardson iteration on fluid block in MFSI block preconditioner
FLUIDPCOMEGA                    1.0 1.0 1.0 1.0
//
// run analysis on fsiamg multigrid scheme
// Supported in monolithic FSI for now.
//                              Yes,No,yes,no,YES,NO
FSIAMGANALYZE                   No
//
// Scale Blocks in monolithic FSI with row infnorm?
//                              Yes,No,yes,no,YES,NO
INFNORMSCALING                  Yes
//
// Maximum number of iterations over fields
ITEMAX                          100
//
// Linear solver algorithm for monolithic block system in monolithic FSI.
// Most of the time preconditioned Krylov is the right thing to choose. But there are
// block Gauss-Seidel methods as well.
//                              PreconditionedKrylov,FSIAMG
LINEARBLOCKSOLVER               PreconditionedKrylov
//
// binary operator to combine primary variables and residual force values
//                              And
NORMCOMBI_RESFINC               And
//
// type of norm for primary variables convergence check
//                              Abs,Rel,Mix
NORM_INC                        Rel
//
// type of norm for residual convergence check
//                              Abs,Rel,Mix
NORM_RESF                       Rel
//
// Number of Richardson iterations on whole MFSI block preconditioner
PCITER                          1 1 1
//
// Relaxation factor for Richardson iteration on whole MFSI block preconditioner
PCOMEGA                         1.0 1.0 1.0
//
// Number of preconditioner reused in monolithic FSI
PRECONDREUSE                    0
//
// Damping factor for Schur complement construction
SCHUROMEGA                      0.001 0.01 0.1
//
// Include linearization with respect to mesh movement in Navier Stokes equation.
// Supported in monolithic FSI for now.
//                              Yes,No,yes,no,YES,NO
SHAPEDERIVATIVES                Yes
//
// Number of Richardson iterations on structural block in MFSI block preconditioner
STRUCTPCITER                    1 1 1 1
//
// Relaxation factor for Richardson iteration on structural block in MFSI block preconditioner
STRUCTPCOMEGA                   1.0 1.0 1.0 1.0
//
// Symmetric block GS preconditioner in monolithic FSI or ordinary GS
//                              Yes,No,yes,no,YES,NO
SYMMETRICPRECOND                No
//
// Absolute tolerance for structure displacement increment in Inf-norm
TOL_DIS_INC_INF                 1e-06
//
// Absolute tolerance for structure displacement increment in L2-norm
TOL_DIS_INC_L2                  1e-06
//
// Absolute tolerance for structure displacement residual in Inf-norm
TOL_DIS_RES_INF                 1e-06
//
// Absolute tolerance for structure displacement residual in L2-norm
TOL_DIS_RES_L2                  1e-06
//
// Absolute tolerance for interface increment in Inf-norm
TOL_FSI_INC_INF                 1e-06
//
// Absolute tolerance for interface increment in L2-norm
TOL_FSI_INC_L2                  1e-06
//
// Absolute tolerance for interface residual in Inf-norm
TOL_FSI_RES_INF                 1e-06
//
// Absolute tolerance for interface residual in L2-norm
TOL_FSI_RES_L2                  1e-06
//
// Absolute tolerance for fluid pressure increment in Inf-norm
TOL_PRE_INC_INF                 1e-06
//
// Absolute tolerance for fluid pressure increment in L2-norm
TOL_PRE_INC_L2                  1e-06
//
// Absolute tolerance for fluid pressure residual in Inf-norm
TOL_PRE_RES_INF                 1e-06
//
// Absolute tolerance for fluid pressure residual in L2-norm
TOL_PRE_RES_L2                  1e-06
//
// Absolute tolerance for fluid velocity increment in Inf-norm
TOL_VEL_INC_INF                 1e-06
//
// Absolute tolerance for fluid velocity increment in L2-norm
TOL_VEL_INC_L2                  1e-06
//
// Absolute tolerance for fluid velocity residual in Inf-norm
TOL_VEL_RES_INF                 1e-06
//
// Absolute tolerance for fluid velocity residual in L2-norm
TOL_VEL_RES_L2                  1e-06
//
----------------------------------------------FSI DYNAMIC/PARTITIONED SOLVER
//
// Tolerance for iteration over fields
CONVTOL                         1e-10
//
// Coupling Method Mortar (mtr) or conforming nodes at interface
//                              MTR,Mtr,mtr,conforming
COUPMETHOD                      conforming
//
// Coupling variable at the interface for partitioned FSI solvers
//                              Displacement,Force
COUPVARIABLE                    Displacement
//
// Maximum number of iterations over fields
ITEMAX                          100
//
// largest omega allowed for Aitken relaxation (0.0 means no constraint)
MAXOMEGA                        0
//
// Coupling strategies for partitioned FSI solvers.
//                              DirichletNeumann,DirichletNeumannSlideALE
PARTITIONED                     DirichletNeumann
//
// Predictor for interface displacements for partitioned schemes
//                              d(n)
//                              d(n)+dt*(1.5*v(n)-0.5*v(n-1))
//                              d(n)+dt*v(n)
//                              d(n)+dt*v(n)+0.5*dt^2*a(n)
PREDICTOR                       d(n)
//
// fixed relaxation parameter for partitioned FSI solvers
RELAX                           1.0
//
// Project velocity into divergence-free subspace for partitioned fsi
//                              Yes,No,yes,no,YES,NO
DIVPROJECTION                   no
//
--------------------------------------------------------------------------IO
//
FILESTEPS                       1000
//
//                              Yes,No,yes,no,YES,NO
FLUID_STRESS                    No
//
//                              Yes,No,yes,no,YES,NO
FLUID_WALL_SHEAR_STRESS         No
//
// Only the specified procs will write output
LIMIT_OUTP_TO_PROC              -1
//
//                              Yes,No,yes,no,YES,NO
OUTPUT_BIN                      yes
//
// Put a <GroupID>: in front of every line
//                              Yes,No,yes,no,YES,NO
PREFIX_GROUP_ID                 No
//
// Print to screen every n step
STDOUTEVRY                      1
//
//                              No,no,NO,Yes,yes,YES,Cauchy,cauchy,2PK,2pk
STRUCT_COUPLING_STRESS          No
//
//                              Yes,No,yes,no,YES,NO
STRUCT_DISP                     Yes
//
//                              No,no,NO,Yes,yes,YES,EA,ea,GL,gl
STRUCT_PLASTIC_STRAIN           No
//
//                              No,no,NO,Yes,yes,YES,EA,ea,GL,gl
STRUCT_STRAIN                   No
//
//                              No,no,NO,Yes,yes,YES,Cauchy,cauchy,2PK,2pk
STRUCT_STRESS                   No
//
//                              Yes,No,yes,no,YES,NO
STRUCT_SURFACTANT               No
//
//                              Yes,No,yes,no,YES,NO
STRUCT_VEL_ACC                  No
//
//                              None,No,NO,no,Current,Initial
THERM_HEATFLUX                  None
//
//                              Yes,No,yes,no,YES,NO
THERM_TEMPERATURE               No
//
//                              None,No,NO,no,Current,Initial
THERM_TEMPGRAD                  None
//
// Write the output into a file
//                              Yes,No,yes,no,YES,NO
WRITE_TO_FILE                   No
//
// Write screen output
//                              Yes,No,yes,no,YES,NO
WRITE_TO_SCREEN                 Yes
//
// control parameters for low-Mach-number flow problems
-------------------------------------------------------------MORTAR COUPLING
// If chosen, multipliers are removed from crosspoints / edge nodes
//                              Yes,No,yes,no,YES,NO
CROSSPOINTS                     No
//
// Type of numerical integration scheme
//                              Segments,segments,Fast,fast,Fast_BS,fast_BS
INTTYPE                         Segments
//
// Type of LM interpolation/weighting function
//                              undefined
//                              quad_quad
//                              quadratic_quadratic
//                              quad_pwlin
//                              quadratic_piecewiselinear
//                              quad_lin
//                              quadratic_linear
//                              pwlin_pwlin
//                              piecewiselinear_piecewiselinear
//                              lin_lin
//                              linear_linear
LM_QUAD                         undefined
//
// Number of employed integration points per dimension
NUMGP_PER_DIM                   0
//
// Type of contact search
//                              BruteForce
//                              bruteforce
//                              BruteForceEleBased
//                              bruteforceelebased
//                              BinaryTree
//                              Binarytree
//                              binarytree
SEARCH_ALGORITHM                Binarytree
//
// Radius / Bounding volume inflation for contact search
SEARCH_PARAM                    0.3
//
// Type of employed set of shape functions
//                              Dual,dual,Standard,standard,std,PetrovGalerkin,petrovgalerkin,pg
LM_SHAPEFCN                     Dual
//
-------------------------------------MORTAR COUPLING/PARALLEL REDISTRIBUTION
// Type of redistribution algorithm
//                              None,none,No,no,Static,static,Dynamic,dynamic
PARALLEL_REDIST                 Static
//
// Type of interface ghosting and ghosting extension algorithm
//                              redundant_all, redundant_master, round_robin, bining
GHOSTING_STRATEGY               redundant_master
//
// Maximum value of load balance measure before parallel redistribution
MAX_BALANCE_EVAL_TIME           2
//
// Minimum no. of elements per processor for parallel redistribution
MIN_ELEPROC                     0
//
-----------------------------------------------------------------PROBLEM TYP
//
//
//                              AeroCode_Thermo_Fluid_Structure_Interaction
//                              Ale
//                              ArterialNetwork
//                              Biofilm_Fluid_Structure_Interaction
//                              Combustion
//                              Electrochemistry
//                              Fluid
//                              Fluid_Ale
//                              Fluid_Fluid
//                              Fluid_Fluid_Ale
//                              Fluid_Fluid_FSI
//                              Fluid_Freesurface
//                              Fluid_Structure_Interaction
//                              Fluid_Structure_Interaction_Lung
//                              Fluid_Structure_Interaction_XFEM
//                              Fluid_XFEM2
//                              Gas_Fluid_Structure_Interaction
//                              Low_Mach_Number_Flow
//                              NP_Supporting_Procs
//                              Particle
//                              Poroelastic_scalar_transport
//                              Poroelasticity
//                              RedAirways_Tissue
//                              ReducedDimensionalAirWays
//                              Scalar_Transport
//                              Structure
//                              Structure_Ale
//                              Structure_Scalar_Interaction
//                              Thermo
//                              Thermo_Fluid_Structure_Interaction
//                              Thermo_Structure_Interaction
PROBLEMTYP                      Fluid_Structure_Interaction
//
// Set the random seed. If < 0 use current time.
RANDSEED                        -1
//
RESTART                         0
//
// Defines the function spaces for the spatial approximation
//                              Polynomial,Nurbs,HDG
SHAPEFCT                        Polynomial
//
--------------------------------------------------------------------SOLVER 1
//
// The convergence test to use for terminating the iterative solver.
//                              AZ_r0
//                              AZ_rhs
//                              AZ_Anorm
//                              AZ_noscaled
//                              AZ_sol
//                              AZ_weighted
//                              AZ_expected_values
//                              AZTECOO_conv_test
//                              AZ_inf_noscaled
AZCONV                          AZ_r0
//
// max iterations
AZITER                          1000
//
// damping for GaussSeidel and jacobi type methods
AZOMEGA                         0
//
// The number of iterations between each output of the solver's progress.
AZOUTPUT                        0
//
// Type of internal preconditioner to use.
// Note! this preconditioner will only be used if the input operator
// supports the Epetra_RowMatrix interface and the client does not pass
// in an external preconditioner!
//                              none
//                              ILU
//                              ILUT
//                              Jacobi
//                              SymmGaussSeidel
//                              Least_Squares
//                              Neumann
//                              ICC
//                              LU
//                              RILU
//                              BILU
//                              ML
//                              MLFLUID
//                              MLFLUID2
//                              MLAPI
//                              GaussSeidel
//                              DownwindGaussSeidel
//                              AMG(Braess-Sarazin)
//                              AMG
//                              BGS2x2
//                              BGSnxn
//                              TekoSIMPLE
//                              CheapSIMPLE
//                              MueLu_sym
//                              MueLu_nonsym
//                              MueLu_contact
//                              MueLu_contact2
//                              MueLu_contact3
//                              MueLu_contactSP
//                              MueLu_contactPenalty
AZPREC                          ILU
//
// how often to recompute some preconditioners
AZREUSE                         0
//
// Type of linear solver algorithm to use.
//                              CG,GMRES,GMRESR,CGS,TFQMR,BiCGSTAB,LU,FGMRES
AZSOLVE                         GMRES
//
// The maximum size of the Krylov subspace used with "GMRES" before
// a restart is performed.
AZSUB                           300
//
// tolerance in (un)scaled residual
AZTOL                           1e-08
//
// damping parameter for BGS2X2 preconditioner block1
BGS2X2_BLOCK1_DAMPING           1
//
// damping parameter for BGS2X2 preconditioner block2
BGS2X2_BLOCK2_DAMPING           1
//
// BGS2x2 flip order parameter
//                              block0_block1_order,block1_block0_order
BGS2X2_FLIPORDER                block0_block1_order
//
// damping parameter for BGS2X2 preconditioner
BGS2X2_GLOBAL_DAMPING           1
//
// Combine mode for Ifpack Additive Schwarz
//                              Add,Insert,Zero
IFPACKCOMBINE                   Add
//
// The amount of fill allowed for the internal "ilu" preconditioner.
IFPACKGFILL                     0
//
// The amount of overlap used for the ifpack "ilu" and "ilut" preconditioners.
IFPACKOVERLAP                   0
//
// objective size of an aggregate with METIS/VBMETIS, 2D: 9, 3D: 27
ML_AGG_SIZE                     27
//
//                              UC,METIS,VBMETIS,MIS
ML_COARSEN                      UC
//
// damping coarse grid
ML_DAMPCOARSE                   1
//
// damping fine grid
ML_DAMPFINE                     1
//
// damping med grids
ML_DAMPMED                      1
//
// ML stop coarsening when coarse ndof smaller then this
ML_MAXCOARSESIZE                5000
//
// ML max number of levels
ML_MAXLEVEL                     5
//
// ML print-out level (0-10)
ML_PRINT                        0
//
// damping factor for prolongator smoother (usually 1.33 or 0.0)
ML_PROLONG_SMO                  0
//
// threshold for prolongator smoother/aggregation
ML_PROLONG_THRES                0
//
//                              SGS
//                              Jacobi
//                              Chebychev
//                              MLS
//                              ILU
//                              KLU
//                              Superlu
//                              GS
//                              DGS
//                              Umfpack
//                              BS
//                              SIMPLE
//                              SIMPLEC
ML_SMOOTHERCOARSE               Umfpack
//
//                              SGS
//                              Jacobi
//                              Chebychev
//                              MLS
//                              ILU
//                              KLU
//                              Superlu
//                              GS
//                              DGS
//                              Umfpack
//                              BS
//                              SIMPLE
//                              SIMPLEC
ML_SMOOTHERFINE                 ILU
//
//                              SGS
//                              Jacobi
//                              Chebychev
//                              MLS
//                              ILU
//                              KLU
//                              Superlu
//                              GS
//                              DGS
//                              Umfpack
//                              BS
//                              SIMPLE
//                              SIMPLEC
ML_SMOOTHERMED                  ILU
//
// no. smoothing steps or polynomial order on each level (at least ML_MAXLEVEL numbers)
ML_SMOTIMES 1 1 1 1 1
//
// User specified name for solver block
NAME ALE solver
//
// damping parameter for SIMPLE preconditioner
SIMPLE_DAMPING                  1
//
// The solver to attack the system of linear equations arising of FE approach with.
//                              Amesos_KLU_sym
//                              Amesos_KLU_nonsym
//                              Superlu
//                              vm3
//                              Aztec_MSR
//                              LAPACK_sym
//                              LAPACK_nonsym
//                              UMFPACK
//                              Belos
//                              Stratimikos_Amesos
//                              Stratimikos_Aztec
//                              Stratimikos_Belos
//                              undefined
SOLVER                          UMFPACK
//
// sub solver/smoother block number (SIMPLE/C: used for prediction of primary variable on all levels, BS: used for fine and intermedium BraessSarazin (BS) level smoother)
SUB_SOLVER1                     -1
//
// sub solver/smoother block number (SIMPLE/C: used for SchurComplement eq. on all levels, BS: used for coarse BraessSarazin (BS) level smoother)
SUB_SOLVER2                     -1
//
// solver parameters for solver block 2
--------------------------------------------------------------------SOLVER 2
//
AZBDIAG                         0
//
// The convergence test to use for terminating the iterative solver.
//                              AZ_r0
//                              AZ_rhs
//                              AZ_Anorm
//                              AZ_noscaled
//                              AZ_sol
//                              AZ_weighted
//                              AZ_expected_values
//                              AZTECOO_conv_test
//                              AZ_inf_noscaled
AZCONV                          AZ_r0
//
// max iterations
AZITER                          1000
//
// damping for GaussSeidel and jacobi type methods
AZOMEGA                         0
//
// The number of iterations between each output of the solver's progress.
AZOUTPUT                        0
//
// Type of internal preconditioner to use.
// Note! this preconditioner will only be used if the input operator
// supports the Epetra_RowMatrix interface and the client does not pass
// in an external preconditioner!
//                              none
//                              ILU
//                              ILUT
//                              Jacobi
//                              SymmGaussSeidel
//                              Least_Squares
//                              Neumann
//                              ICC
//                              LU
//                              RILU
//                              BILU
//                              ML
//                              MLFLUID
//                              MLFLUID2
//                              MLAPI
//                              GaussSeidel
//                              DownwindGaussSeidel
//                              AMG(Braess-Sarazin)
//                              AMG
//                              BGS2x2
//                              BGSnxn
//                              TekoSIMPLE
//                              CheapSIMPLE
//                              MueLu_sym
//                              MueLu_nonsym
//                              MueLu_contact
//                              MueLu_contact2
//                              MueLu_contact3
//                              MueLu_contactSP
//                              MueLu_contactPenalty
AZPREC                          ILU
//
// how often to recompute some preconditioners
AZREUSE                         0
//
// Type of linear solver algorithm to use.
//                              CG,GMRES,GMRESR,CGS,TFQMR,BiCGSTAB,LU,FGMRES
AZSOLVE                         GMRES
//
// The maximum size of the Krylov subspace used with "GMRES" before
// a restart is performed.
AZSUB                           300
//
// tolerance in (un)scaled residual
AZTOL                           1e-12
//
// damping parameter for BGS2X2 preconditioner block1
BGS2X2_BLOCK1_DAMPING           1
//
// damping parameter for BGS2X2 preconditioner block2
BGS2X2_BLOCK2_DAMPING           1
//
// BGS2x2 flip order parameter
//                              block0_block1_order,block1_block0_order
BGS2X2_FLIPORDER                block0_block1_order
//
// damping parameter for BGS2X2 preconditioner
BGS2X2_GLOBAL_DAMPING           1
//
// Combine mode for Ifpack Additive Schwarz
//                              Add,Insert,Zero
IFPACKCOMBINE                   Add
//
// The amount of fill allowed for the internal "ilu" preconditioner.
IFPACKGFILL                     0
//
// The amount of overlap used for the ifpack "ilu" and "ilut" preconditioners.
IFPACKOVERLAP                   0
//
// objective size of an aggregate with METIS/VBMETIS, 2D: 9, 3D: 27
ML_AGG_SIZE                     27
//
//                              UC,METIS,VBMETIS,MIS
ML_COARSEN                      UC
//
// damping coarse grid
ML_DAMPCOARSE                   1
//
// damping fine grid
ML_DAMPFINE                     1
//
// damping med grids
ML_DAMPMED                      1
//
// ML stop coarsening when coarse ndof smaller then this
ML_MAXCOARSESIZE                5000
//
// ML max number of levels
ML_MAXLEVEL                     5
//
// ML print-out level (0-10)
ML_PRINT                        0
//
// damping factor for prolongator smoother (usually 1.33 or 0.0)
ML_PROLONG_SMO                  0
//
// threshold for prolongator smoother/aggregation
ML_PROLONG_THRES                0
//
//                              SGS
//                              Jacobi
//                              Chebychev
//                              MLS
//                              ILU
//                              KLU
//                              Superlu
//                              GS
//                              DGS
//                              Umfpack
//                              BS
//                              SIMPLE
//                              SIMPLEC
ML_SMOOTHERCOARSE               Umfpack
//
//                              SGS
//                              Jacobi
//                              Chebychev
//                              MLS
//                              ILU
//                              KLU
//                              Superlu
//                              GS
//                              DGS
//                              Umfpack
//                              BS
//                              SIMPLE
//                              SIMPLEC
ML_SMOOTHERFINE                 ILU
//
//                              SGS
//                              Jacobi
//                              Chebychev
//                              MLS
//                              ILU
//                              KLU
//                              Superlu
//                              GS
//                              DGS
//                              Umfpack
//                              BS
//                              SIMPLE
//                              SIMPLEC
ML_SMOOTHERMED                  ILU
//
// no. smoothing steps or polynomial order on each level (at least ML_MAXLEVEL numbers)
ML_SMOTIMES 1 1 1 1 1
//
// User specified name for solver block
NAME Fluid solver
//
// damping parameter for SIMPLE preconditioner
SIMPLE_DAMPING                  1
//
// The solver to attack the system of linear equations arising of FE approach with.
//                              Amesos_KLU_sym
//                              Amesos_KLU_nonsym
//                              Superlu
//                              vm3
//                              Aztec_MSR
//                              LAPACK_sym
//                              LAPACK_nonsym
//                              UMFPACK
//                              Belos
//                              Stratimikos_Amesos
//                              Stratimikos_Aztec
//                              Stratimikos_Belos
//                              undefined
SOLVER                          Belos
//
// sub solver/smoother block number (SIMPLE/C: used for prediction of primary variable on all levels, BS: used for fine and intermedium BraessSarazin (BS) level smoother)
SUB_SOLVER1                     -1
//
// sub solver/smoother block number (SIMPLE/C: used for SchurComplement eq. on all levels, BS: used for coarse BraessSarazin (BS) level smoother)
SUB_SOLVER2                     -1
//
// solver parameters for solver block 3
--------------------------------------------------------------------SOLVER 3
//
AZBDIAG                         0
//
// The convergence test to use for terminating the iterative solver.
//                              AZ_r0
//                              AZ_rhs
//                              AZ_Anorm
//                              AZ_noscaled
//                              AZ_sol
//                              AZ_weighted
//                              AZ_expected_values
//                              AZTECOO_conv_test
//                              AZ_inf_noscaled
AZCONV                          AZ_r0
//
// max iterations
AZITER                          1000
//
// damping for GaussSeidel and jacobi type methods
AZOMEGA                         0
//
// The number of iterations between each output of the solver's progress.
AZOUTPUT                        0
//
// Type of internal preconditioner to use.
// Note! this preconditioner will only be used if the input operator
// supports the Epetra_RowMatrix interface and the client does not pass
// in an external preconditioner!
//                              none
//                              ILU
//                              ILUT
//                              Jacobi
//                              SymmGaussSeidel
//                              Least_Squares
//                              Neumann
//                              ICC
//                              LU
//                              RILU
//                              BILU
//                              ML
//                              MLFLUID
//                              MLFLUID2
//                              MLAPI
//                              GaussSeidel
//                              DownwindGaussSeidel
//                              AMG(Braess-Sarazin)
//                              AMG
//                              BGS2x2
//                              BGSnxn
//                              TekoSIMPLE
//                              CheapSIMPLE
//                              MueLu_sym
//                              MueLu_nonsym
//                              MueLu_contact
//                              MueLu_contact2
//                              MueLu_contact3
//                              MueLu_contactSP
//                              MueLu_contactPenalty
AZPREC                          ILU
//
// how often to recompute some preconditioners
AZREUSE                         0
//
// Type of linear solver algorithm to use.
//                              CG,GMRES,GMRESR,CGS,TFQMR,BiCGSTAB,LU,FGMRES
AZSOLVE                         GMRES
//
// The maximum size of the Krylov subspace used with "GMRES" before
// a restart is performed.
AZSUB                           300
//
// tolerance in (un)scaled residual
AZTOL                           1e-08
//
// damping parameter for BGS2X2 preconditioner block1
BGS2X2_BLOCK1_DAMPING           1
//
// damping parameter for BGS2X2 preconditioner block2
BGS2X2_BLOCK2_DAMPING           1
//
// BGS2x2 flip order parameter
//                              block0_block1_order,block1_block0_order
BGS2X2_FLIPORDER                block0_block1_order
//
// damping parameter for BGS2X2 preconditioner
BGS2X2_GLOBAL_DAMPING           1
//
// Combine mode for Ifpack Additive Schwarz
//                              Add,Insert,Zero
IFPACKCOMBINE                   Add
//
// The amount of fill allowed for the internal "ilu" preconditioner.
IFPACKGFILL                     0
//
// The amount of overlap used for the ifpack "ilu" and "ilut" preconditioners.
IFPACKOVERLAP                   0
//
// objective size of an aggregate with METIS/VBMETIS, 2D: 9, 3D: 27
ML_AGG_SIZE                     27
//
//                              UC,METIS,VBMETIS,MIS
ML_COARSEN                      UC
//
// damping coarse grid
ML_DAMPCOARSE                   1
//
// damping fine grid
ML_DAMPFINE                     1
//
// damping med grids
ML_DAMPMED                      1
//
// ML stop coarsening when coarse ndof smaller then this
ML_MAXCOARSESIZE                5000
//
// ML max number of levels
ML_MAXLEVEL                     5
//
// ML print-out level (0-10)
ML_PRINT                        0
//
// damping factor for prolongator smoother (usually 1.33 or 0.0)
ML_PROLONG_SMO                  0
//
// threshold for prolongator smoother/aggregation
ML_PROLONG_THRES                0
//
//                              SGS
//                              Jacobi
//                              Chebychev
//                              MLS
//                              ILU
//                              KLU
//                              Superlu
//                              GS
//                              DGS
//                              Umfpack
//                              BS
//                              SIMPLE
//                              SIMPLEC
ML_SMOOTHERCOARSE               Umfpack
//
//                              SGS
//                              Jacobi
//                              Chebychev
//                              MLS
//                              ILU
//                              KLU
//                              Superlu
//                              GS
//                              DGS
//                              Umfpack
//                              BS
//                              SIMPLE
//                              SIMPLEC
ML_SMOOTHERFINE                 ILU
//
//                              SGS
//                              Jacobi
//                              Chebychev
//                              MLS
//                              ILU
//                              KLU
//                              Superlu
//                              GS
//                              DGS
//                              Umfpack
//                              BS
//                              SIMPLE
//                              SIMPLEC
ML_SMOOTHERMED                  ILU
//
// no. smoothing steps or polynomial order on each level (at least ML_MAXLEVEL numbers)
ML_SMOTIMES 1 1 1 1 1
//
// User specified name for solver block
NAME Structure solver
//
// damping parameter for SIMPLE preconditioner
SIMPLE_DAMPING                  1
//
// The solver to attack the system of linear equations arising of FE approach with.
//                              Amesos_KLU_sym
//                              Amesos_KLU_nonsym
//                              Superlu
//                              vm3
//                              Aztec_MSR
//                              LAPACK_sym
//                              LAPACK_nonsym
//                              UMFPACK
//                              Belos
//                              Stratimikos_Amesos
//                              Stratimikos_Aztec
//                              Stratimikos_Belos
//                              undefined
SOLVER                          UMFPACK
//
// sub solver/smoother block number (SIMPLE/C: used for prediction of primary variable on all levels, BS: used for fine and intermedium BraessSarazin (BS) level smoother)
SUB_SOLVER1                     -1
//
// sub solver/smoother block number (SIMPLE/C: used for SchurComplement eq. on all levels, BS: used for coarse BraessSarazin (BS) level smoother)
SUB_SOLVER2                     -1
//
----------------------------------------------------------STRUCTURAL DYNAMIC
//
INT_STRATEGY                    Standard
// Switch on adaptive control of linear solver tolerance for nonlinear solution
//                              Yes,No,yes,no,YES,NO
ADAPTCONV                       No
//
// The linear solver shall be this much better than the current nonlinear residual in the nonlinear convergence limit
ADAPTCONV_BETTER                0.1
//
// TEMPORARY FLAG: Switch on time integration driver based on ADAPTER::Structure rather than independent implementation
//                              Yes,No,yes,no,YES,NO
//
// type of damping: (1) Rayleigh damping matrix and use it from M_DAMP x M + K_DAMP x K, (2) Material based and calculated in elements
//                              no,No,NO,yes,Yes,YES,Rayleigh,Material
DAMPING                         No
//
// What to do in time integration even if Newton-Raphson iteration failed
DIVERCONT                       stop
//
// type of time integration control
//                              Statics
//                              GenAlpha
//                              OneStepTheta
//                              ExplicitEuler
//                              CentrDiff
//                              AdamsBashforth2
//                              EulerMaruyama
//                              EulerImpStoch
//                              StatMech
DYNAMICTYP                      GenAlpha
//
// EIGEN make eigenanalysis of the initial dynamic system
//
// type of norm to be applied to residuals
//                              L1,L2,Rms,Inf
ITERNORM                        L2
//
//
K_DAMP                          0.5
//
// number of linear solver used for structural problems
LINEAR_SOLVER                   3
//
// Use linearization of external follower load in Newton
//                              Yes,No,yes,no,YES,NO
LOADLIN                         no
//
// Lump the mass matrix for explicit time integration
//                              Yes,No,yes,no,YES,NO
LUMPMASS                        No
//
//
// maximum number of iterations allowed for Newton-Raphson iteration before failure
MAXITER                         50
//
// maximum time
MAXTIME                         5
//
// minimum number of iterations to be done within Newton-Raphson loop
MINITER                         0
//
// Use the modified explicit Euler time integration scheme
//                              Yes,No,yes,no,YES,NO
MODIFIEDEXPLEULER               Yes
//
M_DAMP                          0.5
//
// Nonlinear solution technique
//                              vague
//                              fullnewton
//                              lsnewton
//                              oppnewton
//                              modnewton
//                              ptc
//                              newtonlinuzawa
//                              augmentedlagrange
//                              NoxNewtonLineSearch
//                              noxgeneral
NLNSOL                          fullnewton
//
// binary operator to combine pressure and displacement values
//                              And,Or
NORMCOMBI_DISPPRES              And
//
// binary operator to combine displacement and residual force values
//                              And,Or
NORMCOMBI_RESFDISP              And
//
// binary operator to combine force and incompressible residual
//                              And,Or
NORMCOMBI_RESFINCO              And
//
// type of norm for displacement convergence check
//                              Abs,Rel,Mix
NORM_DISP                       Abs
//
// type of norm for incompressible residual convergence check
//                              Abs
NORM_INCO                       Abs
//
// type of norm for pressure convergence check
//                              Abs
NORM_PRES                       Abs
//
// type of norm for residual convergence check
//                              Abs,Rel,Mix
NORM_RESF                       Abs
//
// maximum number of steps
NUMSTEP                         200
//
// Type of predictor
//                              Vague
//                              ConstDis
//                              ConstVel
//                              ConstAcc
//                              ConstDisVelAcc
//                              TangDis
//                              ConstDisPres
//                              ConstDisVelAccPres
PREDICT                         ConstDisVelAcc
//
// prestressing takes values none mulf id
//                              none,None,NONE,mulf,Mulf,MULF,id,Id,ID
PRESTRESS                       none
//
// time to switch from pre to post stressing
PRESTRESSTIME                   0
//
// pseudo time step for pseudo transient continuation (PTC) stabilized Newton procedure
PTCDT                           0.1
//
// write system energies every requested step
RESEVRYERGY                     0
//
// write restart possibility every RESTARTEVRY steps
RESTARTEVRY                     1
//
//
// save displacements and contact forces every RESULTSEVRY steps
RESULTSEVRY                     1
//
// number of STC layers for multilayer case
STC_LAYER                       1
//
// Scaled director conditioning for thin shell structures
//                              no,No,NO,Symmetric,Right
STC_SCALING                     no
//
//
// time step size
TIMESTEP                        0.05
//
// tolerance in the constr error norm for the newton iteration
TOLCONSTR                       1e-08
//
// tolerance in the displacement norm for the newton iteration
TOLDISP                         1e-12
//
// tolerance in the incompressible residual norm for the newton iteration
TOLINCO                         1e-10
//
// tolerance in pressure norm for the newton iteration
TOLPRE                          1e-10
//
// tolerance in the residual norm for the newton iteration
TOLRES                          1e-12
//
//                              uzawa,simple,direct
UZAWAALGO                       direct
//
// maximum number of iterations allowed for uzawa algorithm before failure going to next newton step
UZAWAMAXITER                    50
//
// Parameter for Uzawa algorithm dealing with lagrange multipliers
UZAWAPARAM                      1
//
// Tolerance for iterative solve with Uzawa algorithm
UZAWATOL                        1e-08
//
-------------------------------------------------STRUCTURAL DYNAMIC/GENALPHA
//RHO must be set to -1.0 to activate the four parameters
RHO_INF                         -1.0
// Generalised-alpha factor in [0,1)
ALPHA_F                         0.5
//
// Generalised-alpha factor in [0,1)
ALPHA_M                         0.5
//
// Generalised-alpha factor in (0,1/2]
BETA                            0.25
//
// Generalised-alpha factor in (0,1]
GAMMA                           0.5
//
// mid-average type of internal forces
//                              Vague,ImrLike,TrLike
GENAVG                          TrLike
//
-------------------------------------------------------------------MATERIALS
MAT 1 MAT_fluid DYNVISCOSITY 0.01 DENSITY 1.0
MAT 2 MAT_ElastHyper NUMMAT 1 MATIDS 3 DENS 500
MAT 3 ELAST_CoupNeoHooke YOUNG 250.0 NUE 0.0
MAT 4 MAT_Struct_StVenantKirchhoff YOUNG 1.0 NUE 0.0 DENS 1.0
--------------------------------------------------------CLONING MATERIAL MAP
SRC_FIELD fluid SRC_MAT 1 TAR_FIELD ale TAR_MAT 4
-------------------------------------------------------------FUNCT1
SYMBOLIC_FUNCTION_OF_SPACE_TIME (1-cos(2*t*pi/5))
-------------------------------------------------------------FUNCT2
SYMBOLIC_FUNCTION_OF_SPACE_TIME 10*(y-1)*(1-cos(2*t*pi/5))
-------------------------------------------------------------FUNCT3
-------------------------------------------------------------FUNCT4
----------------------------------------------------------RESULT DESCRIPTION
STRUCTURE DIS structure NODE 22 QUANTITY dispx VALUE 3.24268e-07 TOLERANCE 1e-12
STRUCTURE DIS structure NODE 22 QUANTITY dispy VALUE -7.1401827e-05 TOLERANCE 1e-12
FLUID DIS fluid NODE 500 QUANTITY pressure VALUE 4.989189739e-03 TOLERANCE 1e-12
FLUID DIS fluid NODE 500 QUANTITY velx VALUE 7.4145703e-05 TOLERANCE 1e-12
FLUID DIS fluid NODE 500 QUANTITY vely VALUE -3.52272982e-04 TOLERANCE 1e-12
