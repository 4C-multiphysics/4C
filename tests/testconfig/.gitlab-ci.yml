#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Define global variables for all jobs
variables:
  # Clone repository by default, file have changed attribute.
  GIT_STRATEGY: clone
  # If not called by a scheduler this variable has to be 0.
  # 1: daily full (release, debug)
  # 3: coverage
  # 4: weekly testing of Baci with a current Trilinos develop version
  GITLAB_SCHEDULER_TYPE: '0'

  # Build type for pipelines started via the GitLab GUI
  # Options:
  # - "release" (default)
  # - "debug"
  CTEST_BUILD_TYPE_GITLAB: release

  # Number of threads to be used during build
  NUMBER_OF_BUILD_THREADS: '3'

  # Number of threads to be used during testing
  NUMBER_OF_TEST_THREADS: '1'


  # Variables for docker
  BACI_DOCKER_BUILD_IMAGES:
    description: Build the docker images and push them to the CI registry
    value: 'False'
    options:
    - 'True'
    - 'False'
  BACI_DOCKER_DEPENDENCIES_IMAGE: baci-dependencies:latest

#-------------------------------------------------------------------------------
# Define the base jobs for testing
#-------------------------------------------------------------------------------

# Commands to remove old build files (on shell executors)
.clean-build-folder: &clean-build-folder
  # Delete old build files.
- rm -rf ${CI_PROJECT_DIR}/../baci-build/
  # Clear eventual ccache cache.
- if [ -x "$(command -v ccache)" ]; then ccache -C -z; echo "ccache cache cleared";
  fi

.build-only: &build-only
- mkdir -p ${CI_PROJECT_DIR}/../baci-build
  # configure
- |
  if [ $CTEST_BUILD_TYPE_GITLAB == "debug" ]; then PRESET=${CTEST_BUILD_PRESETS_DEBUG_GITLAB}; else PRESET=${CTEST_BUILD_PRESETS_RELEASE_GITLAB}; fi
  cd ${CI_PROJECT_DIR}
  ./create-baci-python-venv
  cd ${CI_PROJECT_DIR}/../baci-build
  # We override the launcher arguments here to ensure that ccache is not used during testing
  ${CMAKE_COMMAND} ${CI_PROJECT_DIR} --preset=${PRESET} -DCMAKE_C_COMPILER_LAUNCHER="" -DCMAKE_CXX_COMPILER_LAUNCHER=""
- echo Building the following targets ${BUILD_TARGETS}
  # build
- time ${CMAKE_COMMAND} --build . --target ${BUILD_TARGETS} -- -j ${NUMBER_OF_BUILD_THREADS}
  2>&1 | tee build.log

.build-and-test: &build-and-test
- *build-only
  # test
- 'echo ctest selection: $CTEST_TEST_SELECTION'
- time ctest -VV $CTEST_TEST_SELECTION -j $NUMBER_OF_TEST_THREADS | tee test.log |
  grep -e "\*\*\*Failed" -e "\.\.\.   Passed" -e " tests passed\,"
- cd ${CI_PROJECT_DIR}

.check-no-warnings: &check-no-warnings
- cd ${CI_PROJECT_DIR}/../baci-build
  # check for warnings
- if grep -iP "warning:" build.log; then echo 'Warnings found!' && exit 1; else echo
  'No warnings found'; fi
- cd ${CI_PROJECT_DIR}

.post-process-log-files: &post-process-log-files
  # sort output of pipeline
- cd ${CI_PROJECT_DIR}/../baci-build
- ${CI_PROJECT_DIR}/utilities/baci-python-venv/bin/python ${CI_PROJECT_DIR}/utilities/sort_pipeline_output.py
  test.log test.log
  # Write selection of the output into the terminal and therefore to GITLAB
  # Output 200 lines for any failing test
- grep -B 200 '*Failed\|*Timeout' test.log || true
- sed -n '/tests passed,/,//p' test.log
  # Specify which configuration was tested by this pipeline
- 'echo Baci build type: $CTEST_BUILD_TYPE_GITLAB'
- 'echo Run tests matching expression: $TEST_TAG [{.} all tests, {} no test]'
- 'echo Excluded tests: $CTEST_EXCLUDE_STRING [{} no test excluded]'
  # Move the log files to the source folder, so it can be found by artifacts.
- mv build.log ${CI_PROJECT_DIR}/
- mv test.log ${CI_PROJECT_DIR}/
- cd ${CI_PROJECT_DIR}


# Generic job that builds and tests the project. Derived jobs may configure the details via variables.
.buildtest_base:
  stage: buildtest
  variables:
    # So the old build can be used again.
    GIT_STRATEGY: fetch
    BUILD_TARGETS: full
  script:
  - *clean-build-folder
  - *build-and-test
  - *check-no-warnings
  after_script:
  - *post-process-log-files
  artifacts:
    name: $CI_JOB_NAME-$CI_JOB_ID
    paths:
    - '*.log'
    when: on_failure
    expire_in: 1 day


# This kind of job is started when something changes in any protected branch.
# Minimal tests are performed.
.buildtest_minimal:
  extends: .buildtest_base
  variables:
    CTEST_TEST_SELECTION: -L minimal
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  - if: $CI_PIPELINE_SOURCE == "web"
    when: never
  - if: $GITLAB_SCHEDULER_TYPE != "0"
    when: never
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# This kind of job is started when a user triggers a job in the gitlab UI.
# Full tests are performed.
.buildtest_full:
  extends: .buildtest_base
  rules:
  - if: $GITLAB_SCHEDULER_TYPE != "0"
    when: never
  - if: $CI_PIPELINE_SOURCE == "web"


# This kind of job is started by a scheduler, with the variable
# $GITLAB_SCHEDULER_TYPE = "3"
# Full tests with coverage are performed
# A coverage report is created
.buildtest_coverage:
  stage: buildtest
  variables:
    BUILD_TARGETS: full
  script:
  - *clean-build-folder
  - *build-and-test
    # generate the baci_coverage_base.info: the "baseline" coverage data file that contains zero coverage for every instrumented line.
  - lcov --capture --initial --no-external --directory ../baci-build/ --base-directory
    . --output-file baci_coverage_base.info > baci_coverage_base.log
    # generate the baci_coverage_tests.info based on tests run above
  - lcov --capture --no-external --directory ../baci-build/ --base-directory . --output-file
    baci_coverage_tests.info > baci_coverage_tests.log
    # combine the baseline coverage with the coverage from the tests
  - lcov --add-tracefile baci_coverage_base.info --add-tracefile baci_coverage_tests.info
    --output-file baci_coverage.info  > baci_coverage.log
    # remove unwanted files from the coveragre report
  - lcov --remove baci_coverage.info "*/unittests*/*" "*/tests/*" "*/baci-build/*"
    -o baci_coverage_filtered.info > baci_coverage_filtered.log
    # generate the html version of the coverage report
  - genhtml baci_coverage_filtered.info --legend --demangle-cpp --output-directory
    coverage_report/ --title "BACI commit $CI_COMMIT_SHORT_SHA" | tee genhtml_coverage.log
    # add repo link to the commit that the report is based on
  - find coverage_report/ -type f -exec sed -i "s/BACI commit $CI_COMMIT_SHORT_SHA/BACI
    commit  \<a href=\"https:\/\/gitlab.lrz.de\/baci\/baci\/commit\/$CI_COMMIT_SHA\"\>$CI_COMMIT_SHORT_SHA\<\/a\>/g"
    {} \;
  - *post-process-log-files
      # update (push) the cache of the coverage report:
    # cache can be used to pass data between pipelines (in contrast to artifacts that pass data from stage to stage in a
    # single pipeline)
  cache:
    key: cache-coverage-report
    paths:
    - coverage_report/
      # the log is needed to print the value of total line coverage in daily and minimal master pipelines
    - genhtml_coverage.log
    policy: push
  artifacts:
    name: $CI_JOB_NAME-$CI_JOB_ID
    paths:
    - '*.log'
    when: always
    expire_in: 1 day
  rules:
  - if: $GITLAB_SCHEDULER_TYPE == "3"

# This kind of job is started by a daily scheduler, with the variable
# $GITLAB_SCHEDULER_TYPE = "1"
# Full tests are performed.
.buildtest_daily:
  extends: .buildtest_base
  rules:
  - if: $GITLAB_SCHEDULER_TYPE == "1"


# This kind of job is started by a daily scheduler, with the variable
# $GITLAB_SCHEDULER_TYPE = "1"
# Debug tests are performed.
.buildtest_daily_debug:
  extends: .buildtest_base
  variables:
    CTEST_BUILD_TYPE_GITLAB: debug
  rules:
  - if: $GITLAB_SCHEDULER_TYPE == "1"

# Trilinos-develop build job
.buildtest_release_trilinos_develop:
  stage: buildtest
  variables:
    BUILD_TARGETS: full
  script:
  - echo Build and test Trilinos develop branch
  - cd $CI_PROJECT_DIR/..
    # Delete old Trilinos
  - rm -rf Trilinos
    # Cloning the Trilinos-develop branch
  - git clone -b develop https://github.com/trilinos/Trilinos.git
  - cd Trilinos
    # Apply patches for baci
  - git apply $CI_PROJECT_DIR/trilinos/trilinos_for_baci.patch
    # Delete old Trilinos build files
  - rm -rf $CI_PROJECT_DIR/../Trilinos-develop-build
  - mkdir $CI_PROJECT_DIR/../Trilinos-develop-build
  - cd $CI_PROJECT_DIR/../Trilinos-develop-build
    # Configure Trilinos and build it
  - source $CI_PROJECT_DIR/trilinos/$TRILINOS_DEVELOP_CONFIG |& tee ../buildtest_release_trilinos_develop.log
  - make -j${NUMBER_OF_BUILD_THREADS} install |& tee -a ../buildtest_release_trilinos_develop.log

  - *clean-build-folder
  - *build-and-test
  - *check-no-warnings
  after_script:
  - *post-process-log-files
    # Move the log file to the source folder, so it can be found by artifacts.
  - mv ../buildtest_release_trilinos_develop.log buildtest_release_trilinos_develop.log
  artifacts:
    name: $CI_JOB_NAME-$CI_JOB_ID
    paths:
    - '*.log'
    when: on_failure
    expire_in: 1 week
  rules:
  - if: $GITLAB_SCHEDULER_TYPE == "4"

# Doxygen job
.doxygen:
  stage: doxygen
  script:
  - echo Doxygen
    # Delete old build files.
  - rm -rf ../baci-build/
  - mkdir -p ${CI_PROJECT_DIR}/../baci-build && cd ${CI_PROJECT_DIR}/../baci-build

    # Configure and build
  - ${CMAKE_COMMAND} ${CI_PROJECT_DIR} --preset=${CTEST_BUILD_PRESETS_RELEASE_GITLAB}
  - ${CMAKE_COMMAND} --build . --target documentation > ../doxygen.log

    # Throw error if there are Latex errors in doxygen comments. Latex errors can be uniquely identified by a line starting with "! ".
  - if grep -qE '^[eE]rror:' ../doxygen.log; then echo 'Found at least one fatal error
    during doxygen generation.'; exit 1; else echo 'Doxygen builds without fatal errors.';
    fi
  - if grep -qE '^! ' ../doxygen.log; then echo "Found at least one LaTeX error during
    doxygen build."; exit 1; else echo "Doxygen builds without LaTeX errors."; fi
    # Move final doxygen into the base folder for the next stage
  - mv $CI_PROJECT_DIR/../baci-build/doc/html $CI_PROJECT_DIR/doxygen
  after_script:
    # Write Selection of the output into the terminal and therefore to GITLAB
  - sed -n '/* Extra verbosity turned on/,/Test project /p' ../doxygen.log
    # Write information about possible Latex errors to terminal
  - if grep -qE '^! ' ../doxygen.log; then echo "Found at least one LaTeX error during
    doxygen build."; else echo "Doxygen builds without LaTeX errors."; fi
    # Move the log file to the source folder, so it can be found by artifacts.
  - mv ../doxygen.log doxygen.log
  variables:
    CTEST_BUILD_PRESETS_RELEASE_GITLAB: docker
    CMAKE_COMMAND: /opt/baci-dependencies/bin/cmake

#-------------------------------------------------------------------------------
# Stages during testing.
#-------------------------------------------------------------------------------

stages:
- build-docker-images
- checkcode
- buildtest
- doxygen
- pages

#-------------------------------------------------------------------------------
# Actual jobs for testing.
#-------------------------------------------------------------------------------

# ALL---------------------------------------------------------------------------

checkcode:
  stage: checkcode
  image: $CI_REGISTRY_IMAGE/$BACI_DOCKER_DEPENDENCIES_IMAGE
  script:
  - echo code check
  - cd ../baci
  - ./create-baci-python-venv
  - bash utilities/code_checks/check_format_and_header
  artifacts:
    name: $CI_JOB_NAME-$CI_JOB_ID
    paths:
    - wrong_*.txt
    when: on_failure
    expire_in: 1 day
  rules:
  - if: $GITLAB_SCHEDULER_TYPE == "3" || $GITLAB_SCHEDULER_TYPE == "4"
    when: never
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - if: $CI_PIPELINE_SOURCE == "web"
  - if: $CI_PIPELINE_SOURCE == "schedule"
  tags:
  - checkcode

# IMCS--------------------------------------------------------------------------

imcs-buildtest_minimal_ubuntu20:
  extends: .buildtest_minimal
  variables:
    CTEST_BUILD_PRESETS_RELEASE_GITLAB: imcs_workstation
    CMAKE_COMMAND: /imcs/public/compsim/opt/cmake-3.25.2/bin/cmake
  tags:
  - imcs-minimal-ubuntu20
  needs: [checkcode]

imcs-buildtest_full_ubuntu20:
  extends: .buildtest_full
  variables:
    NUMBER_OF_TEST_THREADS: '12'
    NUMBER_OF_BUILD_THREADS: '12'
    CTEST_BUILD_PRESETS_RELEASE_GITLAB: imcs_workstation
    CTEST_BUILD_PRESETS_DEBUG_GITLAB: imcs_workstation_optimized_debug
    CMAKE_COMMAND: /imcs/public/compsim/opt/cmake-3.25.2/bin/cmake
  tags:
  - imcs-full-ubuntu20
  needs: [checkcode]

imcs-buildtest_daily_ubuntu20:
  extends: .buildtest_daily
  variables:
    NUMBER_OF_TEST_THREADS: '12'
    NUMBER_OF_BUILD_THREADS: '12'
    CTEST_BUILD_PRESETS_RELEASE_GITLAB: imcs_workstation
    CMAKE_COMMAND: /imcs/public/compsim/opt/cmake-3.25.2/bin/cmake
  tags:
  - imcs-nightly-full-ubuntu20
  needs: [checkcode]

imcs-buildtest_daily_debug_ubuntu20:
  extends: .buildtest_daily_debug
  variables:
    NUMBER_OF_TEST_THREADS: '12'
    NUMBER_OF_BUILD_THREADS: '12'
    CTEST_BUILD_PRESETS_DEBUG_GITLAB: imcs_workstation_optimized_debug
    CMAKE_COMMAND: /imcs/public/compsim/opt/cmake-3.25.2/bin/cmake
  tags:
  - imcs-nightly-debug-ubuntu20
  needs: [checkcode]

imcs-buildtest_release_trilinos_develop:
  extends: .buildtest_release_trilinos_develop
  variables:
    NUMBER_OF_TEST_THREADS: '12'
    NUMBER_OF_BUILD_THREADS: '12'
    CTEST_BUILD_PRESETS_RELEASE_GITLAB: imcs_workstation_trilinos
    CMAKE_COMMAND: /imcs/public/compsim/opt/cmake-3.25.2/bin/cmake
    TRILINOS_ROOT: $CI_PROJECT_DIR/../Trilinos-develop-build
    TRILINOS_DEVELOP_CONFIG: do-configure-trilinos-develop-imcs
  tags:
  - imcs-buildtest_release_trilinos_develop-ubuntu20
  needs: []

# LNM---------------------------------------------------------------------------

codeclimate:
  stage: checkcode
  image: $CI_REGISTRY_IMAGE/$BACI_DOCKER_DEPENDENCIES_IMAGE
  script:
  - *clean-build-folder
  - mkdir ../baci-build/ && cd ../baci-build/
    # configure to get a compilation database
  - ${CMAKE_COMMAND} ${CI_PROJECT_DIR} --preset=${CTEST_BUILD_PRESETS_RELEASE_GITLAB}
    # create  and activate virtual environment
  - python3 -m venv venv
  - . venv/bin/activate
  - pip install wheel
  - pip install -r ${CI_PROJECT_DIR}/utilities/code_climate/requirements.txt
    # run clang tidy and export report
  - python ${CI_PROJECT_DIR}/utilities/code_climate/run_clang_tidy.py -j 12 -p . -extra-arg="-I/usr/lib/x86_64-linux-gnu/openmpi/include/"
    -src ${CI_PROJECT_DIR} -export ${CI_PROJECT_DIR}/codeclimate.json -header-filter
    ".*\/baci\/src\/.*" ".*\/baci\/src\/.*"
  - cd ${CI_PROJECT_DIR}
  variables:
    CTEST_BUILD_PRESETS_RELEASE_GITLAB: docker
    CMAKE_COMMAND: /opt/baci-dependencies/bin/cmake
  artifacts:
    paths: [codeclimate.json]
    reports:
      codequality: codeclimate.json
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - if: $CI_PIPELINE_SOURCE == "web"
  - if: $CI_PIPELINE_SOURCE == "schedule"
  allow_failure: true
  tags:
  - codeclimate

buildtest_minimal_release:
  extends: .buildtest_minimal
  image: $CI_REGISTRY_IMAGE/$BACI_DOCKER_DEPENDENCIES_IMAGE
  variables:
    NUMBER_OF_TEST_THREADS: '10'
    NUMBER_OF_BUILD_THREADS: '10'
    CTEST_BUILD_PRESETS_RELEASE_GITLAB: docker
    CMAKE_COMMAND: /opt/baci-dependencies/bin/cmake
  tags:
  - buildtest-minimal
  needs: [checkcode]

buildtest_coverage:
  extends: .buildtest_coverage
  image: $CI_REGISTRY_IMAGE/$BACI_DOCKER_DEPENDENCIES_IMAGE
  variables:
    # increase the global test timeout
    GLOBAL_TEST_TIMEOUT_SCALE: '30'
    # increase the unit test timeout
    UNITTEST_TIMEOUT: '50'
    # enable coverage option of ctest
    NUMBER_OF_TEST_THREADS: '10'
    NUMBER_OF_BUILD_THREADS: '10'
    CTEST_BUILD_PRESETS_RELEASE_GITLAB: docker_coverage
    CMAKE_COMMAND: /opt/baci-dependencies/bin/cmake
  tags:
  - coverage
  needs: []

pages: # job name needs to be pages
  stage: pages
  image: $CI_REGISTRY_IMAGE/$BACI_DOCKER_DEPENDENCIES_IMAGE
  variables:
    # stage operates exclusively on artifacts. No need for source code.
    GIT_STRATEGY: fetch
    # Download Doxygen from previous doxygen stage
  dependencies:
  - doxygen
  script:
    # print the measured coverage rate
  - echo 'measured'
  - grep "Overall coverage rate:" -A 2 genhtml_coverage.log
    # Create directory that will be published
  - mkdir -p public
    # move created coverage report to public folder (which is the path for GitLab Pages content)
  - mv coverage_report public/coverage_report
    # Move most recent doxygen to public folder
  - mv doxygen public/doxygen
    # Create python venv to create badges
  - python3 -m venv venv
  - . venv/bin/activate
  - pip install anybadge
    # Create doxygen badge
  - anybadge -l doxygen -v ok --color=green -f public/doxygen.svg
    # Create website badge
  - anybadge -l website -v ok --color=green -f public/website.svg
  coverage: /lines\.*:\s+\d+\.\d+/
  cache:
    key: cache-coverage-report
    paths:
    - coverage_report/
    - genhtml_coverage.log
    policy: pull
  artifacts:
    # store the public path in artifact
    # this is needed since in a subsequent deploy stage (automatically generated by GitLab)
    # the content of the below artifact is published on GitLab Pages
    paths:
    - public
    expire_in: 1 day
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags: # must run on the same machine as the coverage report
  - coverage

doxygen-web:
  extends: .doxygen
  image: $CI_REGISTRY_IMAGE/$BACI_DOCKER_DEPENDENCIES_IMAGE
  variables:
    CTEST_BUILD_PRESETS_RELEASE_GITLAB: docker
    CMAKE_COMMAND: /opt/baci-dependencies/bin/cmake
  tags:
  - doxygen
  artifacts:
    name: $CI_JOB_NAME-$CI_JOB_ID
    paths:
    - doxygen.log
    when: on_failure
    expire_in: 1 day
  rules:
  - if: $GITLAB_SCHEDULER_TYPE == "3"
    when: never
  - if: $CI_PIPELINE_SOURCE == "web"

doxygen:
  extends: .doxygen
  image: $CI_REGISTRY_IMAGE/$BACI_DOCKER_DEPENDENCIES_IMAGE
  variables:
    CTEST_BUILD_PRESETS_RELEASE_GITLAB: docker
    CMAKE_COMMAND: /opt/baci-dependencies/bin/cmake
  tags:
  - doxygen
  artifacts:
    name: $CI_JOB_NAME-$CI_JOB_ID
    paths:
    - doxygen.log
    - doxygen/
    when: always
    expire_in: 1 day
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - if: $CI_PIPELINE_SOURCE == "schedule"

# Build the docker image with all dependencies for Baci
build-base-dependencies:
  stage: build-docker-images
  tags:
  - build-docker-image
  image: docker:20.10.16
  services:
  - docker:20.10.16-dind
  variables:
    FULL_IMAGE_PATH: $CI_REGISTRY_IMAGE/$BACI_DOCKER_DEPENDENCIES_IMAGE
  before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # pull the latest available image to make use of caching
  - echo $CI_REGISTRY_IMAGE
  - echo $CI_REGISTRY
  - docker build --no-cache --tag $FULL_IMAGE_PATH --file docker/Dockerfile .
  - docker push $FULL_IMAGE_PATH
  rules:
  - if: $BACI_DOCKER_BUILD_IMAGES == "True"

buildtest_full_release:
  extends: .buildtest_full
  image: $CI_REGISTRY_IMAGE/$BACI_DOCKER_DEPENDENCIES_IMAGE
  variables:
    NUMBER_OF_TEST_THREADS: '10'
    NUMBER_OF_BUILD_THREADS: '10'
    CTEST_BUILD_PRESETS_RELEASE_GITLAB: docker
    CTEST_BUILD_PRESETS_DEBUG_GITLAB: docker_debug
    CMAKE_COMMAND: /opt/baci-dependencies/bin/cmake
  tags:
  - buildtest
  needs:
  - checkcode
  - job: build-base-dependencies
    optional: true
  # Make use of evaluation order to run test in nightly pipeline as well
  rules:
  - if: $GITLAB_SCHEDULER_TYPE == "1"
  - !reference [.buildtest_full, rules]

buildtest_full_debug:
  extends: .buildtest_daily_debug
  image: $CI_REGISTRY_IMAGE/$BACI_DOCKER_DEPENDENCIES_IMAGE
  variables:
    NUMBER_OF_TEST_THREADS: '10'
    NUMBER_OF_BUILD_THREADS: '10'
    CTEST_BUILD_PRESETS_DEBUG_GITLAB: docker_debug
    CMAKE_COMMAND: /opt/baci-dependencies/bin/cmake
  tags:
  - buildtest-debug
  needs:
  - checkcode
  - job: build-base-dependencies
    optional: true

build-verify-headers:
  image: $CI_REGISTRY_IMAGE/$BACI_DOCKER_DEPENDENCIES_IMAGE
  variables:
    NUMBER_OF_BUILD_THREADS: '10'
    CMAKE_COMMAND: /opt/baci-dependencies/bin/cmake
  tags:
  - verify-headers
  needs:
  - job: build-base-dependencies
    optional: true
  stage: checkcode
  script:
  - mkdir -p ${CI_PROJECT_DIR}/../baci-build
    # configure
  - |
    cd ${CI_PROJECT_DIR}
    ./create-baci-python-venv
    cd ${CI_PROJECT_DIR}/../baci-build
    # Configure verification of header sets.
    ${CMAKE_COMMAND} ${CI_PROJECT_DIR} --preset=docker -DCMAKE_VERIFY_INTERFACE_HEADER_SETS="ON"
    # verify headers
  - time ${CMAKE_COMMAND} --build . --target all_verify_interface_header_sets -- -j
    ${NUMBER_OF_BUILD_THREADS} 2>&1 | tee verify_headers.log
  artifacts:
    name: $CI_JOB_NAME-$CI_JOB_ID
    paths:
    - '*.log'
    when: on_failure
    expire_in: 1 day
  rules:
  - !reference [checkcode, rules]
