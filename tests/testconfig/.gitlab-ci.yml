#-------------------------------------------------------------------------------
# General rules when to create a pipeline
# N.B. This doesn't say anything about which jobs are run but only determines
# if a pipeline is created.
workflow:
  name: $FOUR_C_PIPELINE_NAME
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        FOUR_C_PIPELINE_NAME: Tag pipeline for '$CI_COMMIT_TAG'

#-------------------------------------------------------------------------------
# Define global variables for all jobs
variables:
  # Clone repository by default, file have changed attribute.
  GIT_STRATEGY: clone

  GITLAB_PIPELINE_TYPE:
    value: trilinos develop
    description: Type of pipeline
    options: [trilinos develop]

  # Hash of all relevant dependencies for the docker image
  FOUR_C_DOCKER_DEPENDENCIES_HASH: 64f20210

  # Variables for Trilinos pipeline
  # The default Trilinos commit ref the Trilinos pipeline is running on
  TRILINOS_PIPELINE_COMMIT_REF: develop
  FOUR_C_DOCKER_DEPENDENCIES_IMAGE_TRILINOS: 4c-dependencies-trilinos:$TRILINOS_PIPELINE_COMMIT_REF

.compute_dependencies_hash: &compute_dependencies_hash
  # compute short hash from contents of folder dependencies and docker (exclude trilinos_config and README.md files)
  - COMPUTED_DOCKER_DEPENDENCIES_HASH=`./docker/dependencies/compute_dependencies_hash.sh`

before_script:
  - git config --global --add safe.directory ${CI_PROJECT_DIR}
  - *compute_dependencies_hash
  - if [ "${COMPUTED_DOCKER_DEPENDENCIES_HASH}" != "$FOUR_C_DOCKER_DEPENDENCIES_HASH" ]; then echo "Docker
    image version hash does not match the hash of the dependencies. You likely need to change the hash
    to ${COMPUTED_DOCKER_DEPENDENCIES_HASH} and rebuild the dependencies." && exit 1; else echo "Running
    on the correct docker image version with hash $FOUR_C_DOCKER_DEPENDENCIES_HASH."; fi

.build-only: &build-only
  - mkdir -p ${CI_PROJECT_DIR}/build
  # configure
  - |
    cd ${CI_PROJECT_DIR}/build
    cmake ${CI_PROJECT_DIR} --fresh --preset=${CMAKE_PRESET}
  - echo Building the following targets ${BUILD_TARGETS}
  # build
  - time cmake --build . --target ${BUILD_TARGETS} -- -j `nproc` 2>&1 | tee ${CI_PROJECT_DIR}/build.log

.build-and-test: &build-and-test
  - *build-only
  # test
  - time ctest -VV -j `nproc` --output-on-failure --output-junit ${CI_PROJECT_DIR}/junit_test_summary.xml
  - cd ${CI_PROJECT_DIR}

# Generic job that builds and tests the project. Derived jobs may configure the details via variables.
.buildtest_base:
  stage: buildtest
  variables:
    # So the old build can be used again.
    GIT_STRATEGY: fetch
    BUILD_TARGETS: full
  script:
    - rm -rf ${CI_PROJECT_DIR}/build/
    - *build-and-test
  artifacts:
    name: $CI_JOB_NAME-$CI_JOB_ID
    paths:
      - '*.log'
      - junit_test_summary.xml
    reports:
      junit: junit_test_summary.xml
    when: always
    expire_in: 1 day

#-------------------------------------------------------------------------------
# Stages during testing.
#-------------------------------------------------------------------------------

# We use stages just for grouping jobs into different categories. Dependencies are defined using the
# `needs` keyword to reduce the time of a pipeline run, see the Gitlab documentation about Directed
# Acyclic Graph Pipelines (https://docs.gitlab.com/ee/ci/pipelines/pipeline_architectures.html#directed-acyclic-graph-pipelines).
stages:
  - build-docker-images
  - buildtest
  - pages

# The Trilinos pipeline with a specific commit ref runs via a schedule or when manually triggered
build_base_dependencies_trilinos_develop:
  stage: build-docker-images
  tags:
    - build-docker-image
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "Generating 4C dependencies docker image with Trilinos version $TRILINOS_PIPELINE_COMMIT_REF"
    - FULL_IMAGE_PATH="$CI_REGISTRY_IMAGE/$FOUR_C_DOCKER_DEPENDENCIES_IMAGE_TRILINOS"
    - docker build --no-cache --build-arg NPROCS=`nproc` --build-arg TRILINOS_VERSION="$TRILINOS_PIPELINE_COMMIT_REF"
      --tag $FULL_IMAGE_PATH --file docker/trilinos_develop/Dockerfile .
    - docker push $FULL_IMAGE_PATH
  rules:
    - if: $GITLAB_PIPELINE_TYPE == "trilinos develop"
  interruptible: true

gcc9_trilinos_develop:
  extends: .buildtest_base
  image: $CI_REGISTRY_IMAGE/$FOUR_C_DOCKER_DEPENDENCIES_IMAGE_TRILINOS
  variables:
    CMAKE_PRESET: docker
  tags:
    - buildtest
  needs:
    - job: build_base_dependencies_trilinos_develop
      optional: true
  rules:
    - if: $GITLAB_PIPELINE_TYPE == "trilinos develop"
  interruptible: true

gcc9_assertions_trilinos_develop:
  extends: .buildtest_base
  image: $CI_REGISTRY_IMAGE/$FOUR_C_DOCKER_DEPENDENCIES_IMAGE_TRILINOS
  variables:
    CMAKE_PRESET: docker_assertions
  tags:
    - buildtest
  needs:
    - job: build_base_dependencies_trilinos_develop
      optional: true
  rules:
    - if: $GITLAB_PIPELINE_TYPE == "trilinos develop"
  interruptible: true
