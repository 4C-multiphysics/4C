--- #-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Define global variables for all jobs
variables:
    # Clone repository by default, file have changed attribute.
    GIT_STRATEGY: clone
    # If not called by a scheduler this variable has to be 0.
    # 1: daily full (release, debug)
    # 3: weekly coverage
    GITLAB_SCHEDULER_TYPE: "0"

    # Build type for pipelines started via the GitLab GUI
    # Options:
    # - "release" (default)
    # - "debug"
    CTEST_BUILD_TYPE_GITLAB: "release"

    # Prefix for do-configure.
    CTEST_CONFIGURE_PREFIX: ""

    # Postfix for do-configure.
    CTEST_CONFIGURE_POSTFIX: ""

    # Select specific test by regular expressen (".": all)
    TEST_TAG: "."

    # Temporary exclude postprocessing tests at IMCS.
    CTEST_EXCLUDE_STRING: ""

    # Flag to specify if pipeline fails on warning (0:no, 1:yes)
    CTEST_FAIL_ON_WARNING: "1"

    # Flags for additional pipelines (daily full) performed only if set (used of the clusters) (0:no, 1:yes)
    GITLAB_SCHEDULER_LNM_SCHMARRN: "0"
    GITLAB_SCHEDULER_LNM_DEEP: "0"
    GITLAB_SCHEDULER_LNM_BRUTEFORCE: "0"

    # Flags for entering interactive mode on specific machines # (0: off, 1: on)
    GITLAB_INTERACTIVE_MODE: "0"
    # Flag for the machine to start interactive session (none, lnm_workstation, lnm_bruteforce_icc, lnm_bruteforce_gcc, lnm_deep, lnm_schmarrn, imcs_ubuntu20)
    GITLAB_INTERACTIVE_MACHINE: "none"
    # Flags for doing a clean build in interactive mode # (0: off, 1: on)
    GITLAB_INTERACTIVE_CLEAN: "0"

    # Flags for cdash.
    CTEST_DROP_SITE_CDASH_GITLAB: "0"
    CTEST_DROP_SITE_GITLAB: "jacobi.lnm.mw.tum.de"
    CTEST_DROP_LOCATION_GITLAB: "/cdash/submit.php?project=baci"


#-------------------------------------------------------------------------------
# Define the base jobs for testing
#-------------------------------------------------------------------------------

# This kind of job is started when something changes in the master branch.
# Minimal tests are performed.
.buildtest_minimal: &buildtest_minimal
    stage: buildtest
    variables:
        # So the old build can be used again.
        GIT_STRATEGY: fetch
    script:
        - "echo minimal test: triggered by change in master"
        # Delete old build files.
        - rm -rf ../baci-build/
        # Clear eventual ccache cache.
        - 'if [ -x "$(command -v ccache)" ]; then ccache -C -z; echo "ccache cache cleared"; fi'
        - ctest -S $CI_PROJECT_DIR/tests/testconfig/test_release.cmake -VV -L minimal | tee ../buildtest_minimal.log | grep -e "^MakeCommand" -e "^\[" -e "^\[" -e "Compiler " -e "\*\*\*Failed" -e "\.\.\.   Passed" -e " tests passed\,"
    after_script:
        # Move the log file to the source folder, so it can be found by artifacts.
        - mv ../buildtest_minimal.log buildtest_minimal.log
    artifacts:
        name: "$CI_JOB_NAME-$CI_JOB_ID"
        paths:
            - buildtest_minimal.log
        when: on_failure
        expire_in: 1 day
    only:
        - master
    except:
        refs:
            - schedules
            - web
        variables:
            - $GITLAB_SCHEDULER_TYPE == "1"
            - $GITLAB_SCHEDULER_TYPE == "2"
            - $GITLAB_SCHEDULER_TYPE == "3"

# This kind of job is started when a user triggers a job in the gitlab UI.
# Full tests are performed.
.buildtest_full: &buildtest_full
    stage: buildtest
    script:
        # Specify which configuration is tested by this pipeline
        - "echo Baci build type: $CTEST_BUILD_TYPE_GITLAB"
        - "echo Run tests matching expression: $TEST_TAG [{.} all tests, {} no test]"
        - "echo Excluded tests: $CTEST_EXCLUDE_STRING [{} no test excluded]"
        # Delete old build files.
        - rm -rf ../baci-build/
        # Clear eventual ccache cache.
        - 'if [ -x "$(command -v ccache)" ]; then ccache -C -z; echo "ccache cache cleared"; fi'
        # Output to log because it is too much for the gitlab console.
        - 'ctest -S $CI_PROJECT_DIR/tests/testconfig/test_${CTEST_BUILD_TYPE_GITLAB}.cmake -VV -E "$CTEST_EXCLUDE_STRING" -R "$TEST_TAG" | tee ../buildtest_full.log | grep -e "^MakeCommand" -e "^\[" -e "^\[" -e "Compiler " -e "\*\*\*Failed" -e "\.\.\.   Passed" -e " tests passed\," '
    after_script:
        # Write Selection of the output into the terminal and therefore to GITLAB
        # Output 200 lines for any failing test
        - grep -B 200 '*Failed\|*Timeout' ../buildtest_full.log || true
        - sed -n '/tests passed,/,//p' ../buildtest_full.log
        # Specify which configuration was tested by this pipeline
        - "echo Baci build type: $CTEST_BUILD_TYPE_GITLAB"
        - "echo Run tests matching expression: $TEST_TAG [{.} all tests, {} no test]"
        - "echo Excluded tests: $CTEST_EXCLUDE_STRING [{} no test excluded]"
        # Move the log file to the source folder, so it can be found by artifacts.
        - mv ../buildtest_full.log buildtest_full.log
    artifacts:
        name: "$CI_JOB_NAME-$CI_JOB_ID"
        paths:
            - buildtest_full.log
        when: on_failure
        expire_in: 1 day
    only:
        refs:
            - web
    except:
        variables:
            - $GITLAB_SCHEDULER_TYPE == "1"
            - $GITLAB_SCHEDULER_TYPE == "2"
            - $GITLAB_SCHEDULER_TYPE == "3"
            - $GITLAB_INTERACTIVE_MODE == "1"

# This kind of job is started when a user triggers a job in the Gitlab UI and sets the interactive flag GITLAB_INTERACTIVE_MODE to 1
.buildtest_interactive: &buildtest_interactive
    stage: buildtest
    script:
        # Specify which configuration is tested by this pipeline
        - "echo Baci build type: $CTEST_BUILD_TYPE_GITLAB"
        - "echo Run tests matching expression: $TEST_TAG [{.} all tests, {} no test]"
        - "echo Excluded tests: $CTEST_EXCLUDE_STRING [{} no test excluded]"
        # clear cache only if specified
        - 'if [ "$GITLAB_INTERACTIVE_CLEAN" == "1" ]; then'
        - "echo Cleaning old build files"
        # Delete old build files.
        - rm -rf ../baci-build/
        # Clear eventual ccache cache.
        - 'if [ -x "$(command -v ccache)" ]; then ccache -C -z; echo "ccache cache cleared"; fi'
        - "fi"
        # Output to log because it is too much for the gitlab console.
        - 'ctest -S $CI_PROJECT_DIR/tests/testconfig/test_${CTEST_BUILD_TYPE_GITLAB}.cmake -VV -E "$CTEST_EXCLUDE_STRING" -R "$TEST_TAG" | tee ../buildtest_interactive.log | grep -e "^MakeCommand" -e "^\[" -e "^\[" -e "Compiler " -e "\*\*\*Failed" -e "\.\.\.   Passed" -e " tests passed\," '
    after_script:
        # Write Selection of the output into the terminal and therefore to GITLAB
        # Output 200 lines for any failing test
        - grep -B 200 '*Failed\|*Timeout' ../buildtest_interactive.log || true
        - sed -n '/tests passed,/,//p' ../buildtest_interactive.log
        # Specify which configuration was tested by this pipeline
        - "echo Baci build type: $CTEST_BUILD_TYPE_GITLAB"
        - "echo Run tests matching expression: $TEST_TAG [{.} all tests, {} no test]"
        - "echo Excluded tests: $CTEST_EXCLUDE_STRING [{} no test excluded]"
        # Move the log file to the source folder, so it can be found by artifacts.
        - mv ../buildtest_interactive.log buildtest_interactive.log
    artifacts:
        name: "$CI_JOB_NAME-$CI_JOB_ID"
        paths:
            - buildtest_interactive.log
        expire_in: 1 day

# This kind of job is started by a weekly scheduler, with the variable
# $GITLAB_SCHEDULER_TYPE = "3"
# Full tests with coverage are performed
# A coverage report is created
.buildtest_coverage_weekly: &buildtest_coverage_weekly
    stage: buildtest
    script:
        # Specify which configuration is tested by this pipeline
        - "echo Baci build type: $CTEST_BUILD_TYPE_GITLAB"
        - "echo Run tests matching expression: $TEST_TAG [{.} all tests, {} no test]"
        - "echo Excluded tests: $CTEST_EXCLUDE_STRING [{} no test excluded]"
        # Delete old build files.
        - rm -rf ../baci-build/
        # Clear eventual ccache cache.
        - 'if [ -x "$(command -v ccache)" ]; then ccache -C -z; echo "ccache cache cleared"; fi'
        # Output to log because it is too much for the gitlab console.
        - 'ctest -S $CI_PROJECT_DIR/tests/testconfig/test_release.cmake -VV -E "$CTEST_EXCLUDE_STRING" -R "$TEST_TAG" | tee buildtest_weekly_coverage.log | grep -e "^MakeCommand" -e "^\[" -e "^\[" -e "Compiler " -e "\*\*\*Failed" -e "\.\.\.   Passed" -e " tests passed\," '
        # generate the baci_coverage_base.info: the "baseline" coverage data file that contains zero coverage for every instrumented line.
        - lcov --capture --initial --no-external --directory ../baci-build/ --base-directory . --output-file baci_coverage_base.info > baci_coverage_base.log
        # generate the baci_coverage_tests.info based on tests run above
        - lcov --capture --no-external --directory ../baci-build/ --base-directory . --output-file baci_coverage_tests.info > baci_coverage_tests.log
        # combine the baseline coverage with the coverage from the tests
        - lcov --add-tracefile baci_coverage_base.info --add-tracefile baci_coverage_tests.info --output-file baci_coverage.info  > baci_coverage.log
        # remove unwanted files from the coveragre report
        - lcov --remove baci_coverage.info "*/Unittests/*" "*/tests/*" "*/baci-build/*" -o baci_coverage_filtered.info > baci_coverage_filtered.log
        # generate the html version of the coverage report
        - genhtml baci_coverage_filtered.info --legend --demangle-cpp --output-directory coverage_report/ --title "BACI commit $CI_COMMIT_SHORT_SHA" | tee genhtml_weekly_coverage.log
        # add repo link to the commit that the report is based on
        - find coverage_report/ -type f -exec sed -i "s/BACI commit $CI_COMMIT_SHORT_SHA/BACI commit  \<a href=\"https:\/\/gitlab.lrz.de\/baci\/baci\/commit\/$CI_COMMIT_SHA\"\>$CI_COMMIT_SHORT_SHA\<\/a\>/g" {} \;
        # Write Selection of the output into the terminal and therefore to GITLAB
        # Output 200 lines for any failing test
        - grep -B 200 '*Failed\|*Timeout' buildtest_weekly_coverage.log || true
        - sed -n '/tests passed,/,//p' buildtest_weekly_coverage.log
        # Specify which configuration was tested by this pipeline
        - "echo Baci build type: $CTEST_BUILD_TYPE_GITLAB"
        - "echo Run tests matching expression: $TEST_TAG [{.} all tests, {} no test]"
        - "echo Excluded tests: $CTEST_EXCLUDE_STRING [{} no test excluded]"
    # update (push) the cache of the weekly coverage report:
    # cache can be used to pass data between pipelines (in contrast to artifacts that pass data from stage to stage in a
    # single pipeline)
    cache:
        key: cache-weekly-coverage-report
        paths:
            - coverage_report/
            # the log is needed to print the weekly value of total line coverage in daily and minimal master pipelines
            - genhtml_weekly_coverage.log
        policy: push
    artifacts:
        name: "$CI_JOB_NAME-$CI_JOB_ID"
        paths:
            - baci_coverage_base.log
            - baci_coverage_tests.log
            - baci_coverage.log
            - baci_coverage_filtered.log
            - buildtest_weekly_coverage.log
            - genhtml_weekly_coverage.log
        when: always
        expire_in: 1 day
    only:
        variables:
            - $GITLAB_SCHEDULER_TYPE == "3"

# This kind of job is started by a daily scheduler, with the variable
# $GITLAB_SCHEDULER_TYPE = "1"
# Full tests are performed.
.buildtest_daily: &buildtest_daily
    stage: buildtest
    script:
        # Specify which configuration is tested by this pipeline
        - "echo Nightly Test Release"
        - "echo Baci build type: $CTEST_BUILD_TYPE_GITLAB"
        - "echo Run tests matching expression: $TEST_TAG [{.} all tests, {} no test]"
        - "echo Excluded tests: $CTEST_EXCLUDE_STRING [{} no test excluded]"
        # Delete old build files.
        - rm -rf ../baci-build/
        # Clear eventual ccache cache.
        - 'if [ -x "$(command -v ccache)" ]; then ccache -C -z; echo "ccache cache cleared"; fi'
        # Output to log because it is too much for the gitlab console.
        - 'ctest -S $CI_PROJECT_DIR/tests/testconfig/test_release.cmake -VV -E "$CTEST_EXCLUDE_STRING" -R "$TEST_TAG" | tee ../buildtest_daily.log | grep -e "^MakeCommand" -e "^\[" -e "^\[" -e "Compiler " -e "\*\*\*Failed" -e "\.\.\.   Passed" -e " tests passed\,"'
    after_script:
        # Write Selection of the output into the terminal and therefore to GITLAB
        # Output 200 lines for any failing test
        - grep -B 200 '*Failed\|*Timeout' ../buildtest_daily.log || true
        - sed -n '/tests passed,/,//p' ../buildtest_daily.log
        # Specify which configuration was tested by this pipeline
        - "echo Baci build type: $CTEST_BUILD_TYPE_GITLAB"
        - "echo Run tests matching expression: $TEST_TAG [{.} all tests, {} no test]"
        - "echo Excluded tests: $CTEST_EXCLUDE_STRING [{} no test excluded]"
        # Move the log file to the source folder, so it can be found by artifacts.
        - mv ../buildtest_daily.log buildtest_daily.log
    artifacts:
        name: "$CI_JOB_NAME-$CI_JOB_ID"
        paths:
            - buildtest_daily.log
        when: on_failure
        expire_in: 1 day
    only:
        variables:
            - $GITLAB_SCHEDULER_TYPE == "1"

# This kind of job is started by a daily scheduler, with the variable
# $GITLAB_SCHEDULER_TYPE = "1"
# Debug tests are performed.
.buildtest_daily_debug: &buildtest_daily_debug
    stage: buildtest
    script:
        # Specify which configuration is tested by this pipeline
        - "echo Nightly Test Debug"
        - "echo Baci build type: $CTEST_BUILD_TYPE_GITLAB"
        - "echo Run tests matching expression: $TEST_TAG [{.} all tests, {} no test]"
        - "echo Excluded tests: $CTEST_EXCLUDE_STRING [{} no test excluded]"
        # Delete old build files.
        - rm -rf ../baci-build/
        # Clear eventual ccache cache.
        - 'if [ -x "$(command -v ccache)" ]; then ccache -C -z; echo "ccache cache cleared"; fi'
        # Output to log because it is too much for the gitlab console.
        - 'ctest -S $CI_PROJECT_DIR/tests/testconfig/test_debug.cmake -VV -E "$CTEST_EXCLUDE_STRING" | tee ../buildtest_daily_debug.log | grep -e "^MakeCommand" -e "^\[" -e "^\[" -e "Compiler " -e "\*\*\*Failed" -e "\.\.\.   Passed" -e " tests passed\,"'
    after_script:
        # Write Selection of the output into the terminal and therefore to GITLAB
        # Output 200 lines for any failing test
        - grep -B 200 '*Failed\|*Timeout' ../buildtest_daily_debug.log || true
        - sed -n '/tests passed,/,//p' ../buildtest_daily_debug.log
        # Specify which configuration was tested by this pipeline
        - "echo Baci build type: $CTEST_BUILD_TYPE_GITLAB"
        - "echo Run tests matching expression: $TEST_TAG [{.} all tests, {} no test]"
        - "echo Excluded tests: $CTEST_EXCLUDE_STRING [{} no test excluded]"
        # Move the log file to the source folder, so it can be found by artifacts.
        - mv ../buildtest_daily_debug.log buildtest_daily_debug.log
    artifacts:
        name: "$CI_JOB_NAME-$CI_JOB_ID"
        paths:
            - buildtest_daily_debug.log
        when: on_failure
        expire_in: 1 day
    only:
        variables:
            - $GITLAB_SCHEDULER_TYPE == "1"

# Doxygen job
.doxygen: &doxygen
    stage: doxygen
    script:
        - "echo Doxygen"
        # Delete old build files.
        - rm -rf ../baci-build/
        # Output to log because it is too much for the gitlab console.
        - "ctest -S $CI_PROJECT_DIR/tests/testconfig/test_doxygen.cmake -VV > ../doxygen.log"
        # Throw error if there are Latex errors in doxygen comments. Latex errors can be uniquely identified by a line starting with "! ".
        - if grep -qE '^! ' ../doxygen.log; then echo "Found at least one LaTeX error during doxygen build."; exit 1; else echo "Doxygen builds without LaTeX errors."; fi
        # Move final doxygen into the base folder for the next stage
        - "mv $CI_PROJECT_DIR/../baci-build/doc/html $CI_PROJECT_DIR/doxygen"
    after_script:
        # Write Selection of the output into the terminal and therefore to GITLAB
        - sed -n '/* Extra verbosity turned on/,/Test project /p' ../doxygen.log
        # Write information about possible Latex errors to terminal
        - if grep -qE '^! ' ../doxygen.log; then echo "Found at least one LaTeX error during doxygen build."; else echo "Doxygen builds without LaTeX errors."; fi
        # Move the log file to the source folder, so it can be found by artifacts.
        - mv ../doxygen.log doxygen.log

#-------------------------------------------------------------------------------
# Stages during testing.
#-------------------------------------------------------------------------------

stages:
    - checkcode
    - buildtest
    - doxygen
    - pages

#-------------------------------------------------------------------------------
# Actual jobs for testing.
#-------------------------------------------------------------------------------

# ALL---------------------------------------------------------------------------

checkcode:
    stage: checkcode
    script:
        - "echo code check"
        - cd ../baci
        - ./create-baci-python-venv
        - bash utilities/code_checks/check_format_and_header
    artifacts:
        name: "$CI_JOB_NAME-$CI_JOB_ID"
        paths:
            - wrong_clang_format.txt
            - wrong_headers.txt
        when: on_failure
        expire_in: 1 day
    only:
        - master
        - web
    except:
        variables:
            - $GITLAB_SCHEDULER_TYPE == "3"
            - $GITLAB_INTERACTIVE_MODE == "1"
    tags:
        - all

# IMCS--------------------------------------------------------------------------

imcs-buildtest_minimal_ubuntu20:
    <<: *buildtest_minimal
    variables:
        CTEST_MAKE: "make full -j3"
        CTEST_BUILD_NAME_GITLAB: "imcs-workstation-ubuntu20-minimal-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "imcs_workstation_ubuntu20-04.config"
    tags:
        - imcs-minimal-ubuntu20
    needs: ["checkcode"]

imcs-buildtest_full_ubuntu20:
    <<: *buildtest_full
    variables:
        CTEST_MAKE: "make full -j3"
        CTEST_BUILD_NAME_GITLAB: "imcs-workstation-ubuntu20-full-$TEST_TAG-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "imcs_workstation_ubuntu20-04.config"
    tags:
        - imcs-full-ubuntu20
    needs: ["checkcode"]

imcs-buildtest_interactive_ubuntu20:
    <<: *buildtest_interactive
    variables:
        TEST_TAG: ""
        CTEST_MAKE: "make full -j3"
        CTEST_BUILD_NAME_GITLAB: "imcs-workstation-ubuntu20-interactive-$TEST_TAG-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "imcs_workstation_ubuntu20-04.config"
        GIT_STRATEGY: fetch
    tags:
        - imcs-interactive-ubuntu20
    rules:
        - if: '$GITLAB_INTERACTIVE_MODE == "1" && $GITLAB_INTERACTIVE_MACHINE == "imcs_ubuntu20"'
          when: always

imcs-buildtest_daily_ubuntu20:
    <<: *buildtest_daily
    variables:
        CTEST_MAKE: "make full -j3"
        CTEST_BUILD_NAME_GITLAB: "imcs-workstation-ubuntu20-nightly-full-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "imcs_workstation_ubuntu20-04.config"
    tags:
        - imcs-nightly-full-ubuntu20
    needs: ["checkcode"]
    
imcs-buildtest_daily_debug_ubuntu20:
    <<: *buildtest_daily_debug
    variables:
        CTEST_MAKE: "make full -j3"
        CTEST_BUILD_NAME_GITLAB: "imcs-workstation-ubuntu20-baci-DEBUG-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "imcs_workstation_ubuntu20-04.config"
    tags:
        - imcs-nightly-debug-ubuntu20
    needs: ["checkcode"]


# LNM---------------------------------------------------------------------------

lnm-codeclimate:
    stage: checkcode
    script:
        - "echo Check code for possible improvements"
        # Delete old build files.
        - rm -rf ../baci-build/
        # Clear eventual ccache cache.
        - 'if [ -x "$(command -v ccache)" ]; then ccache -C -z; echo "ccache cache cleared"; fi'
        - mkdir ../baci-build/
        - cd ../baci-build/
        # configure to get a compilation database
        - ${CI_PROJECT_DIR}/do-configure --config=${CI_PROJECT_DIR}/buildconfig/${CTEST_BUILD_CONFIG_GITLAB}
        # create  and activate virtual environment
        - python3 -m venv venv
        - . venv/bin/activate
        - pip install -r ${CI_PROJECT_DIR}/utilities/code_climate/requirements.txt
        # run clang tidy and export report
        - python ${CI_PROJECT_DIR}/utilities/code_climate/run_clang_tidy.py -j 6 -p . -extra-arg="-I/usr/include/openmpi-x86_64/" -src ${CI_PROJECT_DIR} -export ${CI_PROJECT_DIR}/codeclimate.json -header-filter ".*\/baci\/src\/.*" ".*\/baci\/src\/.*"
        - cd ${CI_PROJECT_DIR}
    variables:
        CTEST_BUILD_CONFIG_GITLAB: "lnm_workstation.config"
    artifacts:
        paths: [codeclimate.json]
        reports:
            codequality: codeclimate.json
    only:
        - master
        - web
    except:
        variables:
            - $GITLAB_INTERACTIVE_MODE == "1"
    allow_failure: true
    tags:
        - lnm-clangtidy-codeclimate

lnm-buildtest_minimal:
    <<: *buildtest_minimal
    variables:
        CTEST_MAKE: "make full -j3"
        CTEST_BUILD_NAME_GITLAB: "LnM-Workstation-minimal-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "lnm_workstation.config"
        CTEST_DROP_SITE_CDASH_GITLAB: "1"
    tags:
        - lnm-release-mastermod-minimal
    needs: ["checkcode"]

lnm-buildtest_full:
    <<: *buildtest_full
    variables:
        CTEST_MAKE: "make full -j3"
        CTEST_BUILD_NAME_GITLAB: "LnM-Workstation-$TEST_TAG-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "lnm_workstation.config"
    tags:
        - lnm-release-user-full
    needs: ["checkcode"]

lnm-workstation-buildtest_interactive:
    <<: *buildtest_interactive
    variables:
        TEST_TAG: ""
        CTEST_MAKE: "make full -j3"
        CTEST_BUILD_NAME_GITLAB: "LnM-Workstation-interactive-$TEST_TAG-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "lnm_workstation.config"
        GIT_STRATEGY: fetch
    tags:
        - lnm-workstation-interactive
    rules:
        - if: '$GITLAB_INTERACTIVE_MODE == "1" && $GITLAB_INTERACTIVE_MACHINE == "lnm_workstation"'
          when: always

lnm-buildtest_coverage_weekly:
    <<: *buildtest_coverage_weekly
    variables:
        # increase the global test timeout
        GLOBAL_TEST_TIMEOUT_SCALE: "22"
        # increase the unit test timeout
        UNITTEST_TIMEOUT: "50"
        # enable coverage option of ctest
        CTEST_CONFIGURE_POSTFIX: "--coverage"
        CTEST_MAKE: "make full -j4"
        CTEST_BUILD_NAME_GITLAB: "LnM-Workstation-coverage-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "lnm_workstation.config"
    tags:
        - lnm-release-weekly-coverage
    needs: []

pages: # job name needs to be pages
    stage: pages
    variables:
        # stage operates exclusively on artifacts. No need for source code.
        GIT_STRATEGY: fetch
    # Download Doxygen from previous lnm-doxygen stage
    dependencies:
        - lnm-doxygen
    script:
        # print the weekly measured coverage rate
        - "echo 'Weekly measured'"
        - grep "Overall coverage rate:" -A 2 genhtml_weekly_coverage.log
        # Create directory that will be published
        - mkdir -p public
        # move weekly created coverage report to public folder (which is the path for GitLab Pages content)
        - mv coverage_report public/coverage_report
        # Move most recent doxygen to public folder
        - mv doxygen public/doxygen
        # Create python venv to create badges
        - python3 -m venv venv
        - . venv/bin/activate
        - pip install anybadge
        # Create doxygen badge
        - anybadge -l doxygen -v ok --color=green -f public/doxygen.svg
        # Create website badge
        - anybadge -l website -v ok --color=green -f public/website.svg
    cache:
        key: cache-weekly-coverage-report
        paths:
            - coverage_report/
            - genhtml_weekly_coverage.log
        policy: pull
    artifacts:
        # store the public path in artifact
        # this is needed since in a subsequent deploy stage (automatically generated by GitLab)
        # the content of the below artifact is published on GitLab Pages
        paths:
            - public
        expire_in: 1 day
    only:
        refs:
            - master
    tags:
        - lnm-release-weekly-coverage

lnm-buildtest_daily:
    <<: *buildtest_daily
    variables:
        CTEST_MAKE: "make full -j3"
        CTEST_BUILD_NAME_GITLAB: "LnM-Workstation-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "lnm_workstation.config"
        CTEST_DROP_SITE_CDASH_GITLAB: "1"
    tags:
        - lnm-release-nightly-full
    needs: ["checkcode"]

lnm-buildtest_daily_bruteforce_icc:
    <<: *buildtest_daily
    variables:
        TEST_TAG: ""
        CTEST_FAIL_ON_WARNING: "0"
        CTEST_MAKE: "make full -j3"
        CTEST_BUILD_NAME_GITLAB: "CentOS-baci-Q1-2015-BruteForce-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "bruteforce_Q12015_icc.config"
        CTEST_DROP_SITE_CDASH_GITLAB: "1"
    tags:
        - lnm-release-nightly-build-bruteforce
    only:
        variables:
            - $GITLAB_SCHEDULER_LNM_BRUTEFORCE == "1"
    needs: ["checkcode"]

lnm-buildtest_daily_bruteforce_gcc:
    <<: *buildtest_daily
    variables:
        TEST_TAG: ""
        CTEST_FAIL_ON_WARNING: "0"
        CTEST_MAKE: "make full -j3"
        CTEST_BUILD_NAME_GITLAB: "CentOS-baci-BruteForce-GCC-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "lnm_bruteforce_gcc.config"
        CTEST_DROP_SITE_CDASH_GITLAB: "1"
    before_script:
        - module load comp/gcc/5.3.0
    tags:
        - lnm-release-nightly-build-bruteforce
    only:
        variables:
            - $GITLAB_SCHEDULER_LNM_BRUTEFORCE == "1"
    needs: ["checkcode"]

lnm-buildtest-bruteforce-icc_interactive:
    <<: *buildtest_interactive
    variables:
        TEST_TAG: ""
        CTEST_FAIL_ON_WARNING: "0"
        CTEST_MAKE: "make full -j3"
        CTEST_BUILD_NAME_GITLAB: "CentOS-interactive-baci-Q1-2015-BruteForce-icc-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "bruteforce_Q12015_icc.config"
        CTEST_DROP_SITE_CDASH_GITLAB: "1"
        GIT_STRATEGY: fetch
    tags:
        - lnm-bruteforce-icc-interactive
    rules:
        - if: '$GITLAB_INTERACTIVE_MODE == "1" && $GITLAB_INTERACTIVE_MACHINE == "lnm_bruteforce_icc"'
          when: always

lnm-buildtest-bruteforce-gcc_interactive:
    <<: *buildtest_interactive
    variables:
        TEST_TAG: ""
        CTEST_FAIL_ON_WARNING: "0"
        CTEST_MAKE: "make full -j3"
        CTEST_BUILD_NAME_GITLAB: "CentOS-interactive-baci-BruteForce-gcc-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "lnm_bruteforce_gcc.config"
        CTEST_DROP_SITE_CDASH_GITLAB: "1"
        GIT_STRATEGY: fetch
    before_script:
        - module load comp/gcc/5.3.0
    tags:
        - lnm-bruteforce-gcc-interactive
    rules:
        - if: '$GITLAB_INTERACTIVE_MODE == "1" && $GITLAB_INTERACTIVE_MACHINE == "lnm_bruteforce_gcc"'
          when: always

lnm-buildtest_daily_deep:
    <<: *buildtest_daily
    variables:
        TEST_TAG: ""
        CTEST_FAIL_ON_WARNING: "0"
        CTEST_MAKE: "make full -j3"
        CTEST_BUILD_NAME_GITLAB: "CentOS-baci-Deep-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "lnm_deep.config"
        CTEST_DROP_SITE_CDASH_GITLAB: "1"
    tags:
        - lnm-release-nightly-build-deep
    only:
        variables:
            - $GITLAB_SCHEDULER_LNM_DEEP == "1"
    needs: ["checkcode"]

lnm-buildtest-deep_interactive:
    <<: *buildtest_interactive
    variables:
        TEST_TAG: ""
        CTEST_FAIL_ON_WARNING: "0"
        CTEST_MAKE: "make full -j3"
        CTEST_BUILD_NAME_GITLAB: "CentOS-interactive-baci-Deep-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "lnm_deep.config"
        CTEST_DROP_SITE_CDASH_GITLAB: "1"
        GIT_STRATEGY: fetch
    tags:
        - lnm-deep-interactive
    rules:
        - if: '$GITLAB_INTERACTIVE_MODE == "1" && $GITLAB_INTERACTIVE_MACHINE == "lnm_deep"'
          when: always

lnm-buildtest_daily_schmarrn:
    <<: *buildtest_daily
    variables:
        TEST_TAG: ""
        CTEST_FAIL_ON_WARNING: "0"
        CTEST_MAKE: "make -j3"
        CTEST_BUILD_NAME_GITLAB: "CentOS-baci-Q1-2015-Kaiser-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "schmarrn_Q12015_gcc48_ACML_ompi162.config"
        CTEST_DROP_SITE_CDASH_GITLAB: "1"
    tags:
        - lnm-release-nightly-build-schmarrn
    only:
        variables:
            - $GITLAB_SCHEDULER_LNM_SCHMARRN == "1"
    needs: ["checkcode"]

lnm-buildtest-schmarrn_interactive:
    <<: *buildtest_interactive
    variables:
        TEST_TAG: ""
        CTEST_FAIL_ON_WARNING: "0"
        CTEST_MAKE: "make -j3"
        CTEST_BUILD_NAME_GITLAB: "CentOS-interactive-baci-Q1-2015-Kaiser-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "schmarrn_Q12015_gcc48_ACML_ompi162.config"
        CTEST_DROP_SITE_CDASH_GITLAB: "1"
        GIT_STRATEGY: fetch
    tags:
        - lnm-schmarrn-interactive
    rules:
        - if: '$GITLAB_INTERACTIVE_MODE == "1" && $GITLAB_INTERACTIVE_MACHINE == "lnm_schmarrn"'
          when: always

lnm-buildtest_daily_debug:
    <<: *buildtest_daily_debug
    variables:
        CTEST_MAKE: "make full -j3"
        CTEST_BUILD_NAME_GITLAB: "LnM-Workstation DEBUG-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "lnm_workstation.config"
        CTEST_DROP_SITE_CDASH_GITLAB: "1"
    tags:
        - lnm-debug-nightly-full
    needs: ["checkcode"]

lnm-doxygen-web:
    <<: *doxygen
    variables:
        CTEST_MAKE: "make documentation"
        CTEST_BUILD_NAME_GITLAB: "Doxygen-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "lnm_workstation.config"
    tags:
        - lnm-release-user-full
    artifacts:
        name: "$CI_JOB_NAME-$CI_JOB_ID"
        paths:
            - doxygen.log
        when: on_failure
        expire_in: 1 day
    only:
        refs:
            - web
    except:
        variables:
            - $GITLAB_SCHEDULER_TYPE == "3"
            - $GITLAB_INTERACTIVE_MODE == "1"

lnm-doxygen:
    <<: *doxygen
    variables:
        CTEST_MAKE: "make documentation"
        CTEST_BUILD_NAME_GITLAB: "Doxygen-GITLAB"
        CTEST_BUILD_CONFIG_GITLAB: "lnm_workstation.config"
        CTEST_DROP_SITE_CDASH_GITLAB: "1"
        # Path on testing machine where doxygen will be copied to.
        DOXYGEN_PATH: "/home/gitlab-runner/."
    tags:
        - lnm-nightly-doxygen
    artifacts:
        name: "$CI_JOB_NAME-$CI_JOB_ID"
        paths:
            - doxygen.log
            - doxygen/
        when: always
        expire_in: 1 day
    only:
        # Build doxygen only on master builds
        refs:
            - master
