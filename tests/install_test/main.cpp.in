// This file is part of 4C multiphysics licensed under the
// GNU Lesser General Public License v3.0 or later.
//
// See the LICENSE.md file in the top-level for license information.
//
// SPDX-License-Identifier: LGPL-3.0-or-later

#include "4C_config.hpp"

#include "4C_fem_discretization.hpp"
#include "4C_fem_general_element.hpp"
#include "4C_fem_general_node.hpp"
#include "4C_solid_3D_ele.hpp"

int main(int argc, char** argv)
{
  MPI_Init(&argc, &argv);

  // create the MPI communicator
  auto comm = MPI_COMM_WORLD;
  int rank = FourC::Core::Communication::my_mpi_rank(comm);

  // create several discretization
  const int dim = 3;
  auto dis1 = std::make_shared<FourC::Core::FE::Discretization>("dis 1", comm, dim);
  auto dis2 = std::make_shared<FourC::Core::FE::Discretization>("dis 2", comm, dim);
  auto dis3 = std::make_shared<FourC::Core::FE::Discretization>("dis 3", comm, dim);

  // add some nodes to discretization 1
  dis1->add_node(std::array<double, 3>{0.0, 0.0, 0.0}, 1, nullptr);
  dis1->add_node(std::array<double, 3>{1.0, 0.0, 0.0}, 2, nullptr);
  dis1->add_node(std::array<double, 3>{1.0, 1.0, 0.0}, 3, nullptr);
  dis1->add_node(std::array<double, 3>{0.0, 1.0, 0.0}, 4, nullptr);
  dis1->add_node(std::array<double, 3>{0.0, 0.0, 1.0}, 5, nullptr);
  dis1->add_node(std::array<double, 3>{1.0, 0.0, 1.0}, 6, nullptr);
  dis1->add_node(std::array<double, 3>{1.0, 1.0, 1.0}, 7, nullptr);
  dis1->add_node(std::array<double, 3>{0.0, 1.0, 1.0}, 8, nullptr);

  // add a solid element to discretization 1
  auto element1 = std::make_shared<FourC::Discret::Elements::Solid>(1, rank);
  std::vector<int> nodes = {1, 2, 3, 4, 5, 6, 7, 8};
  element1->set_node_ids(nodes.size(), nodes.data());
  dis1->add_element(element1);

  MPI_Finalize();
  std::cout << "Test passed" << std::endl;

  return 0;
}
