CMAKE_COMMAND=cmake

# set compilers
MPIDIR=/cluster/mpi/intel/openmpi/1.10.1/
MPIRUN=$MPIDIR/bin/mpirun

# optimization flags (used for C and C++ code)
CFLAGS="-Wall -xcore-avx2"
CXXFLAGS="-std=c++11 -xcore-avx2 -wd3682"
CXXFLAGSRELEASE="-O3"

# optimization flags for Fortran
FFLAGS="-Wall"
FFLAGSRELEASE="-O5 -funroll-all-loops -malign-double"

# linker flags, use gold linker because it is much faster...
LINKERFLAGS="-lhdf5_hl -fuse-ld=gold"
LINKERFLAGSRELEASE="-O3"

# library path (3d party libraries for BACI)
INCLUDE_INSTALL_DIR="/lnm/include"
LIB_INSTALL_DIR="/lnm/lib"

# path to Trilinos
Trilinos_PREFIX="/lnm/Q1_2015/trilinos_icc"

# Trilinos package configuration
USE_TRILINOS_Q1_2015=ON

if [ $USE_ACML == 1 ]; then
  echo "!!!!!!!!!!!!!!!!!!!!  WARNING  !!!!!!!!!!!!!!!!!!!!!!!!"
  echo "!! WARNING: ACML not supported on bruteforce cluster !!"
  echo "!! Switching to MKL instead.                         !!"
  echo "!!!!!!!!!!!!!!!!!!!!  WARNING  !!!!!!!!!!!!!!!!!!!!!!!!"
  echo
fi
# libM replacement
AMDLIBMDIR_PATH=""

# AMD core math library BLAS/LAPACK replacement
ACMLDIR_PATH=""
BLAS_LIBS="/cluster/intel/compilers_and_libraries_2016.1.150/linux/mkl/lib/intel64_lin/libmkl_intel_lp64.so;/cluster/intel/compilers_and_libraries_2016.1.150/linux/mkl/lib/intel64_lin/libmkl_sequential.so;/cluster/intel/compilers_and_libraries_2016.1.150/linux/mkl/lib/intel64_lin/libmkl_core.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so"
LAPACK_LIBS="/cluster/intel/compilers_and_libraries_2016.1.150/linux/mkl/lib/intel64_lin/libmkl_intel_lp64.so;/cluster/intel/compilers_and_libraries_2016.1.150/linux/mkl/lib/intel64_lin/libmkl_sequential.so;/cluster/intel/compilers_and_libraries_2016.1.150/linux/mkl/lib/intel64_lin/libmkl_core.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so"
BLA_VENDORSTRING="MKL_2016.1.150"
echo "!!!!!!!!!!!!!!!!!!!!!!  INFO  !!!!!!!!!!!!!!!!!!!!!!!!!"
echo "!! Using high performance BLAS routines based on     !!"
echo "!! Intel MKL.                                        !!"
echo "!!!!!!!!!!!!!!!!!!!!!!  INFO !!!!!!!!!!!!!!!!!!!!!!!!!!"

# boost library
BOOST_INCLUDEDIR=$INCLUDE_INSTALL_DIR
BOOST_LIBRARYDIR=$LIB_INSTALL_DIR
USE_USERSPECIFIED_BOOST=OFF # bypass cmake FindBoost script (default: OFF)
BOOST_EXCLUDE_SYSTEM_PATHS="OFF"

# qhull library
QHULL_LIBRARYDIR=$LIB_INSTALL_DIR
QHULL_INCLUDEDIR=$INCLUDE_INSTALL_DIR/qhull
