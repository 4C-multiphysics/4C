name: Check if docker build is required
description: Check if the docker image needs to be built
inputs:
  registry:
    description: Name of the docker container registry
    required: true
  username:
    description: Username to log in to the Docker registry
    required: true
  password:
    description: Password to log in to the Docker registry
    required: true
  image-name:
    description: Name of the image
    required: true
  compute-dependencies-hash-script:
    description: Path to the script that computes the dependencies hash
    required: false
    default: './docker/dependencies/compute_dependencies_hash.sh'
outputs:
  build_docker_image:
    description: Whether the docker image needs to be built
    value: ${{ steps.check-if-build-is-required.outputs.build }}
  dependencies_hash:
    description: Hash of the dependencies
    value: ${{ steps.compute-dependencies-hash.outputs.computed_dependencies_hash }}
runs:
  using: composite
  steps:
    - id: compute-dependencies-hash
      uses: ./.github/actions/compute-and-check-dependencies-hash
      with:
        skip-check: 'true'
        compute-dependencies-hash-script: ${{ inputs.compute-dependencies-hash-script }}
    - name: Log in to the Container registry
      uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}
    - id: check-if-build-is-required
      shell: bash
      name: Check if the docker image needs to be built
      run: |
        exit_code=0
        docker manifest inspect ${{ inputs.image-name }}:${{ steps.compute-dependencies-hash.outputs.computed_dependencies_hash }} > /dev/null || exit_code=$?
        echo $exit_code
        case $exit_code in
          0)
            echo "Image exists"
            echo "build=false" >> $GITHUB_OUTPUT
            ;;
          1)
            echo "Image does not exist"
            echo "build=true" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "Something went wrong. Exit code $exit_code"
            exit 1
            ;;
        esac
