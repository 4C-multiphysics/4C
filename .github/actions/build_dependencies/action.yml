name: Build 4C dependencies
description: Build Ubuntu image with all 4C dependencies
inputs:
  docker-file:
    description: Path to the Dockerfile
    required: true
  registry:
    description: Docker registry to push the image to
    required: true
  username:
    description: Username to log in to the Docker registry
    required: true
  password:
    description: Password to log in to the Docker registry
    required: true
  image-name:
    description: Name of the image to build
    required: true
  dependencies-hash:
    description: Hash of the dependencies
    required: true
  base-image:
    description: Which image is the build based on
    required: true
runs:
  using: composite
  steps:
    - name: Log in to the Container registry
      uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}
    # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
      with:
        images: ${{ inputs.image-name }}
        labels: |
          org.opencontainers.image.description=Image containing all the dependencies required for building and testing 4C
    # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
    # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
    # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: .
        file: ${{ inputs.docker-file }}
        build-args: |
          DEPENDENCIES_HASH=${{ inputs.dependencies-hash }}
          BASE_IMAGE=${{ inputs.base-image }}
        push: true
        tags: ${{ inputs.image-name }}:${{ inputs.dependencies-hash }}
        # tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
