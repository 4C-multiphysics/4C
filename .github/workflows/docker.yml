name: Docker

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_SUFFIX: dependencies
  FOUR_C_DOCKER_DEPENDENCIES_HASH: 40d8b295
  IMAGE_PATH: ghcr.io/4c-multiphysics/4c-dependencies

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-if-docker-build-is-required:
    runs-on: ubuntu-latest
    outputs:
      dependencies_hash: ${{ steps.compute-dependencies-hash.outputs.dependencies_hash }}
      build_docker_image: ${{ steps.check-if-build-is-required.outputs.build }}
    steps:
      - uses: actions/checkout@v4
      - id: compute-dependencies-hash
        uses: ./.github/actions/compute-and-check-dependencies-hash
        with:
          docker_image_hash: $FOUR_C_DOCKER_DEPENDENCIES_HASH
      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: check-if-build-is-required
        name: Check if the docker image needs to be built
        run: |
          exit_code=0
          docker manifest inspect ${{ env.IMAGE_PATH }}:$COMPUTED_DOCKER_DEPENDENCIES_HASH > /dev/null || exit_code=$?
          echo $exit_code
          case $exit_code in
            0)
              echo "Image exists"
              echo "build=false" >> $GITHUB_OUTPUT
              ;;
            1)
              echo "Image does not exist"
              echo "build=true" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Something went wrong. Exit code $exit_code"
              exit 1
              ;;
          esac

  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      #
    needs: check-if-docker-build-is-required
    if: ${{ needs.check-if-docker-build-is-required.outputs.build_docker_image == 'true' }}
    steps:
      # Hack to get the repository name as lower case as Github does not provide this function: https://github.com/orgs/community/discussions/25768
      - id: repository-to-lower-case
        run: |
          echo "repository=${GITHUB_REPOSITORY@L}" >> $GITHUB_OUTPUT
      - run: echo ${{ steps.repository-to-lower-case.outputs.repository }}
      - run: |
          echo ${{ needs.check-if-docker-build-is-required.outputs.build_docker_image }}
          echo ${{ needs.check-if-docker-build-is-required.outputs.dependencies_hash }}
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ steps.repository-to-lower-case.outputs.repository }}-${{ env.IMAGE_SUFFIX
            }}:${{ env.FOUR_C_DOCKER_DEPENDENCIES_HASH }}
          # tags: ${{ steps.meta.outputs.tags }}
          # labels: ${{ steps.meta.outputs.labels }}

    # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
    # - name: Generate artifact attestation
    #   uses: actions/attest-build-provenance@v1
    #   with:
    #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
    #     subject-digest: ${{ steps.push.outputs.digest }}
    #     push-to-registry: true

