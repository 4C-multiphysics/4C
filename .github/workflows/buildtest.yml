name: buildtest

on:
  pull_request:
    branches:
      - 'main'
  push:
    branches:
      - 'main'

env:
  FOUR_C_DOCKER_DEPENDENCIES_HASH: 40d8b295

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  gcc9_build:
    env:
      CMAKE_PRESET: docker
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/4c-multiphysics/4c-dependencies:40d8b295
      options: --user root --env OMPI_ALLOW_RUN_AS_ROOT=1 --env OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    defaults:
      run:
        shell: bash
    steps:
      - run: echo ${{ github.repository }}
      # Due to a bug in runner action the variables $GITHUB_WORKSPACE and ${{ github.workspace }} are different inside a container. https://github.com/actions/runner/issues/2058
      # The repo gets cloned to `/__w/4C/4C` ($GITHUB_WORKSPACE) while ${{ github.workspace }} points to `/home/runner/work/4C/4C`.`
      # Use $GITHUB_WORKSPACE instead of ${{ github.workspace }}
      - uses: actions/checkout@v4
      - name: Check docker hash
        uses: ./.github/actions/compute-and-check-dependencies-hash
        with:
          docker_image_hash: $FOUR_C_DOCKER_DEPENDENCIES_HASH
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-${{ env.CMAKE_PRESET }}
      - name: info
        run: |
          pwd; ls -l
      - uses: ./.github/actions/configure_4C
        with:
          cmake-preset: ${{ env.CMAKE_PRESET }}
          build-directory: ${{ github.workspace }}/build
          additional-cmake-flags: -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      - uses: ./.github/actions/build_4C
        with:
          build-targets: full
          build-directory: ${{ github.workspace }}/build
      - name: Package build directory
        run: tar -cvf $GITHUB_WORKSPACE/4C_build.tar $GITHUB_WORKSPACE/build
      - name: Upload build folder
        uses: actions/upload-artifact@v4
        with:
          name: 4C-build
          path: |
            ${{ github.workspace }}/4C_build.tar
          retention-days: 1

  gcc9_test:
    needs: gcc9_build
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/4c-multiphysics/4c-dependencies:40d8b295
      options: --user root --env OMPI_ALLOW_RUN_AS_ROOT=1 --env OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    strategy:
      fail-fast: false
      matrix:
        test-chunk: ["1,315", "316,443", "444,699", "700,804", "805,965", "966,1112", "1113,1502", "1503,1652",
          "1653,2128", "2129,2429", "2430,2580", "2581,2696", "2697,2719", "2720,2737", "2738,"]
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: Check docker hash
        uses: ./.github/actions/compute-and-check-dependencies-hash
        with:
          docker_image_hash: $FOUR_C_DOCKER_DEPENDENCIES_HASH
      - name: Setup developer environment for testing
        run: |
          cd $GITHUB_WORKSPACE
          git config --global --add safe.directory $GITHUB_WORKSPACE
          ./utilities/set_up_dev_env.sh
      - uses: actions/download-artifact@v4
        with:
          name: 4C-build
          path: ${{ github.workspace }}
      - name: Extract 4C build
        run: |
          tar -xvf $GITHUB_WORKSPACE/4C_build.tar -C /
      - name: Test
        run: |
          cd $GITHUB_WORKSPACE/build
          time ctest -I $TEST_CHUNK -j `nproc` --output-on-failure --output-junit $GITHUB_WORKSPACE/junit_test_summary.xml
        env:
          TEST_CHUNK: ${{ matrix.test-chunk }}
      - name: Upload test summary
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-summary-${{ matrix.test-chunk }}
          path: |
            junit_test_summary-${{ matrix.test-chunk }}.xml
          retention-days: 1

  ensure_all_tests_pass:
    needs: [gcc9_test, gcc9_build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check for successful builds and tests
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

