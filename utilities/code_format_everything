#!/bin/bash

############################################################
#
# This script formats C++ source files, cmake files, python source files, yaml, and xml
# files. By default, only changed files (compared to HEAD) are formatted.
#
# code_format_everything [--full]
#
############################################################

FULL_FORMAT=0

OPTIONS=`getopt -o hf -l help,full -- "$@"`

[ $? -ne 0 ] && exit 1

USAGEINFO="usage: code_format_everything [--full]"


eval set -- $OPTIONS

while true; do
  case "$1" in
    -h|--help)
      echo $USAGEINFO
      exit 1
      ;;
    -f|--full)
      FULL_FORMAT=1
      ;;
    --) shift ;
      break
      ;;
    *) echo "unknown option: '$1'" ; exit 1 ;;
  esac
  shift
done

if [ $# -ne 0 ]; then
  echo "unknown option(s): $@"
  echo $USAGEINFO
  exit 1
fi

# Load the python virtual environment, which provides clang-format.
PYTHON_VENV="`dirname "$0"`/python-venv"
source "${PYTHON_VENV}"/bin/activate

# set the field separator to new line
IFS=$'\n'

if [[ $FULL_FORMAT -eq 1 ]]
then
  FILES_TO_CHECK=$(git ls-files)
  echo "Run clang-format on all source files in the repository."
else
  FILES_TO_CHECK=$(git diff --name-only --diff-filter=d HEAD)
  echo "Run formatter on all changed source files in the repository."
fi

for line in $FILES_TO_CHECK
do

# check if the file is a c or cpp file
if [[ $line == *.cpp || $line == *.cc || $line == *.cp || $line == *.cxx || $line == *.H || $line == *.h || $line == *.hpp || $line == *.hh || $line == *.hxx ]]
then
    # Format file using clang-format
    clang-format -i -style=file $(pwd)/${line}
fi

# check if the file is a cmake file
if [[ $line == *.cmake || $line == *CMakeLists.txt ]]
then
    # format file using cmake-format
    cmake-format -c $(pwd)/utilities/code_checks/.cmake-format.yaml -i $(pwd)/${line}
fi

# check if the file is a python file
if [[ $line == *.py ]]
then
    # format file using black
    black --quiet $(pwd)/${line}
fi

# check if the file is an xml file
if [[ $line == *.xml ]]
then
    # format file using xmlformat
    $(pwd)/utilities/format_xml $(pwd)/${line}
fi

# check if the file is a yaml file
if [[ $line == *.yaml || $line == *.yml ]]
then
    # format file using yamlfmt
    $(pwd)/utilities/format_yaml $(pwd)/${line}
fi

done
echo "Done."

