#!/bin/bash

#####################################################
########## DESCRIPTION ##############################
#####################################################

# This pre - commit hook will be executed by Git before every new commit
# In the version at hand, the clang-format style changes will be enforced automatically after the commit by this hook
# Hence, clang-format will not lead to a rejection of any commit but will be executed automatically
# Nevertheless, the user will get a shell output of the clang-format changes

# In a second phase a set of python scripts checks the commited files for compliance with the BACI header requirements
# If a header is missing or does not follow the BACI standards, the python scripts will generate according error messages in the shell output
# The commit will be rejected if errors appear. The user has to change the headers manually until all requirements are fulfilled

# The commit will be rejected if this hook script returns the value 1 and will be accepted if it returns 0
# Commit rejection can only be triggered by non-compliant headers


# Author: Jonas Nitzler
#         Maximilian Grill
# Date:   31.08.2018
# Version: 1.1

########### Execute clang-format with style file settings (taken from https://github.com/sheredom/git-hooks)##################################################

if [ -f utilities/code_styles/clang-format ]
then
  # set the field separator to new line
  IFS=$'\n'

  for line in $(git diff --cached --name-only --diff-filter=ACMR)
  do
    # if the file is a c or cpp file
    if [[ $line == *.cpp || $line == *.cc || $line == *.cp || $line == *.cxx || $line == *.H || $line == *.h || $line == *.hpp || $line == *.hh || $line == *.hxx ]]
    then
      # format the file
      clang-format -i -style=file $(pwd)/${line}

 ####### Inform user about clang changes ##########
      echo "####################################################################"
      echo "In the following the changes by clang are presented...              "
      echo "####################################################################"

      git diff --diff-filter=ACMR $(pwd)/${line}

      # and then add the file (so that any formatting changes get committed)
      git add $(pwd)/${line}
      echo "################ END OF CLANG CHANGES ##############################"

    fi
  done
else
  echo "ERROR: clang-format was not found, cannot format files!"
  exit 1
fi
### Header check ################################################
python ./utilities/git_hooks/header-check.py || exit 1
exit 0



############### OLD VERSION--> WILL BE DELETED SOON ##############################

#gitvar=$(git diff --cached --name-only --diff-filter=ACMRT -- src/ Unittests/ tests/ |
#          grep -E ".cpp$|.h$|.cp$|.H$|.cc$|.hpp$|.hh$|.hxx$|.cxx")
#
## 1) give out all files that differ from the last commit under the constraint of being A : Added,  C : Copied, M : Modified, R : Renamed, T : Changed
#
#if [[ $? != 0 ]]; then
#       echo "#######################################################"
#       echo "Commit matched clang format style, no changes by clang!"
#       echo "#######################################################"
#
#else
#       echo "#################################################################"
#       echo "Commit did not match clang-format and was automatically formated:"
#       echo "#################################################################"
#
## 2) run clang - format with our modified Google style on those files
#utilities/code_styles/clang-format -i -style=file $gitvar
#
## 3) Give the user a short feedback if he was compliant or not and show the differences again
#git diff --cached --diff-filter=ACMRT -- src/ Unittests/ tests/
#
#fi


########### Execute header checks ###############################################################################################################################
#echo "################################################"
#echo "Checking now for headers ......................."
#echo "################################################"
#utilities/git_hooks/header-check.py || exit 1

# 4) The python script runs internally only on the diffs by design --> no need for git diff...
# 5) Header design cannot be automated! Hence: if not compliant reject the current commit and give out error messages, accordingly (done by python script)

#echo "################################################################"
#echo "All headers were compliant with the code style! Commit accepted!"
#echo "################################################################"

#exit 0

