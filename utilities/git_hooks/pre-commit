#!/bin/bash

#####################################################
########## DESCRIPTION ##############################
#####################################################

# This pre - commit hook will be executed by Git before every new commit
# In the version at hand, the clang-format style changes will be enforced automatically after the commit by this hook
# Hence, clang-format will not lead to a rejection of any commit but will be executed automatically
# Nevertheless, the user will get a shell output of the clang-format changes

# In a second phase a set of python scripts checks the commited files for compliance with the BACI header requirements
# If a header is missing or does not follow the BACI standards, the python scripts will generate according error messages in the shell output
# The commit will be rejected if errors appear. The user has to change the headers manually until all requirements are fulfilled

# The commit will be rejected if this hook script returns the value 1 and will be accepted if it returns 0
# Commit rejection can only be triggered by non-compliant headers


# Author:    Jonas Nitzler
#            Maximilian Grill
# Date:      03.09.2018
# Version:   1.3

########### Execute clang-format with style file settings (taken from https://github.com/sheredom/git-hooks)##################################################
if [ -f ./utilities/code_styles/clang-format ]
then
  # set the field separator to new line
  IFS=$'\n'

  for line in $(git diff --cached --name-only --diff-filter=ACMR)
  do
    # check if the file is a c or cpp file
    if [[ $line == *.cpp || $line == *.cc || $line == *.cp || $line == *.cxx || $line == *.H || $line == *.h || $line == *.hpp || $line == *.hh || $line == *.hxx ]]
    then
      # Check if clang would format the file
      if [[  $(diff -u <(./utilities/code_styles/clang-format -style=file $(pwd)/${line}) <(cat $(pwd)/${line})) ]]
      then
        uncompliant_files+="$(pwd)/${line}\n"
      fi
    fi
  done

  if [ ! -z "$uncompliant_files" ]
  then
    printf "\n"
    printf "The following files are not clang compliant:\n"
    printf "\n"
    echo "########################################################################"
    printf "$uncompliant_files"
    echo "########################################################################"
    printf "\n"
    echo "--> Please run clang-format manually for those files using:"
    echo "./utilities/code_styles/clang-format -i -style=file <path/to/file>"
    echo "(Path above is given from <Source> directory)"
    echo "--> Please add all formated files afterwards to the git staging area using: git add <path/to/file>"
    printf "\n"
    exit 1
  fi

else
  echo "ERROR: clang-format was not found, cannot format files!"
  exit 1
fi

### Header check ################################################
python ./utilities/git_hooks/header-check.py || exit 1
exit 0


