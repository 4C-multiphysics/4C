#!/bin/sh

# PRE - COMMIT - HOOK FOR GIT

#####################################################
########## DESCRIPTION ##############################
#####################################################

# This pre - commit hook will be executed by GIT before every new commit
# In the version at hand, the clang-format style changes will be enforced automatically after the commit by this hook
# Hence, clang-format will not lead to a rejection of any commit but will be executed automatically
# Nevertheless, the user will get a shell output of the clang-format changes

# In a second phase a set of python scripts checks the commited files for compliance with the BACI header requirements
# If a header is missing or does not follow the BACI standards, the python scipts will generate according error messages in the shell output
# The commit will be rejected if errors appear. The user has to change the headers manually until all requirements are fulfilled

# The commit will be rejected if this hook script returns the value 1 and will be accepted if it returns 0
# Commit rejection can only be triggered by non-compliant headers


# Author :	 Jonas Nitzler
# Date :	 29.08.2018
# Version:       1.0

########### Give text output when the hook is stated #########################################################################################################
echo "####################################################################"
echo "GIT Hook started: Checking now for format and header compliance....."
echo "####################################################################"

########### Execute clang-format with syle file settings #####################################################################################################
git diff --cached --name-only --diff-filter=ACMRT -- src/ |
    grep -E ".cpp$|.h$|.cp$|.H$|.cc$|.hpp$|.hh$|.hxx$|.cxx" |
			xargs utilities/code_styles/clang-format -i -style=file

# 1) give out all files that differ from the last commit under the constraint of being A : Added,  C : Copied, M : Modified, R : Renamed, T : Changed
# 2) run clang - format with our modified Google style on those files

if [ $? -ne 1 ];

then
       	echo "#################################################################"
       	echo "Commit did not match clang-format and was automatically formated:"
       	echo "#################################################################"

# 3) Give the user a short feedback if he was compliant or not and show the differences again
	git diff --cached --diff-filter=ACMRT -- src/ 
	
else
       	echo "#######################################################"
       	echo "Commit matched clang format style, no changes by clang!"
       	echo "#######################################################"
fi


########### Execute header checks ############################################################################################################################### 
echo "################################################"
echo "Checking now for headers ......................."
echo "################################################"
utilities/code_styles/header-check.py || exit 1

# 4) The python script runs internally only on the diffs by design --> no need for git diff...
# 5) Header design cannot be automated! Hence: if not compliant reject the current commit and give out error messages, accordingly (done by python script)

    
echo "################################################################"
echo "All headers were compliant with the code style! Commit accepted!"
echo "################################################################"

exit 0

