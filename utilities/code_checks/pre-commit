#!/bin/bash

#####################################################
########## DESCRIPTION ##############################
#####################################################

# This pre - commit hook will be executed by Git before every new commit and consists of the following stages:
#
# Stage 1: Style format check
# In the version at hand, clang-format will only write out non-compliant files to the shell output and will not perfom any formatting automatically
# In the case that the script detects files that are not compliant with the current clang-format BACI style, the commit will be rejected (script exits 1)
#
# Stage 2: Header check
# A set of Python scripts checks the staged files for compliance with the BACI header requirements
# If a header is missing or does not follow the BACI standards, the Python scripts will generate error messages in the shell output
# The commit will be rejected if errors appear (script exit 1). The user has to change the headers manually until all requirements are fulfilled
#
# Stage 3: Check commit on master
# A commit on master branch is rejected (script exits 1). The user is asked to create and checkout a new feature branch in order to proceed with the commit.
#
# The commit will be accepted if the script exits with 0
#
# Author:    Jonas Nitzler
#            Maximilian Grill
# Date:      26.08.2019
# Version:   1.5

# Load the python virtual environment, which provides clang-format.
source utilities/baci-python-venv/bin/activate

### Style format check ##############################
# set the field separator to new line
IFS=$'\n'

for line in $(git diff --cached --name-only --diff-filter=ACMR)
do
# check if the file is a c or cpp file
if [[ $line == *.cpp || $line == *.cc || $line == *.cp || $line == *.cxx || $line == *.H || $line == *.h || $line == *.hpp || $line == *.hh || $line == *.hxx ]]
then
    # Check if clang would format the file
    if [[  $(diff -u <(clang-format -style=file $(pwd)/${line}) <(cat $(pwd)/${line})) ]]
    then
    uncompliant_files+="$(pwd)/${line}\n"
    fi
fi
done

if [ ! -z "$uncompliant_files" ]
then
printf "\n"
printf "The following file(s) are not compliant with BACI's coding style:\n"
printf "\n"
echo "########################################################################"
printf "$uncompliant_files"
echo "########################################################################"
printf "\n"
echo "--> Please run clang-format manually for those files using:"
echo "source ./utilities/baci-python-venv/bin/activate"
echo "clang-format -i -style=file <path/to/file>"
echo "(Run this from BACI's top-level directory)"
printf "\n"
echo "--> Alternatively you can use the following script to format ALL source files:"
echo "./utilities/run_clang_on_everything"
echo "(Run this from BACI's top-level directory)"
printf "\n"
echo "--> Afterwards, please add all formatted files to the Git staging area using: git add <path/to/file>"
printf "\n"
exit 1
fi

### Header check ####################################
python2 ./utilities/code_checks/header_check.py --diff_only || exit 1
python2 ./utilities/code_checks/testing_frameworks_check.py --diff_only || exit 1

### Check commit on master ##########################
branch="$(git rev-parse --abbrev-ref HEAD)"
if [ "$branch" = "master" ]
then
  printf "\n"
  echo "Commiting directly to master branch is not allowed!"
  printf "\n"
  echo "--> Create and checkout a new feature branch via:"
  echo "git checkout -b <branchName>"
  echo "(All staged and unstaged changes are kept)"
  printf "\n"
  echo "--> Afterwards, commit on the newly created branch."
  printf "\n"
  exit 1
fi


exit 0
