#!/bin/bash

############################################################
#
# This pre - commit hook will be executed by Git before every new commit and consists of the following stages:
#
# Stage 1: Style format check
# In the version at hand, clang-format, xmlformat and yamlfmt will only write out non-compliant files to the shell output and will not perfom any formatting automatically
# In the case that the script detects files that are not compliant with the current clang-format/xmlformat/yamlfmt 4C style, the commit will be rejected (script exits 1)
# Additionally a check for non-ascii characters is performed. Non-compliant files are also written to the shell output.
#
# Stage 2: Header check
# A set of Python scripts checks the staged files for compliance with the 4C header requirements
# If a header is missing or does not follow the 4C standards, the Python scripts will generate error messages in the shell output
# The commit will be rejected if errors appear (script exits 1). The user has to change the headers manually until all requirements are fulfilled
#
# Stage 3: Framework check
# A Python script checks if the unit tests follow the naming conventions, its addition to a local CMakeLists.txt, or if they are not ordered in alphabetical order.
# It also checks if the input file tests use an unjustified high mpi rank, if they are missing in TestingFrameworkListOfTests.cmake or if they have empty sections.
# The commit will be rejected in case a check fails (script exits 1).
#
# Stage 4: Check commit on master
# A commit on master branch is rejected (script exits 1). The user is asked to create and checkout a new feature branch in order to proceed with the commit.
#
# The commit will be accepted if the script exits with 0
#
############################################################

# Load the python virtual environment, which provides clang-format.
PYTHON_VENV_ACTIVATION_SCRIPT="utilities/python-venv/bin/activate"
if [ ! -f $PYTHON_VENV_ACTIVATION_SCRIPT ]; then
    echo "You have not created the python virtual environment, which is necessary to run all checks. You can use the following command in your source directory:"
    echo ""
    echo "./set_up_dev_env.sh"
    exit 1
fi
source $PYTHON_VENV_ACTIVATION_SCRIPT

### Stage 1: Style format check ##############################
# set the field separator to new line
IFS=$'\n'

# test all changed files
for line in $(git diff --cached --name-only --diff-filter=ACMR)
do

# check if there are non-ascii characters in the file (excluding *.md files)
if [[ "$line" != *.md && "$line" != *.rst ]]
then
  non_ascii_chars=`(git diff HEAD $line | grep --perl-regex --no-filename --only-matching --binary-files=without-match "[^\x00-\x7F]" | sort --unique | tr --delete '\n')`
  if [ -n "$non_ascii_chars" ]; then
    cnt=${#non_ascii_chars}
    for ((i=0; i < cnt; i++)); do
      char=${non_ascii_chars:$i:1}
      non_ascii_error+="${line} contains non-ascii character '$char'\n"
    done
  fi
fi

# check if the file is a yaml file
if [[ $line == *.yaml || $line == *.yml ]]
then
    # Check if yamlfmt would format the file by calling format_yaml without overwrite
    if [[ $(diff -u <($(pwd)/utilities/format_yaml --nooverwrite $(pwd)/${line}) <(cat $(pwd)/${line})) ]]
    then
    uncompliant_files+="$(pwd)/${line}\n"
    fi
fi

done

# printout for non-ascii characters
if [ ! -z "$non_ascii_error" ]
then
printf "\n"
printf "The following file(s) contain non-ascii characters:\n"
printf "\n"
echo "########################################################################"
printf $non_ascii_error
echo "########################################################################"
printf "\n"
echo "--> Please remove those non-ascii characters"
fi

# printout for uncompliant c, cpp or cmake files
if [ ! -z "$uncompliant_files" ]
then
printf "\n"
printf "The following file(s) are not compliant with 4C's coding style:\n"
printf "\n"
echo "########################################################################"
printf "$uncompliant_files"
echo "########################################################################"
printf "\n"
echo "--> You can use the following script to format all changed source files:"
echo "./utilities/code_format_everything"
echo "(Run this from 4C's top-level directory)"
printf "\n"
echo "--> Afterwards, please add all formatted files to the Git staging area using: git add <path/to/file>"
printf "\n"
fi

# exit if any files are uncompliant
if [[ ! -z "$uncompliant_files" ]]
then
exit 1
fi

### Stage 2: Header, filename, include style & codeowners check ###
python ./utilities/code_checks/header_check.py --diff_only || exit 1

python ./utilities/code_checks/check_filenames_and_includes.py src unittests --diff_only || exit 1

python ./utilities/code_checks/check_header_guards.py --diff_only || exit 1

python ./utilities/code_checks/check_codeowners.py --diff_only|| exit 1

### Stage 3: Framework check ####################################
python ./utilities/code_checks/testing_frameworks_check.py --diff_only || exit 1

### Stage 4: Check commit on master ##########################
branch="$(git rev-parse --abbrev-ref HEAD)"
if [ "$branch" = "master" ]
then
  printf "\n"
  echo "Commiting directly to master branch is not allowed!"
  printf "\n"
  echo "--> Create and checkout a new feature branch via:"
  echo "git checkout -b <branchName>"
  echo "(All staged and unstaged changes are kept)"
  printf "\n"
  echo "--> Afterwards, commit on the newly created branch."
  printf "\n"
  exit 1
fi


exit 0
