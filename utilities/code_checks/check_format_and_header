#!/bin/bash

############################################################
#
# This is a bash script meant for code checks concerning clang-format style, header compliance and xml formatting style.
#
# The test will fail if code is found that 
#   if our header requirements for input files and source files are violated, 
#   if our requirements for unit and input file tests are violated
#   if a source file is not prefixed with the module name, or
#   if C++ source files, or python, xml or yaml files are found that are not compliant with our respective format style.
#
# In the event of failure, an error message is written to stdout and to the files
#   "wrong_headers.txt",
#   "wrong_tests.txt"
#   "wrong_code_format.txt", respectively.
#
############################################################

# Delete old .txt files containing non-compliant files
[ -e wrong_headers.txt ] && rm wrong_headers.txt
[ -e wrong_tests.txt ] && rm wrong_tests.txt
[ -e wrong_code_format.txt ] && rm wrong_code_format.txt

# Load the python virtual environment, which provides the formatters.
source ./utilities/baci-python-venv/bin/activate

### Header check ################################################
echo "Start test for correct file headers ..."
python ./utilities/code_checks/header_check.py --out wrong_headers.txt | tee wrong_headers.txt

if [ -s wrong_headers.txt ]
then
  echo "Failed. Non-compliant file headers have been reported in wrong_headers.txt."
  cat wrong_headers.txt
  exit 1
else
  rm wrong_headers.txt
  echo "Passed."
fi


### Tests check ################################################
echo "Start test for input files and unittests ..."
python ./utilities/code_checks/testing_frameworks_check.py --out wrong_tests.txt | tee wrong_tests.txt

if [ -s wrong_tests.txt ]
then
  echo "Failed. Non-compliant (unit- and input file-)tests have been reported in wrong_tests.txt."
  cat wrong_tests.txt
  exit 1
else
  rm wrong_tests.txt
  echo "Passed."
fi

### Module prefixes check ######################################
echo "Start test for module prefixes and correct include style ..."
python ./utilities/code_checks/check_file_prefix_and_includes.py src unittests --out wrong_prefix.txt | tee wrong_prefix.txt

if [ -s wrong_prefix.txt ]
then
  echo "Failed. Non-compliant files have been reported in wrong_prefix.txt."
  cat wrong_prefix.txt
  exit 1
else
  rm wrong_prefix.txt
  echo "Passed."
fi


### Check for header guards ####################################
echo "Start test for header guards ..."
python ./utilities/code_checks/check_header_guards.py --out wrong_header_guards.txt | tee wrong_header_guards.txt

if [ -s wrong_header_guards.txt ]
then
  echo "Failed. Non-compliant files have been reported in wrong_header_guards.txt."
  cat wrong_header_guards.txt
  exit 1
else
  rm wrong_header_guards.txt
  echo "Passed."
fi


### Style Format check #########################################
#   1) Check for non-ascii characters
#   2) Execute clang-format with style file settings (taken from https://github.com/sheredom/git-hooks) 
#   3) Execute cmake-format with options declared in "./cmake-format.yaml"
#   4) Execute xmlformat without overwrite and the options declared in bacixmlformat
#   5) Execute black 
#   6) Execute yamlfmt without overwrite and the options declared in baciyamlformat

# set the field separator to new line
IFS=$'\n'

# test all files
echo "Start test for code format ..."
for line in $(git ls-files)
do

# 1) check if there are non-ascii characters in the file (excluding *.md files)
if [[ "$line" != *.md && "$line" != *.rst ]]
then
  non_ascii_chars=`(grep --perl-regex --no-filename --only-matching --binary-files=without-match "[^\x00-\x7F]" $line | sort --unique | tr --delete '\n')`
  if [ -n "$non_ascii_chars" ]; then
    cnt=${#non_ascii_chars}
    for ((i=0; i < cnt; i++)); do
      char=${non_ascii_chars:$i:1}
      uncompliant_files+="$(pwd)/${line} contains non-ascii character '$char'\n"
    done
  fi
fi

# 2) check if the file is a c or cpp file
if [[ $line == *.cpp || $line == *.cc || $line == *.cp || $line == *.cxx || $line == *.H || $line == *.h || $line == *.hpp || $line == *.hh || $line == *.hxx ]]
then
    # Check if clang would format the file
    if [[  $(diff -u <(clang-format -style=file $(pwd)/${line}) <(cat $(pwd)/${line})) ]]
    then
    uncompliant_files+="$(pwd)/${line}\n"
    fi
fi

# 3) check if the file is a cmake file
if [[ $line == *.cmake || $line == *CMakeLists.txt ]]
then
    # Check if cmake-format would format the file
    if ! cmake-format -c $(pwd)/utilities/code_checks/.cmake-format.yaml --check $(pwd)/${line} 2> /dev/null
    then
    uncompliant_files+="$(pwd)/${line}\n"
    fi
fi

# 4) check if the file is an xml file
if [[ $line == *.xml ]]
then
    # Check if xmlformat would format the file by calling bacixmlformat without override
    if [[  $(diff -u <($(pwd)/utilities/bacixmlformat --nooverride $(pwd)/${line}) <(cat $(pwd)/${line})) ]]

    then
    uncompliant_files+="$(pwd)/${line}\n"
    fi
fi

# 5) check if the file is a python file
if [[ $line == *.py ]]
then
    # Check if black would format the file
    if ! black --quiet --check $(pwd)/${line}
    then
    uncompliant_files+="$(pwd)/${line}\n"
    fi
fi

# 6) check if the file is a yaml file
if [[ $line == *.yaml || $line == *.yml ]]
then
    # Check if yamlfmt would format the file by calling baciyamlformat without overwrite
    if [[ $(diff -u <($(pwd)/utilities/baciyamlformat --nooverwrite $(pwd)/${line}) <(cat $(pwd)/${line})) ]]
    then
    uncompliant_files+="$(pwd)/${line}\n"
    fi
fi
done

# write uncompliant files to txt file
if [ ! -z "$uncompliant_files" ]
then
echo "" 
(printf "$uncompliant_files")>>wrong_code_format.txt
echo "Format check failed. Non-compliant files have been reported in wrong_code_format.txt."
cat wrong_code_format.txt
fi

# exit if there are any uncompliant files
if [[ ! -z "$uncompliant_files" ]]
then
exit 1
fi

echo "Passed."
exit 0
