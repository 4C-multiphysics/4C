#!/bin/bash

############################################################
#
# This is a bash script meant for code checks concerning clang-format style, header compliance and xml formatting style.
#
# The test will fail if code is found that 
#   is not compliant with the BACI clang format style,
#   if our header requirements for input files and source files are violated, or
#   if xml files are found that are not compliant with our xml format style.
#
# In the event of failure, an error message is written to stdout and to the files
#   "wrong_clang_format.txt",
#   "wrong_format.txt", respectively
#   "wrong_xml_format.txt".
#
############################################################

# Delete old .txt files containing non-compliant files
[ -e wrong_format.txt ] && rm wrong_format.txt
[ -e wrong_clang_format.txt ] && rm wrong_clang_format.txt
[ -e wrong_xml_format.txt ] && rm wrong_xml_format.txt

# Load the python virtual environment, which provides clang-format.
source ./utilities/baci-python-venv/bin/activate

### Header check ################################################
echo "Start test for correct file headers ..."
python ./utilities/code_checks/header_check.py --out wrong_format.txt | tee wrong_format.txt

if [ -s wrong_format.txt ]
then
  echo "Failed. Non-compliant file headers have been reported in wrong_format.txt."
  cat wrong_format.txt
  exit 1
else
  echo "Passed."
fi


### Tests check ################################################
echo "Start test for input files and unittests ..."
python ./utilities/code_checks/testing_frameworks_check.py --out wrong_tests.txt | tee wrong_tests.txt

if [ -s wrong_tests.txt ]
then
  echo "Failed. Non-compliant (unit- and input file-)tests have been reported in wrong_tests.txt."
  cat wrong_tests.txt
  exit 1
else
  echo "Passed."
fi

### Style Format check #########################################
#   1) Execute clang-format with style file settings (taken from https://github.com/sheredom/git-hooks) 
#   2) Execute xmlformat without overwrite and the options declared in bacixmlformat

# set the field separator to new line
IFS=$'\n'

echo "Start test for code format ..."
for line in $(git ls-files)
do

# 1.1) check if the file is a c or cpp file
if [[ $line == *.cpp || $line == *.cc || $line == *.cp || $line == *.cxx || $line == *.H || $line == *.h || $line == *.hpp || $line == *.hh || $line == *.hxx ]]
then
    # Check if clang would format the file
    if [[  $(diff -u <(clang-format -style=file $(pwd)/${line}) <(cat $(pwd)/${line})) ]]
    then
    uncompliant_files+="$(pwd)/${line}\n"
    fi
fi

# 1.2) check if the file is a cmake file
if [[ $line == *.cmake || $line == *CMakeLists.txt ]]
then
    # Check if cmake-format would format the file
    if ! cmake-format -c $(pwd)/utilities/code_checks/.cmake-format.yaml --check $(pwd)/${line} 2> /dev/null
    then
    uncompliant_files+="$(pwd)/${line}\n"
    fi
fi

# 2) check if the file is an xml file
if [[ $line == *.xml ]]
then
    # Check if xmlformat would format the file by calling bacixmlformat without override
    if [[  $(diff -u <($(pwd)/utilities/bacixmlformat --nooverride $(pwd)/${line}) <(cat $(pwd)/${line})) ]]

    then
    uncompliant_xml_files+="$(pwd)/${line}\n"
    fi
fi
done

# write uncompliant c, cpp or cmake files to txt file
if [ ! -z "$uncompliant_files" ]
then
(printf "$uncompliant_files")>>wrong_clang_format.txt
echo "Failed. Non-compliant files have been reported in wrong_clang_format.txt."
cat wrong_clang_format.txt
fi

# write uncompliant xml files to txt file
if [ ! -z "$uncompliant_xml_files" ]
then
(printf "$uncompliant_xml_files")>>wrong_xml_format.txt
echo "Failed. Non-compliant files have been reported in wrong_xml_format.txt."
cat wrong_xml_format.txt
fi

# exit if there are any uncompliant files
if [[ ! -z "$uncompliant_files" || ! -z "$uncompliant_xml_files" ]]
then
exit 1
fi

echo "Passed."
exit 0
