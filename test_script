#!/bin/sh
#==========================================
# bash script to compile ccarat for each
# commented input file, run the file and
# analyze the output.
#
#                           (C) by mn 02/04
#==========================================

# some usability tests
if [ "x$1" = "x" ]; then
  echo usage: $0 config-file-name
  exit 1
fi

if [ ! -s "$1" ]; then
  echo $0: file not found: $1
  exit 1
fi


# initialize some counters
fail1=0
pass1=0
fail2=0
pass2=0
total=0
number=0
s_time=0
e_time=0

# variables used for creating the makefile
makefile="Makefile.test"
configfile="$1"
definefile="config/defines.test"
#specialargs="$pfl"
NODEPS=yes


# prepare clean up
function cleanup
{
    #echo cleanup
    make -f $makefile clean >/dev/null
    rm -f test.tmp test_out_* $exe make.log $makefile $definefile

    # remove hook
    trap "echo" 0 1 2 15
    exit
}

trap "cleanup" 0 1 2 15



# remove all output files from previous runs
rm -f *.dat.scr *.dat.make.log

# figure out whether we are parallel or not
touch "$definefile"
. "./$configfile"


# create a list with all commented Input files
if [ "x$PARALLEL" = "xno" ]; then
  # sequentiell test
  liste='
  ale2_nln.dat
  ale_3d_hourg.dat
  ale_3d_umfpack.dat
  ale_3d_umfpack_fastass.dat
  axishell.dat
  b3_elast.dat
  b3_matnln.dat
  c1_elast.dat
  c1_elast_geonln.dat
  c1_neum_geonln.dat
  c1_optfsd.dat
  c1_plast_mises.dat
  dyn_shell_dirich.dat
  dyn_shell_neum.dat
  f2_drivencavity20x20.dat
  f2_eq4x4_algebraic.dat
  f2_eq4x4_keps.dat
  f2_eq4x4_kome.dat
  f2_freeosz20x20.dat
  f2_kim-moin.dat
  f2_locsystest.dat
  f2pro_channelflow10x10.dat
  f3_beltrami.dat
  f3_beltrami_fastass.dat
  f3_beltrami_fastass2.dat
  f3_ew_Q1_27x.dat
  f3f_beltrami.dat
  f3f_ew_Q1_27x.dat
  ffsi_ow3D.dat
  fsi_mtr_dc4x4.dat
  fsi_ow32x32.dat
  fsi_tank20x10.dat
  fsi_tank3D.dat
  shell8_lineload.dat
  shell9_dpmisGF.dat
  shell9_epc.dat
  shell9_el_lay_eans.dat
  shell9_kreuz_easnl.dat
  shell9_matnl.dat
  ssi_mortar_canti.dat
  w1_3DmisGF.dat
  w1_epc3D.dat
  w1_Eulerstab.dat
  w1_incompmode.dat
  w1_mises.dat
  w1dyn.dat
  struct2ml_ifvers.dat
  '
else
  # parallel test
  liste='
  ale2_nln.dat
  b3_elast.dat
  b3_matnln.dat
  c1_elast.dat
  c1_neum_geonln.dat
  c1_optfsd.dat
  c1_plast_mises.dat
  dyn_shell_dirich.dat
  dyn_shell_neum.dat
  f2_drivencavity20x20.dat
  f2_eq4x4_algebraic.dat
  f2_freeosz20x20.dat
  f2_kim-moin.dat
  f2_locsystest.dat
  f3_beltrami.dat
  f3_beltrami_fastass.dat
  f3_beltrami_fastass2.dat
  f3_ew_Q1_27x.dat
  f3f_beltrami.dat
  f3f_ew_Q1_27x.dat
  ffsi_ow3D.dat
  fsi_mtr_dc4x4.dat
  fsi_ow32x32.dat
  fsi_tank20x10.dat
  shell8_lineload.dat
  shell9_dpmisGF.dat
  shell9_el_lay_eans.dat
  shell9_epc.dat
  shell9_kreuz_easnl.dat
  shell9_matnl.dat
  w1_3DmisGF.dat
  w1_Eulerstab.dat
  w1_epc3D.dat
  w1_incompmode.dat
  w1_mises.dat
  w1dyn.dat
  '
fi

#liste=' f3f_beltrami.dat f3f_ew_Q1_27x.dat ffsi_ow3D.dat'

# get the start-time in seconds:
h=`date +"%H"`
m=`date +"%M"`
s=`date +"%S"`
st_time=`expr $s + 60 \* $m + 60 \* 60 \* $h`


# count files in list
for file in $liste; do
  total=`expr $total + 1`
done


# loop this list
for file in $liste; do

  # write time and filename to the srceen
  number=`expr $number + 1`
  echo ' '
  echo '========================================'
  date
  echo ' '
  echo 'Testing ' $file '   ('$number'/'$total')'

  inputfile="Input/$file"

  # create Makefile
  echo
  echo '  Making Makefile ...'
  echo "  NODEPS=$NODEPS ./configure $configfile $definefile"

  . ./scripts/extract-defines.sh
  . ./scripts/setup-variables.sh
  . ./scripts/setup-libraries.sh
  . ./scripts/setup-objects.sh
  . ./scripts/build-define-header.sh
  . ./scripts/build-makefile.sh

  exe=$PROGRAMNAME

  # remove executable
  rm -f $exe

  # get the start-time in seconds:
  h=`date +"%H"`
  m=`date +"%M"`
  s=`date +"%S"`
  s_time=`expr $s + 60 \* $m + 60 \* 60 \* $h`

  # make the executable
  echo
  echo '  Making executable ...'
  make -f $makefile clean 2>&1 | cat > make.log
  make -f $makefile 2>&1 | cat >> make.log

  # get the end-time in seconds:
  h=`date +"%H"`
  m=`date +"%M"`
  s=`date +"%S"`
  e_time=`expr $s + 60 \* $m + 60 \* 60 \* $h`
  time=`expr $e_time - $s_time`
  mins=`expr $time / 60`
  secs=`expr $time % 60`
  echo '    '$mins':'$secs' mins:secs'


  # check the success of the make
  # (look for the executable)
  if [ -a $exe ]; then
    echo '    OK'
    pass1=`expr $pass1 + 1`
    chmod 755 $exe
  else
    echo '    Failed!!'

    # save the log on failture
    mv make.log $file.make.log

    fail1=`expr $fail1 + 1`
    continue
  fi


  # get the start-time in seconds:
  h=`date +"%H"`
  m=`date +"%M"`
  s=`date +"%S"`
  s_time=`expr $s + 60 \* $m + 60 \* 60 \* $h`

  if [ "x$PARALLEL" = "xno" ]; then
    # run the executable with the inputfile
    echo
    echo '  Running Input-file...'
    ./$exe Input/$file test_out_ >test.tmp
  else
    # parallel run
    echo
    echo '  Running Input-file in parallel...'
    mpirun -np 2 ./$exe Input/$file test_out_ >test.tmp
  fi

  # get the end-time in seconds:
  h=`date +"%H"`
  m=`date +"%M"`
  s=`date +"%S"`
  e_time=`expr $s + 60 \* $m + 60 \* 60 \* $h`
  time=`expr $e_time - $s_time`
  mins=`expr $time / 60`
  secs=`expr $time % 60`
  echo '    '$mins':'$secs' mins:secs'

  # evaluate the output
  # (look for the word 'normally' in the output
  count=`cat test.tmp | grep -c "normally"`
  if [ $count -ge 1 ]; then
    echo '    OK'
    pass2=`expr $pass2 + 1`
    # copy screen output to $file.scr
    #cp test.tmp $file.scr
  else
    echo '    Failed!!'
    fail2=`expr $fail2 + 1`
    # copy screen output to $file.scr
    cp test.tmp $file.scr
    continue
  fi

done
# end of the loop over all input files


# write final time to the screen
echo
echo '========================================'
date
echo

# get the end-time in seconds:
h=`date +"%H"`
m=`date +"%M"`
s=`date +"%S"`
et_time=`expr $s + 60 \* $m + 60 \* 60 \* $h`
ttime=`expr $et_time - $st_time`
mins=`expr $ttime / 60`
secs=`expr $ttime % 60`
echo 'Total time:'
echo ''$mins':'$secs' mins:secs'
echo


# write table with result to the screen
echo '-----------------------------'
printf '| '
printf $total' files    '
if [ $total -le 9 ]; then
  printf ' '
fi
printf '| pass | fail |\n'
echo '|-------------|------|------|'
printf "| compilation |  "
if [ $pass1 -le 9 ]; then
  printf ' '
fi
printf $pass1'  |  '
if [ $fail1 -le 9 ]; then
  printf ' '
fi
printf $fail1'  |\n'
echo '|-------------|------|------|'
printf "| running     |  "
if [ $pass2 -le 9 ]; then
  printf ' '
fi
printf $pass2'  |  '
if [ $fail2 -le 9 ]; then
  printf ' '
fi
printf $fail2'  |\n'
echo '-----------------------------'
echo
