#!/bin/sh
#==========================================
# bash script to compile ccarat for each 
# commented input file, run the file and
# analyze the output.
#
#                           (C) by mn 02/04
#==========================================
#
# 
# change the following three variables 
# according to the target machine:
#
# use the following config-file
#------------------------------
#conf="stgrt.hpux11.cc.seq"
conf="stgrt.hpux11.cc.par"
#
# do a parallel test
#-------------------
#para=0
para=1
#
# use the following name for the executable
#------------------------------------------
#exe="cca_11_seq32.fast"
exe="cca_11_par32.fast"
#
#
#
#==========================================
#
# initialize some counters
fail1=0
pass1=0
fail2=0
pass2=0
total=0

# Remember current working directory
apwd=`pwd`

# copy define_sizes.h to define_sizes.h_tmp
cp src/headers/define_sizes.h src/headers/define_sizes.h_tmp

# remove all *.dat.scr files
rm *.dat.scr


# create a list with all commented Input files
if [ $para -eq 0 ]; then
  # sequentiell test
  liste='
  ale2_nln.dat
  ale_3d_hourg.dat
  axishell.dat
  b3_elast.dat
  b3_matnln.dat
  c1_elast.dat
  c1_elast_geonln.dat
  c1_neum_geonln.dat
  c1_optfsd.dat
  c1_plast_mises.dat
  dyn_shell_dirich.dat
  dyn_shell_neum.dat
  f2_drivencavity20x20.dat
  f2_eq4x4_algebraic.dat
  f2_eq4x4_keps.dat
  f2_eq4x4_kome.dat
  f2_freeosz20x20.dat
  f2_kim-moin.dat
  f2pro_channelflow10x10.dat
  f3_beltrami.dat
  f3_ew_Q1_27x.dat
  fsi_ow32x32.dat
  fsi_tank20x10.dat
  shell8_lineload.dat
  shell9_el_lay_eans.dat
  shell9_kreuz_easnl.dat
  shell9_matnl.dat
  w1_Eulerstab.dat
  w1_incompmode.dat
  w1_mises.dat
  w1dyn.dat
  '
else
  # parallel test
  liste='
  ale2_nln.dat
  b3_elast.dat
  b3_matnln.dat
  c1_elast.dat
  c1_elast_geonln.dat
  c1_neum_geonln.dat
  c1_optfsd.dat
  c1_plast_mises.dat
  dyn_shell_dirich.dat
  dyn_shell_neum.dat
  f2_drivencavity20x20.dat
  f2_eq4x4_algebraic.dat
  f2_freeosz20x20.dat
  f2_kim-moin.dat
  f3_beltrami.dat
  f3_ew_Q1_27x.dat
  fsi_ow32x32.dat
  fsi_tank20x10.dat
  shell8_lineload.dat
  shell9_el_lay_eans.dat
  shell9_kreuz_easnl.dat
  shell9_matnl.dat
  w1_Eulerstab.dat
  w1_incompmode.dat
  w1_gemm_contact_emconserv.dat
  w1_mises.dat
  w1dyn.dat
  '
fi
 
#liste='krag_2ele_expl.dat'

# loop this list
for file in $liste; do 

  # write time and filename to the srceen
  echo ' '
  echo '========================================'
  date
  echo ' '
  echo 'Testing ' $file
  total=`expr $total + 1`


  # copy define_sizes.h_tmp to define_sizes.h
  cp src/headers/define_sizes.h_tmp src/headers/define_sizes.h

  # remove executable
  rm $exe

  # for each #define in the input file 
  # - append an according string to PFL1
  pfl1=`awk -v ORS=' ' '/#define / {print "-D" $3 "=" $4}' Input/$file`
  #   remove the parentheses around the numbers
  pfl=`echo $pfl1 | sed 's/(//g' | sed 's/)//g' `


  # for each #define in the input file 
  # - delete the matching line in define_sizes.h
  def=`awk '/#define / {print $3 }' Input/$file`
  for zeile in $def; do
    sed '/'$zeile' /d' src/headers/define_sizes.h > test.h
    mv test.h src/headers/define_sizes.h
  done
  

  # read the necessary defines from the input file and 
  # write them to config/defines.test
  pfl3=`awk '/necessary defines:/ {print $0}' Input/$file `
  pfl4=`echo $pfl3 | sed 's/\/\/ necessary defines: //g'`
  `echo $pfl4 |awk '{for (i=1; i<=NF; i++) printf("%s\n",$i) }' > config/defines.test`

   
  # create Makefile
  echo
  echo '  Making Makefile ...'
  echo '  NODEPS=yes ./configure config/'$conf' config/defines.test "'$pfl'"'
  failc=`NODEPS=yes ./configure config/$conf config/defines.test "$pfl"`


  # make the executable
  echo
  echo '  Making executable ...'
  make clean 2>&- 1>&-
  make 2>&- >/dev/null


  # check the success of the make
  # (look for the executable)
  if [ -a $exe ]; then
    echo '    OK'
    pass1=`expr $pass1 + 1`
    chmod 755 $exe
  else
    echo '    Failed!!'
    fail1=`expr $fail1 + 1`
    continue
  fi

  if [ $para -eq 0 ]; then
    # run the executable with the inputfile
    echo
    echo '  Running Input-file...'
    $exe Input/$file test_out_ >test.tmp 
  else
    # parallel run
    echo
    echo '  Running Input-file in parallel...'
    mpirun -np 1 $exe Input/$file test_out_ >test.tmp 
  fi


  # evaluate the output
  # (look for the word 'normally' in the output
  count=`cat test.tmp | grep -c "normally"`
  if [ $count -ge 1 ]; then
    echo '    OK'
    pass2=`expr $pass2 + 1`
  else
    echo '    Failed!!'
    fail2=`expr $fail2 + 1`
    # copy screen output to $file.scr
    cp test.tmp $file.scr
    continue
  fi

done
# end of the loop over all input files


# write final time to the screen
echo 
echo '========================================'
date
echo 


# write table with result to the screen
echo '-----------------------------'
printf '| '
printf $total' files    '
if [ $total -le 9 ]; then
  printf ' '
fi
printf '| pass | fail |\n'
echo '|-------------|------|------|'
printf "| compilation |  "
if [ $pass1 -le 9 ]; then
  printf ' '
fi
printf $pass1'  |  '
if [ $fail1 -le 9 ]; then
  printf ' '
fi
printf $fail1'  |\n'
echo '|-------------|------|------|'
printf "| running     |  "
if [ $pass2 -le 9 ]; then
  printf ' '
fi
printf $pass2'  |  '
if [ $fail2 -le 9 ]; then
  printf ' '
fi
printf $fail2'  |\n'
echo '-----------------------------'
echo
  

# clean up
mv src/headers/define_sizes.h_tmp src/headers/define_sizes.h
make clean >/dev/null
rm test.tmp
rm test_out_*
rm Makefile
rm config/defines.test
rm $exe


# change back to the current working directory
cd $apwd
